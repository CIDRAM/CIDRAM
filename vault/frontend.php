<?php
/**
 * This file is a part of the CIDRAM package.
 * Homepage: https://cidram.github.io/
 *
 * CIDRAM COPYRIGHT 2016 and beyond by Caleb Mazalevskis (Maikuolan).
 *
 * License: GNU/GPLv2
 * @see LICENSE.txt
 *
 * This file: Front-end handler (last modified: 2023.03.13).
 */

/** Prevents execution from outside of CIDRAM. */
if (!defined('CIDRAM')) {
    die('[CIDRAM] This should not be accessed directly.');
}

/** Kill the script if the front-end functions file doesn't exist. */
if (!file_exists($CIDRAM['Vault'] . 'frontend_functions.php')) {
    header('Content-Type: text/plain');
    die('[CIDRAM] Front-end functions file missing! Please reinstall CIDRAM.');
}

/** Load the front-end functions file. */
require $CIDRAM['Vault'] . 'frontend_functions.php';

/** Set page selector if not already set. */
if (empty($CIDRAM['QueryVars']['cidram-page'])) {
    $CIDRAM['QueryVars']['cidram-page'] = '';
}

/** Populate common front-end variables. */
$CIDRAM['FE'] = [
    /** "Generated by ..." line. */
    'GeneratedBy' => !$CIDRAM['Config']['general']['hide_version'] ? sprintf(
        $CIDRAM['L10N']->getString('generated_by'),
        '<div class="txtRd" dir="ltr">' . $CIDRAM['ScriptIdent'] . '</div>'
    ) : '&nbsp;',

    /** Main front-end HTML template file. */
    'Template' => $CIDRAM['ReadFile']($CIDRAM['GetAssetPath']('frontend.html')),

    /** Needed for custom favicons. */
    'favicon_extension' => $CIDRAM['favicon_extension'],

    /** Populated by front-end JavaScript data as per needed. */
    'JS' => '',

    /** Populated by any other header data required for the request (usually nothing). */
    'OtherHead' => '',

    /** Default password hash ("password"). */
    'DefaultPassword' => '$2y$10$FPF5Im9MELEvF5AYuuRMSO.QKoYVpsiu1YU9aDClgrU57XtLof/dK',

    /** Current default language. */
    'FE_Lang' => $CIDRAM['Config']['general']['lang'],

    /** Font magnification. */
    'Magnification' => $CIDRAM['Config']['template_data']['Magnification'],

    /** Define active configuration file. */
    'ActiveConfigFile' => !empty($CIDRAM['Overrides']) ? $CIDRAM['Domain'] . '.config.ini' : 'config.ini',

    /** Current time and date. */
    'DateTime' => $CIDRAM['TimeFormat']($CIDRAM['Now'], $CIDRAM['Config']['general']['timeFormat']),

    /** How the script identifies itself. */
    'ScriptIdent' => $CIDRAM['ScriptIdent'],

    /** Current default theme. */
    'theme' => $CIDRAM['Config']['template_data']['theme'],

    /** List of front-end users will be populated here. */
    'UserList' => "\n",

    /** List of front-end sessions will be populated here. */
    'SessionList' => "\n",

    /** Cache data will be populated here. */
    'Cache' => "\n",

    /**
     * The current user state.
     * -1 = Attempted and failed to log in.
     * 0 = Not logged in.
     * 1 = Logged in.
     * 2 = Logged in, but awaiting two-factor authentication.
     */
    'UserState' => 0,

    /** Taken from either $_POST['username'] or $_COOKIE['CIDRAM-ADMIN'] (the username claimed by the client). */
    'UserRaw' => '',

    /**
     * User permissions.
     * 0 = Not logged in, or awaiting two-factor authentication.
     * 1 = Complete access.
     * 2 = Logs access only.
     * 3 = Cronable.
     */
    'Permissions' => 0,

    /** Will be populated by messages reflecting the current request state. */
    'state_msg' => '',

    /** Will be populated by the current session data. */
    'ThisSession' => '',

    /** Used to log out. */
    'LogoutButton' => sprintf(
        '<form action="?cidram-page=logout" method="POST" style="display:inline">%s%s<input type="submit" id="logoutbutton" value="%s" class="auto" /></form>',
        '<input name="hostname" id="hostnameoverride" type="hidden" value="" />',
        '<script type="text/javascript">document.getElementById(\'hostnameoverride\').value=window.location.hostname;</script>',
        $CIDRAM['L10N']->getString('link_log_out')
    ),

    /** Used to return home. */
    'HomeButton' => sprintf(
        '<form action="?" method="GET" style="display:inline"><input type="submit" id="homebutton" value="%s" class="auto" /></form>',
        $CIDRAM['L10N']->getString('link_home')
    ),

    /** State reflecting whether the current request is cronable. */
    'CronMode' => empty($_POST['CronMode']) ? '' : $_POST['CronMode'],

    /** The user agent of the current request. */
    'UA' => empty($_SERVER['HTTP_USER_AGENT']) ? '' : $_SERVER['HTTP_USER_AGENT'],

    /** The IP address of the current request. */
    'YourIP' => $CIDRAM['IPAddr'],

    /** Asynchronous mode. */
    'ASYNC' => !empty($_POST['ASYNC']),

    /** Will be populated by the page title. */
    'FE_Title' => '',

    /** Used by the auxiliary rules from and expiry fields. */
    'Y-m-d' => date('Y-m-d', $CIDRAM['Now']),

    /** Make some of the link references available to the main front-end array. */
    'Links.Discussions' => $CIDRAM['Config']['Links']['Discussions'],
    'Links.Documentation' => $CIDRAM['Config']['Links']['Documentation'],
    'Links.Website' => $CIDRAM['Config']['Links']['Website']
];

/** Trace to determine the type of cron operation. */
if ($CIDRAM['FE']['CronMode'] !== '') {
    $CIDRAM['FE']['CronType'] = 'update';
    $CIDRAM['CronDebug'] = debug_backtrace(DEBUG_BACKTRACE_PROVIDE_OBJECT | DEBUG_BACKTRACE_IGNORE_ARGS, 4);
    foreach ($CIDRAM['CronDebug'] as $CIDRAM['ThisCronDebug']) {
        if (
            isset($CIDRAM['ThisCronDebug']['function'], $CIDRAM['ThisCronDebug']['class']) &&
            $CIDRAM['ThisCronDebug']['function'] === 'localUpdate' &&
            $CIDRAM['ThisCronDebug']['class'] === 'Maikuolan\Cronable\Cronable'
        ) {
            $CIDRAM['FE']['CronType'] = 'localUpdate';
        }
    }
    unset($CIDRAM['CronDebug'], $CIDRAM['ThisCronDebug']);
} else {
    $CIDRAM['FE']['CronType'] = '';
}

/** Regular expression used to separate signature sections and tags. */
$CIDRAM['RegExTags'] = '~(?<=\n)(?:\n|Expires: \d{4}\.\d\d\.\d\d|Origin: [A-Z]{2}|(?:\#|Tag: |Profile: |Defers to: )[^\n]+| *\/\*\*(?:\n *\*[^\n]*)*\/| *\/\*\*? [^\n*]+\*\/|---\n(?:[^\n:]+:(?:\n +[^\n:]+: [^\n]+)+)+)+\n~';

/** Regular expression used to split labels. */
$CIDRAM['RegExLabels'] = '~(?: | )?(?:：|:) ?$~';

/** Populated by [Home | Log Out] by default; Replaced by [Log Out] for some specific pages (e.g., the homepage). */
$CIDRAM['FE']['bNav'] = $CIDRAM['FE']['HomeButton'] . $CIDRAM['FE']['LogoutButton'];

/** To be populated by warnings. */
$CIDRAM['Warnings'] = [];

/** Warns if maintenance mode is enabled. */
if ($CIDRAM['Config']['general']['maintenance_mode']) {
    $CIDRAM['Warnings'][] = $CIDRAM['L10N']->getString('state_maintenance_mode');
}

/** Warns if no signature files are active. */
if (empty($CIDRAM['Config']['signatures']['ipv4']) && empty($CIDRAM['Config']['signatures']['ipv6'])) {
    $CIDRAM['Warnings'][] = $CIDRAM['L10N']->getString('warning_signatures_1');
}

/** Prepare warnings. */
$CIDRAM['FE']['Warnings'] = count($CIDRAM['Warnings']) ? "\n<div class=\"center\"><div class=\"warning\">" . implode(
    "</div>\n<div class=\"warning\">",
    $CIDRAM['Warnings']
) . '</div></div><hr />' : '';

/** Cleanup. */
unset($CIDRAM['Warnings']);

/** Menu toggle JavaScript, needed by some front-end pages. */
$CIDRAM['MenuToggle'] = '<script type="text/javascript">' .
    'var i,toggler=document.getElementsByClassName("comCat");for(i=0;i<toggl' .
    'er.length;i++)toggler[i].addEventListener("click",function(){this.paren' .
    'tElement.querySelector(".comSub").classList.toggle("active"),!this.clas' .
    'sList.toggle("caret-down")&&this.classList.toggle("caret-up")&&setTimeo' .
    'ut(function(t){t.classList.toggle("caret-up")},200,this)});</script>';

/** Fetch pips data. */
$CIDRAM['Pips_Path'] = $CIDRAM['GetAssetPath']('pips.php', true);
if (!empty($CIDRAM['Pips_Path']) && is_readable($CIDRAM['Pips_Path'])) {
    require $CIDRAM['Pips_Path'];
}

/** A fix for correctly displaying LTR/RTL text. */
if (empty($CIDRAM['L10N']->Data['Text Direction']) || $CIDRAM['L10N']->Data['Text Direction'] !== 'rtl') {
    $CIDRAM['L10N']->Data['Text Direction'] = 'ltr';
    $CIDRAM['FE']['FE_Align'] = 'left';
    $CIDRAM['FE']['FE_Align_Reverse'] = 'right';
    $CIDRAM['FE']['FE_Align_Mode'] = 'lr';
    $CIDRAM['FE']['PIP_Input'] = $CIDRAM['FE']['PIP_Right'];
    $CIDRAM['FE']['PIP_Input_Valid'] = $CIDRAM['FE']['PIP_Right_Valid'];
    $CIDRAM['FE']['PIP_Input_Invalid'] = $CIDRAM['FE']['PIP_Right_Invalid'];
    $CIDRAM['FE']['Half_Border'] = 'solid solid none none';
    $CIDRAM['FE']['45deg'] = '45deg';
    $CIDRAM['FE']['90deg'] = '90deg';
} else {
    $CIDRAM['FE']['FE_Align'] = 'right';
    $CIDRAM['FE']['FE_Align_Reverse'] = 'left';
    $CIDRAM['FE']['FE_Align_Mode'] = 'rl';
    $CIDRAM['FE']['PIP_Input'] = $CIDRAM['FE']['PIP_Left'];
    $CIDRAM['FE']['PIP_Input_Valid'] = $CIDRAM['FE']['PIP_Left_Valid'];
    $CIDRAM['FE']['PIP_Input_Invalid'] = $CIDRAM['FE']['PIP_Left_Invalid'];
    $CIDRAM['FE']['Half_Border'] = 'solid none none solid';
    $CIDRAM['FE']['45deg'] = '-45deg';
    $CIDRAM['FE']['90deg'] = '270deg';
}

/** A simple passthru for non-private theme images and related data. */
if (!empty($CIDRAM['QueryVars']['cidram-asset'])) {
    $CIDRAM['eTaggable']($CIDRAM['QueryVars']['cidram-asset']);
}

/** A simple passthru for the front-end CSS. */
if ($CIDRAM['QueryVars']['cidram-page'] === 'css') {
    $CIDRAM['eTaggable']('frontend.css', function ($AssetData) use (&$CIDRAM) {
        return $CIDRAM['ParseVars']($CIDRAM['L10N']->Data + $CIDRAM['FE'], $AssetData);
    });
}

/** A simple passthru for the favicon. */
if ($CIDRAM['QueryVars']['cidram-page'] === 'favicon') {
    $CIDRAM['FavIconData'] = base64_decode($CIDRAM['favicon']);
    $CIDRAM['OldETag'] = isset($_SERVER['HTTP_IF_NONE_MATCH']) ? $_SERVER['HTTP_IF_NONE_MATCH'] : '';
    $CIDRAM['NewETag'] = hash('sha256', $CIDRAM['FavIconData']) . '-' . strlen($CIDRAM['FavIconData']);
    header('ETag: "' . $CIDRAM['NewETag'] . '"');
    header('Expires: ' . gmdate('D, d M Y H:i:s T', $CIDRAM['Now'] + 2592000));
    if (preg_match('~(?:^|, )(?:"' . $CIDRAM['NewETag'] . '"|' . $CIDRAM['NewETag'] . ')(?:$|, )~', $CIDRAM['OldETag'])) {
        header('HTTP/1.0 304 Not Modified');
        header('HTTP/1.1 304 Not Modified');
        header('Status: 304 Not Modified');
        die;
    }
    header('Content-Type: image/' . $CIDRAM['favicon_extension']);
    echo $CIDRAM['FavIconData'];
    die;
}

/** Set form target if not already set. */
$CIDRAM['FE']['FormTarget'] = empty($_POST['cidram-form-target']) ? '' : $_POST['cidram-form-target'];

/** Used by a safety mechanism against a potential attack vector. */
$CIDRAM['frontend.dat.safety'] = file_exists($CIDRAM['Vault'] . 'fe_assets/frontend.dat.safety');

/** Fetch user list, sessions list, and the front-end cache, or rebuild it if it doesn't exist. */
if ($CIDRAM['FE']['FrontEndData'] = $CIDRAM['ReadFile']($CIDRAM['Vault'] . 'fe_assets/frontend.dat')) {
    $CIDRAM['FE']['Rebuild'] = false;
} else {
    if ($CIDRAM['frontend.dat.safety']) {
        header('Content-Type: text/plain');
        die('[CIDRAM] ' . $CIDRAM['L10N']->getString('security_warning'));
    }
    $CIDRAM['FE']['FrontEndData'] = "USERS\n-----\nYWRtaW4=," . $CIDRAM['FE']['DefaultPassword'] . ",1\n\nSESSIONS\n--------\n\nCACHE\n-----\n";
    $CIDRAM['FE']['Rebuild'] = true;
}

/** Engage safety mechanism. */
if (!$CIDRAM['frontend.dat.safety']) {
    $CIDRAM['Handle'] = fopen($CIDRAM['Vault'] . 'fe_assets/frontend.dat.safety', 'wb');
    fwrite($CIDRAM['Handle'], '.');
    fclose($CIDRAM['Handle']);
}

$CIDRAM['FE']['UserListPos'] = strpos($CIDRAM['FE']['FrontEndData'], "USERS\n-----\n");
$CIDRAM['FE']['SessionListPos'] = strpos($CIDRAM['FE']['FrontEndData'], "SESSIONS\n--------\n");
$CIDRAM['FE']['CachePos'] = strpos($CIDRAM['FE']['FrontEndData'], "CACHE\n-----\n");
if ($CIDRAM['FE']['UserListPos'] !== false) {
    $CIDRAM['FE']['UserList'] = substr(
        $CIDRAM['FE']['FrontEndData'],
        $CIDRAM['FE']['UserListPos'] + 11,
        $CIDRAM['FE']['SessionListPos'] - $CIDRAM['FE']['UserListPos'] - 12
    );
}
if ($CIDRAM['FE']['SessionListPos'] !== false) {
    $CIDRAM['FE']['SessionList'] = substr(
        $CIDRAM['FE']['FrontEndData'],
        $CIDRAM['FE']['SessionListPos'] + 17,
        $CIDRAM['FE']['CachePos'] - $CIDRAM['FE']['SessionListPos'] - 18
    );
}
if ($CIDRAM['FE']['CachePos'] !== false) {
    $CIDRAM['FE']['Cache'] = substr(
        $CIDRAM['FE']['FrontEndData'],
        $CIDRAM['FE']['CachePos'] + 11
    );
}

/** Clear expired sessions. */
$CIDRAM['ClearExpired']($CIDRAM['FE']['SessionList'], $CIDRAM['FE']['Rebuild']);

/** Clear expired cache entries. */
$CIDRAM['ClearExpired']($CIDRAM['FE']['Cache'], $CIDRAM['FE']['Rebuild']);

/** Initialise cache. */
$CIDRAM['InitialiseCache']();

/** Brute-force security check. */
if (($CIDRAM['LoginAttempts'] = (int)$CIDRAM['FECacheGet'](
    $CIDRAM['FE']['Cache'],
    'LoginAttempts' . $CIDRAM['IPAddr']
)) && ($CIDRAM['LoginAttempts'] >= $CIDRAM['Config']['general']['max_login_attempts'])) {
    header('Content-Type: text/plain');
    die('[CIDRAM] ' . $CIDRAM['L10N']->getString('max_login_attempts_exceeded'));
}

/** Brute-force security check (2FA). */
if (($CIDRAM['Failed2FA'] = (int)$CIDRAM['FECacheGet'](
    $CIDRAM['FE']['Cache'],
    'Failed2FA' . $CIDRAM['IPAddr']
)) && ($CIDRAM['Failed2FA'] >= $CIDRAM['Config']['general']['max_login_attempts'])) {
    header('Content-Type: text/plain');
    die('[CIDRAM] ' . $CIDRAM['L10N']->getString('max_login_attempts_exceeded'));
}

/** Attempt to log in the user. */
if ($CIDRAM['FE']['FormTarget'] === 'login' || $CIDRAM['FE']['CronMode'] !== '') {
    if (!empty($_POST['username']) && empty($_POST['password'])) {
        $CIDRAM['FE']['UserState'] = -1;
        $CIDRAM['FE']['state_msg'] = $CIDRAM['L10N']->getString('response_login_password_field_empty');
    } elseif (empty($_POST['username']) && !empty($_POST['password'])) {
        $CIDRAM['FE']['UserState'] = -1;
        $CIDRAM['FE']['state_msg'] = $CIDRAM['L10N']->getString('response_login_username_field_empty');
    } elseif (!empty($_POST['username']) && !empty($_POST['password'])) {
        $CIDRAM['FE']['UserState'] = -1;
        $CIDRAM['FE']['UserRaw'] = $_POST['username'];
        $CIDRAM['FE']['User'] = base64_encode($CIDRAM['FE']['UserRaw']);
        $CIDRAM['FE']['UserPos'] = strpos($CIDRAM['FE']['UserList'], "\n" . $CIDRAM['FE']['User'] . ',');

        if ($CIDRAM['FE']['UserPos'] !== false) {
            $CIDRAM['FE']['UserOffset'] = $CIDRAM['FE']['UserPos'] + strlen($CIDRAM['FE']['User']) + 2;
            $CIDRAM['FE']['Password'] = substr(
                $CIDRAM['FE']['UserList'],
                $CIDRAM['FE']['UserOffset'],
                strpos($CIDRAM['FE']['UserList'], "\n", $CIDRAM['FE']['UserOffset']) - $CIDRAM['FE']['UserOffset']
            );
            $CIDRAM['FE']['Permissions'] = (int)substr($CIDRAM['FE']['Password'], -1);
            $CIDRAM['FE']['Password'] = substr($CIDRAM['FE']['Password'], 0, -2);
            if (password_verify($_POST['password'], $CIDRAM['FE']['Password'])) {
                $CIDRAM['FECacheRemove'](
                    $CIDRAM['FE']['Cache'],
                    $CIDRAM['FE']['Rebuild'],
                    'LoginAttempts' . $CIDRAM['IPAddr']
                );
                if (($CIDRAM['FE']['Permissions'] === 3 && (
                    $CIDRAM['FE']['CronMode'] === '' || substr($CIDRAM['FE']['UA'], 0, 10) !== 'Cronable v'
                )) || !($CIDRAM['FE']['Permissions'] > 0 && $CIDRAM['FE']['Permissions'] <= 3)) {
                    $CIDRAM['FE']['Permissions'] = 0;
                    $CIDRAM['FE']['state_msg'] = $CIDRAM['L10N']->getString('response_login_wrong_endpoint');
                } else {
                    if ($CIDRAM['FE']['CronMode'] === '') {
                        $CIDRAM['FE']['SessionKey'] = hash('md5', $CIDRAM['GenerateSalt']());
                        $CIDRAM['FE']['Cookie'] = $_POST['username'] . $CIDRAM['FE']['SessionKey'];
                        setcookie('CIDRAM-ADMIN', $CIDRAM['FE']['Cookie'], $CIDRAM['Now'] + 604800, '/', $CIDRAM['HostnameOverride'] ?: $CIDRAM['HTTP_HOST'], false, true);
                        $CIDRAM['FE']['ThisSession'] = $CIDRAM['FE']['User'] . ',' . password_hash(
                            $CIDRAM['FE']['SessionKey'],
                            $CIDRAM['DefaultAlgo']
                        ) . ',' . ($CIDRAM['Now'] + 604800) . "\n";
                        $CIDRAM['FE']['SessionList'] .= $CIDRAM['FE']['ThisSession'];

                        /** Prepare 2FA email. */
                        if ($CIDRAM['Config']['PHPMailer']['Enable2FA'] && preg_match('~^.+@.+$~', $CIDRAM['FE']['UserRaw'])) {
                            $CIDRAM['2FA-State'] = ['Number' => $CIDRAM['2FA-Number']()];
                            $CIDRAM['2FA-State']['Hash'] = password_hash($CIDRAM['2FA-State']['Number'], $CIDRAM['DefaultAlgo']);
                            $CIDRAM['FECacheAdd'](
                                $CIDRAM['FE']['Cache'],
                                $CIDRAM['FE']['Rebuild'],
                                '2FA-State:' . $CIDRAM['FE']['Cookie'],
                                '0' . $CIDRAM['2FA-State']['Hash'],
                                $CIDRAM['Now'] + 600
                            );
                            $CIDRAM['2FA-State']['Template'] = sprintf(
                                $CIDRAM['L10N']->getString('msg_template_2fa'),
                                $CIDRAM['FE']['UserRaw'],
                                $CIDRAM['2FA-State']['Number']
                            );
                            if (preg_match('~^[^<>]+<[^<>]+>$~', $CIDRAM['FE']['UserRaw'])) {
                                $CIDRAM['2FA-State']['Name'] = trim(preg_replace('~^([^<>]+)<[^<>]+>$~', '\1', $CIDRAM['FE']['UserRaw']));
                                $CIDRAM['2FA-State']['Address'] = trim(preg_replace('~^[^<>]+<([^<>]+)>$~', '\1', $CIDRAM['FE']['UserRaw']));
                            } else {
                                $CIDRAM['2FA-State']['Name'] = trim($CIDRAM['FE']['UserRaw']);
                                $CIDRAM['2FA-State']['Address'] = $CIDRAM['2FA-State']['Name'];
                            }
                            $CIDRAM['SendEmail'](
                                [['Name' => $CIDRAM['2FA-State']['Name'], 'Address' => $CIDRAM['2FA-State']['Address']]],
                                $CIDRAM['L10N']->getString('msg_subject_2fa'),
                                $CIDRAM['2FA-State']['Template'],
                                strip_tags($CIDRAM['2FA-State']['Template'])
                            );
                            $CIDRAM['FE']['UserState'] = 2;
                            unset($CIDRAM['2FA-State']);
                        } else {
                            $CIDRAM['FE']['UserState'] = 1;
                        }
                    } else {
                        $CIDRAM['FE']['UserState'] = 1;
                    }
                    if ($CIDRAM['FE']['UserState'] !== 1) {
                        $CIDRAM['FE']['Permissions'] = 0;
                    }
                    $CIDRAM['FE']['Rebuild'] = true;
                }
            } else {
                $CIDRAM['FE']['Permissions'] = 0;
                $CIDRAM['FE']['state_msg'] = $CIDRAM['L10N']->getString('response_login_invalid_password');
            }
        } else {
            $CIDRAM['FE']['state_msg'] = $CIDRAM['L10N']->getString('response_login_invalid_username');
        }
    }

    if ($CIDRAM['FE']['state_msg']) {
        $CIDRAM['LoginAttempts']++;
        $CIDRAM['TimeToAdd'] = ($CIDRAM['LoginAttempts'] > 4) ? ($CIDRAM['LoginAttempts'] - 4) * 86400 : 86400;
        $CIDRAM['FECacheAdd'](
            $CIDRAM['FE']['Cache'],
            $CIDRAM['FE']['Rebuild'],
            'LoginAttempts' . $CIDRAM['IPAddr'],
            $CIDRAM['LoginAttempts'],
            $CIDRAM['Now'] + $CIDRAM['TimeToAdd']
        );
        if ($CIDRAM['Config']['general']['FrontEndLog']) {
            $CIDRAM['LoggerMessage'] = $CIDRAM['FE']['state_msg'];
        }
        if ($CIDRAM['FE']['CronMode'] === '') {
            $CIDRAM['FE']['state_msg'] = '<div class="txtRd">' . $CIDRAM['FE']['state_msg'] . '<br /><br /></div>';
        }
    } elseif ($CIDRAM['Config']['general']['FrontEndLog']) {
        $CIDRAM['LoggerMessage'] = $CIDRAM['L10N']->getString((
            $CIDRAM['Config']['PHPMailer']['Enable2FA'] &&
            $CIDRAM['FE']['Permissions'] === 0
        ) ? 'state_logged_in_2fa_pending' : 'state_logged_in');
    }

    /** Safer for the front-end logger. */
    $CIDRAM['NameToLog'] = preg_replace('~[\x00-\x1F]~', '', empty($_POST['username']) ? '' : $_POST['username']);

    /** Handle front-end logging. */
    $CIDRAM['FELogger'](
        $CIDRAM['IPAddr'],
        $CIDRAM['NameToLog'],
        empty($CIDRAM['LoggerMessage']) ? '' : $CIDRAM['LoggerMessage']
    );

    /** Cleanup. */
    unset($CIDRAM['NameToLog'], $CIDRAM['LoggerMessage']);
}

/** Determine whether the user has logged in. */
elseif (!empty($_COOKIE['CIDRAM-ADMIN'])) {
    $CIDRAM['FE']['UserState'] = -1;
    $CIDRAM['FE']['SessionKey'] = substr($_COOKIE['CIDRAM-ADMIN'], -32);
    $CIDRAM['FE']['UserRaw'] = substr($_COOKIE['CIDRAM-ADMIN'], 0, -32);
    $CIDRAM['FE']['User'] = base64_encode($CIDRAM['FE']['UserRaw']);
    $CIDRAM['FE']['SessionOffset'] = 0;

    if (!empty($CIDRAM['FE']['SessionKey']) && !empty($CIDRAM['FE']['User'])) {
        $CIDRAM['FE']['UserLen'] = strlen($CIDRAM['FE']['User']);
        while (($CIDRAM['FE']['SessionPos'] = strpos(
            $CIDRAM['FE']['SessionList'],
            "\n" . $CIDRAM['FE']['User'],
            $CIDRAM['FE']['SessionOffset']
        )) !== false) {
            $CIDRAM['FE']['SessionOffset'] = $CIDRAM['FE']['SessionPos'] + $CIDRAM['FE']['UserLen'] + 2;
            $CIDRAM['FE']['SessionEntry'] = substr(
                $CIDRAM['FE']['SessionList'],
                $CIDRAM['FE']['SessionOffset'],
                $CIDRAM['ZeroMin'](strpos(
                    $CIDRAM['FE']['SessionList'],
                    "\n",
                    $CIDRAM['FE']['SessionOffset']
                ), $CIDRAM['FE']['SessionOffset'] * -1)
            );
            $CIDRAM['FE']['SEDelimiter'] = strrpos($CIDRAM['FE']['SessionEntry'], ',');
            if ($CIDRAM['FE']['SEDelimiter'] !== false) {
                $CIDRAM['FE']['Expiry'] = (int)substr($CIDRAM['FE']['SessionEntry'], $CIDRAM['FE']['SEDelimiter'] + 1);
                $CIDRAM['FE']['UserHash'] = substr($CIDRAM['FE']['SessionEntry'], 0, $CIDRAM['FE']['SEDelimiter']);
            }
            if (
                !empty($CIDRAM['FE']['Expiry']) &&
                !empty($CIDRAM['FE']['UserHash']) &&
                ($CIDRAM['FE']['Expiry'] > $CIDRAM['Now']) &&
                password_verify($CIDRAM['FE']['SessionKey'], $CIDRAM['FE']['UserHash'])
            ) {
                $CIDRAM['FE']['UserPos'] = strpos($CIDRAM['FE']['UserList'], "\n" . $CIDRAM['FE']['User'] . ',');
                if ($CIDRAM['FE']['UserPos'] !== false) {
                    $CIDRAM['FE']['ThisSession'] = $CIDRAM['FE']['User'] . ',' . $CIDRAM['FE']['SessionEntry'] . "\n";
                    $CIDRAM['FE']['UserOffset'] = $CIDRAM['FE']['UserPos'] + $CIDRAM['FE']['UserLen'] + 2;
                    $CIDRAM['FE']['Permissions'] = (int)substr(substr(
                        $CIDRAM['FE']['UserList'],
                        $CIDRAM['FE']['UserOffset'],
                        strpos($CIDRAM['FE']['UserList'], "\n", $CIDRAM['FE']['UserOffset']) - $CIDRAM['FE']['UserOffset']
                    ), -1);

                    /** Handle 2FA stuff here. */
                    if ($CIDRAM['Config']['PHPMailer']['Enable2FA'] && preg_match('~^.+@.+$~', $CIDRAM['FE']['UserRaw'])) {
                        $CIDRAM['2FA-State'] = $CIDRAM['FECacheGet'](
                            $CIDRAM['FE']['Cache'],
                            '2FA-State:' . $_COOKIE['CIDRAM-ADMIN']
                        );
                        $CIDRAM['FE']['UserState'] = ((int)$CIDRAM['2FA-State'] === 1) ? 1 : 2;
                        if ($CIDRAM['FE']['UserState'] === 2 && $CIDRAM['FE']['FormTarget'] === '2fa' && !empty($_POST['2fa'])) {
                            /** User has submitted a 2FA code. Attempt to verify it. */
                            if (password_verify($_POST['2fa'], substr($CIDRAM['2FA-State'], 1))) {
                                $CIDRAM['FECacheAdd'](
                                    $CIDRAM['FE']['Cache'],
                                    $CIDRAM['FE']['Rebuild'],
                                    '2FA-State:' . $_COOKIE['CIDRAM-ADMIN'],
                                    '1',
                                    $CIDRAM['Now'] + 604800
                                );
                                $CIDRAM['FE']['UserState'] = 1;
                            }
                        }
                        unset($CIDRAM['2FA-State']);
                    } else {
                        $CIDRAM['FE']['UserState'] = 1;
                    }

                    /** Revert permissions if not authenticated. */
                    if ($CIDRAM['FE']['UserState'] !== 1) {
                        $CIDRAM['FE']['Permissions'] = 0;
                    }
                }
                break;
            }
        }
    }

    /** In case of 2FA form submission. */
    if ($CIDRAM['FE']['FormTarget'] === '2fa' && !empty($_POST['2fa'])) {
        if ($CIDRAM['FE']['UserState'] === 2) {
            $CIDRAM['Failed2FA']++;
            $CIDRAM['TimeToAdd'] = ($CIDRAM['Failed2FA'] > 4) ? ($CIDRAM['Failed2FA'] - 4) * 86400 : 86400;
            $CIDRAM['FECacheAdd'](
                $CIDRAM['FE']['Cache'],
                $CIDRAM['FE']['Rebuild'],
                'Failed2FA' . $CIDRAM['IPAddr'],
                $CIDRAM['Failed2FA'],
                $CIDRAM['Now'] + $CIDRAM['TimeToAdd']
            );
            if ($CIDRAM['Config']['general']['FrontEndLog']) {
                $CIDRAM['FELogger']($CIDRAM['IPAddr'], $CIDRAM['FE']['UserRaw'], $CIDRAM['L10N']->getString('response_2fa_invalid'));
            }
            $CIDRAM['FE']['state_msg'] = '<div class="txtRd">' . $CIDRAM['L10N']->getString('response_2fa_invalid') . '<br /><br /></div>';
        } else {
            $CIDRAM['FECacheRemove'](
                $CIDRAM['FE']['Cache'],
                $CIDRAM['FE']['Rebuild'],
                'Failed2FA' . $CIDRAM['IPAddr']
            );
            if ($CIDRAM['Config']['general']['FrontEndLog']) {
                $CIDRAM['FELogger']($CIDRAM['IPAddr'], $CIDRAM['FE']['UserRaw'], $CIDRAM['L10N']->getString('response_2fa_valid'));
            }
        }
    }
}

/** The user is attempting an asynchronous request without adequate permissions. */
if ($CIDRAM['FE']['UserState'] !== 1 && $CIDRAM['FE']['ASYNC']) {
    header('HTTP/1.0 403 Forbidden');
    header('HTTP/1.1 403 Forbidden');
    header('Status: 403 Forbidden');
    die($CIDRAM['L10N']->getString('state_async_deny'));
}

/** Major version notice. */
$CIDRAM['MajorVersionNotice'] = '';

/** Only execute this code block for users that are logged in or awaiting two-factor authentication. */
if (($CIDRAM['FE']['UserState'] === 1 || $CIDRAM['FE']['UserState'] === 2) && $CIDRAM['FE']['CronMode'] === '') {
    /** Log out the user. */
    if ($CIDRAM['QueryVars']['cidram-page'] === 'logout') {
        $CIDRAM['FE']['SessionList'] = str_ireplace($CIDRAM['FE']['ThisSession'], '', $CIDRAM['FE']['SessionList']);
        $CIDRAM['FE']['ThisSession'] = '';
        $CIDRAM['FE']['Rebuild'] = true;
        $CIDRAM['FE']['UserState'] = 0;
        $CIDRAM['FE']['Permissions'] = 0;
        setcookie('CIDRAM-ADMIN', '', -1, '/', $CIDRAM['HostnameOverride'] ?: $CIDRAM['HTTP_HOST'], false, true);
        $CIDRAM['FECacheRemove']($CIDRAM['FE']['Cache'], $CIDRAM['FE']['Rebuild'], '2FA-State:' . $_COOKIE['CIDRAM-ADMIN']);
        $CIDRAM['FELogger']($CIDRAM['IPAddr'], $CIDRAM['FE']['UserRaw'], $CIDRAM['L10N']->getString('state_logged_out'));
    }

    if ($CIDRAM['FE']['Permissions'] === 1) {
        /** If the user has complete access. */
        $CIDRAM['FE']['nav'] = $CIDRAM['ParseVars'](
            $CIDRAM['L10N']->Data + $CIDRAM['FE'],
            $CIDRAM['ReadFile']($CIDRAM['GetAssetPath']('_nav_complete_access.html'))
        );
    } elseif ($CIDRAM['FE']['Permissions'] === 2) {
        /** If the user has logs access only. */
        $CIDRAM['FE']['nav'] = $CIDRAM['ParseVars'](
            $CIDRAM['L10N']->Data + $CIDRAM['FE'],
            $CIDRAM['ReadFile']($CIDRAM['GetAssetPath']('_nav_logs_access_only.html'))
        );
    }
}

/** Only execute this code block for already logged in users. */
if ($CIDRAM['FE']['UserState'] === 1) {
    /** Where to find remote version information? */
    $CIDRAM['RemoteVerPath'] = 'https://raw.githubusercontent.com/Maikuolan/Compatibility-Charts/gh-pages/';

    /** Fetch remote CIDRAM version information and cache it if necessary. */
    if (($CIDRAM['Remote-YAML-CIDRAM'] = $CIDRAM['FECacheGet']($CIDRAM['FE']['Cache'], 'cidram-ver.yaml')) === false) {
        $CIDRAM['Remote-YAML-CIDRAM'] = $CIDRAM['Request']($CIDRAM['RemoteVerPath'] . 'cidram-ver.yaml', [], 8);
        $CIDRAM['FECacheAdd']($CIDRAM['FE']['Cache'], $CIDRAM['FE']['Rebuild'], 'cidram-ver.yaml', $CIDRAM['Remote-YAML-CIDRAM'] ?: '-', $CIDRAM['Now'] + 86400);
    }

    /** Process remote CIDRAM version information. */
    if (empty($CIDRAM['Remote-YAML-CIDRAM'])) {
        /** CIDRAM latest stable. */
        $CIDRAM['FE']['info_cidram_stable'] = $CIDRAM['L10N']->getString('response_error');

        /** CIDRAM latest unstable. */
        $CIDRAM['FE']['info_cidram_unstable'] = $CIDRAM['L10N']->getString('response_error');

        /** CIDRAM branch latest stable. */
        $CIDRAM['FE']['info_cidram_branch'] = $CIDRAM['L10N']->getString('response_error');
    } else {
        $CIDRAM['Remote-YAML-CIDRAM-Array'] = [];
        $CIDRAM['YAML']->process($CIDRAM['Remote-YAML-CIDRAM'], $CIDRAM['Remote-YAML-CIDRAM-Array']);

        /** CIDRAM latest stable. */
        if (empty($CIDRAM['Remote-YAML-CIDRAM-Array']['Stable'])) {
            $CIDRAM['FE']['info_cidram_stable'] = $CIDRAM['L10N']->getString('response_error');
        } else {
            $CIDRAM['FE']['MajorVersionCurrent'] = (int)substr(
                $CIDRAM['ScriptVersion'],
                0,
                strpos($CIDRAM['ScriptVersion'], '.') ?: strlen($CIDRAM['ScriptVersion'])
            );
            $CIDRAM['FE']['MajorVersionLatest'] = (int)substr(
                $CIDRAM['Remote-YAML-CIDRAM-Array']['Stable'],
                0,
                strpos($CIDRAM['Remote-YAML-CIDRAM-Array']['Stable'], '.') ?: strlen($CIDRAM['Remote-YAML-CIDRAM-Array']['Stable'])
            );
            if (
                $CIDRAM['FE']['MajorVersionCurrent'] < $CIDRAM['FE']['MajorVersionLatest'] &&
                !empty($CIDRAM['Remote-YAML-CIDRAM-Array']['Stable Minimum PHP Required']) &&
                is_string($CIDRAM['Remote-YAML-CIDRAM-Array']['Stable Minimum PHP Required']) &&
                version_compare(PHP_VERSION, $CIDRAM['Remote-YAML-CIDRAM-Array']['Stable Minimum PHP Required'], '>=')
            ) {
                $CIDRAM['MajorVersionNotice'] = sprintf(
                    $CIDRAM['L10N']->getString('notice_new_major_version'),
                    'CIDRAM v' . $CIDRAM['Remote-YAML-CIDRAM-Array']['Stable'],
                    $CIDRAM['ScriptIdent']
                );
            }
            $CIDRAM['FE']['info_cidram_stable'] = $CIDRAM['Remote-YAML-CIDRAM-Array']['Stable'];
        }

        /** CIDRAM latest unstable. */
        $CIDRAM['FE']['info_cidram_unstable'] = empty($CIDRAM['Remote-YAML-CIDRAM-Array']['Unstable']) ?
            $CIDRAM['L10N']->getString('response_error') : $CIDRAM['Remote-YAML-CIDRAM-Array']['Unstable'];

        /** CIDRAM branch latest stable. */
        if ($CIDRAM['ThisBranch'] = substr($CIDRAM['ScriptVersion'], 0, strpos($CIDRAM['ScriptVersion'], '.') ?: 1)) {
            $CIDRAM['ThisBranch'] = 'v' . ($CIDRAM['ThisBranch'] ?: 1);
            if (empty($CIDRAM['Remote-YAML-CIDRAM-Array']['Branch'][$CIDRAM['ThisBranch']]['Latest'])) {
                $CIDRAM['FE']['info_cidram_branch'] = $CIDRAM['L10N']->getString('response_error');
            } else {
                $CIDRAM['FE']['info_cidram_branch'] = $CIDRAM['Remote-YAML-CIDRAM-Array']['Branch'][$CIDRAM['ThisBranch']]['Latest'];
            }
        } else {
            $CIDRAM['FE']['info_php_branch'] = $CIDRAM['L10N']->getString('response_error');
        }
    }

    /** Cleanup. */
    unset($CIDRAM['Remote-YAML-CIDRAM-Array'], $CIDRAM['Remote-YAML-CIDRAM']);

    /** Fetch remote PHP version information and cache it if necessary. */
    if (($CIDRAM['Remote-YAML-PHP'] = $CIDRAM['FECacheGet']($CIDRAM['FE']['Cache'], 'php-ver.yaml')) === false) {
        $CIDRAM['Remote-YAML-PHP'] = $CIDRAM['Request']($CIDRAM['RemoteVerPath'] . 'php-ver.yaml', [], 8);
        $CIDRAM['FECacheAdd']($CIDRAM['FE']['Cache'], $CIDRAM['FE']['Rebuild'], 'php-ver.yaml', $CIDRAM['Remote-YAML-PHP'] ?: '-', $CIDRAM['Now'] + 86400);
    }

    /** Process remote PHP version information. */
    if (empty($CIDRAM['Remote-YAML-PHP'])) {
        /** PHP latest stable. */
        $CIDRAM['FE']['info_php_stable'] = $CIDRAM['L10N']->getString('response_error');

        /** PHP latest unstable. */
        $CIDRAM['FE']['info_php_unstable'] = $CIDRAM['L10N']->getString('response_error');

        /** PHP branch latest stable. */
        $CIDRAM['FE']['info_php_branch'] = $CIDRAM['L10N']->getString('response_error');
    } else {
        $CIDRAM['Remote-YAML-PHP-Array'] = [];
        $CIDRAM['YAML']->process($CIDRAM['Remote-YAML-PHP'], $CIDRAM['Remote-YAML-PHP-Array']);

        /** PHP latest stable. */
        $CIDRAM['FE']['info_php_stable'] = empty($CIDRAM['Remote-YAML-PHP-Array']['Stable']) ?
            $CIDRAM['L10N']->getString('response_error') : $CIDRAM['Remote-YAML-PHP-Array']['Stable'];

        /** PHP latest unstable. */
        $CIDRAM['FE']['info_php_unstable'] = empty($CIDRAM['Remote-YAML-PHP-Array']['Unstable']) ?
            $CIDRAM['L10N']->getString('response_error') : $CIDRAM['Remote-YAML-PHP-Array']['Unstable'];

        /** PHP branch latest stable. */
        if ($CIDRAM['ThisBranch'] = substr(PHP_VERSION, 0, strpos(PHP_VERSION, '.') ?: 0)) {
            $CIDRAM['ThisBranch'] .= substr(PHP_VERSION, strlen($CIDRAM['ThisBranch']) + 1, strpos(PHP_VERSION, '.', strlen($CIDRAM['ThisBranch'])) ?: 0);
            $CIDRAM['ThisBranch'] = 'php' . $CIDRAM['ThisBranch'];
            $CIDRAM['FE']['info_php_branch'] = empty($CIDRAM['Remote-YAML-PHP-Array']['Branch'][$CIDRAM['ThisBranch']]['Latest']) ?
                $CIDRAM['L10N']->getString('response_error') : $CIDRAM['Remote-YAML-PHP-Array']['Branch'][$CIDRAM['ThisBranch']]['Latest'];
        } else {
            $CIDRAM['FE']['info_php_branch'] = $CIDRAM['L10N']->getString('response_error');
        }
    }

    /** Get cached logs link. */
    $CIDRAM['FE']['CachedLogsLink'] = $CIDRAM['FECacheGet'](
        $CIDRAM['FE']['Cache'],
        'CachedLogsLink-' . $CIDRAM['FE']['UserRaw']
    ) ?: '?cidram-page=logs';

    /** Cleanup. */
    unset($CIDRAM['Remote-YAML-PHP-Array'], $CIDRAM['Remote-YAML-PHP'], $CIDRAM['ThisBranch'], $CIDRAM['RemoteVerPath']);
}

/** The user hasn't logged in, or hasn't authenticated yet. */
if ($CIDRAM['FE']['UserState'] !== 1 && $CIDRAM['FE']['CronMode'] === '') {
    /** Page initial prepwork. */
    $CIDRAM['InitialPrepwork']($CIDRAM['L10N']->getString('title_login'), '', false);

    /** Hide warnings from non-logged in users. */
    $CIDRAM['FE']['Warnings'] = '';

    if ($CIDRAM['FE']['UserState'] === 2) {
        /** Provide the option to log out (omit home link). */
        $CIDRAM['FE']['bNav'] = $CIDRAM['FE']['LogoutButton'];

        /** Aesthetic spacer. */
        $CIDRAM['FE']['2fa_status_spacer'] = empty($CIDRAM['FE']['state_msg']) ? '' : '<br /><br />';

        /** Show them the two-factor authentication page. */
        $CIDRAM['FE']['FE_Content'] = $CIDRAM['ParseVars'](
            $CIDRAM['L10N']->Data + $CIDRAM['FE'],
            $CIDRAM['ReadFile']($CIDRAM['GetAssetPath']('_2fa.html'))
        );
    } else {
        /** Omit the log out and home links. */
        $CIDRAM['FE']['bNav'] = '';

        /** Show them the login page. */
        $CIDRAM['FE']['FE_Content'] = $CIDRAM['ParseVars'](
            $CIDRAM['L10N']->Data + $CIDRAM['FE'],
            $CIDRAM['ReadFile']($CIDRAM['GetAssetPath']('_login.html'))
        );
    }

    /** Send output. */
    echo $CIDRAM['SendOutput']();
}

/**
 * The user has logged in, but hasn't selected anything to view. Show them the
 * front-end home page.
 */
elseif ($CIDRAM['QueryVars']['cidram-page'] === '' && $CIDRAM['FE']['CronMode'] === '') {
    /** Page initial prepwork. */
    $CIDRAM['InitialPrepwork']($CIDRAM['L10N']->getString('link_home'), $CIDRAM['L10N']->getString('tip_home'), false);

    /** CIDRAM version used. */
    $CIDRAM['FE']['ScriptVersion'] = $CIDRAM['ScriptVersion'];

    /** PHP version used. */
    $CIDRAM['FE']['info_php'] = PHP_VERSION;

    /** SAPI used. */
    $CIDRAM['FE']['info_sapi'] = php_sapi_name();

    /** Operating system used. */
    $CIDRAM['FE']['info_os'] = php_uname();

    /** Provide the option to log out (omit home link). */
    $CIDRAM['FE']['bNav'] = $CIDRAM['FE']['LogoutButton'];

    /** Build repository backup locations information. */
    $CIDRAM['FE']['BackupLocations'] = implode(' | ', [
        '<a href="https://bitbucket.org/Maikuolan/cidram" hreflang="en-US" target="_blank" rel="noopener external">CIDRAM@Bitbucket</a>',
        '<a href="https://sourceforge.net/projects/cidram/" hreflang="en-US" target="_blank" rel="noopener external">CIDRAM@SourceForge</a>'
    ]);

    /** Extension availability. */
    $CIDRAM['FE']['Extensions'] = [];
    $CIDRAM['FE']['ExtensionsCopyData'] = '';
    foreach ([
        ['Lib' => 'pcre', 'Name' => 'PCRE'],
        ['Lib' => 'curl', 'Name' => 'cURL'],
        ['Lib' => 'apcu', 'Name' => 'APCu'],
        ['Lib' => 'memcached', 'Name' => 'Memcached'],
        ['Lib' => 'redis', 'Name' => 'Redis'],
        ['Lib' => 'pdo', 'Name' => 'PDO', 'Drivers' => (class_exists('\PDO') ? \PDO::getAvailableDrivers() : [])]
    ] as $CIDRAM['ThisExtension']) {
        if (extension_loaded($CIDRAM['ThisExtension']['Lib'])) {
            $CIDRAM['ExtVer'] = (new \ReflectionExtension($CIDRAM['ThisExtension']['Lib']))->getVersion();
            $CIDRAM['ThisResponse'] = $CIDRAM['L10N']->getString('response_yes') . ' (' . $CIDRAM['ExtVer'] . ')';
            if (!empty($CIDRAM['ThisExtension']['Drivers'])) {
                $CIDRAM['ThisResponse'] .= ', {' . implode(', ', $CIDRAM['ThisExtension']['Drivers']) . '}';
            }
            $CIDRAM['FE']['ExtensionsCopyData'] .= $CIDRAM['LTRinRTF'](
                sprintf('- %s➡%s\n', $CIDRAM['ThisExtension']['Name'], $CIDRAM['ThisResponse'])
            );
            $CIDRAM['ThisResponse'] = '<span class="txtGn">' . $CIDRAM['ThisResponse'] . '</span>';
        } else {
            $CIDRAM['FE']['ExtensionsCopyData'] .= $CIDRAM['LTRinRTF'](
                sprintf('- %s➡%s\n', $CIDRAM['ThisExtension']['Name'], $CIDRAM['L10N']->getString('response_no'))
            );
            $CIDRAM['ThisResponse'] = '<span class="txtRd">' . $CIDRAM['L10N']->getString('response_no') . '</span>';
        }
        $CIDRAM['FE']['Extensions'][] = '    <li><small>' . $CIDRAM['LTRinRTF'](sprintf(
            '%s➡%s',
            $CIDRAM['ThisExtension']['Name'],
            $CIDRAM['ThisResponse']
        )) . '</small></li>';
    }
    $CIDRAM['FE']['Extensions'] = implode("\n", $CIDRAM['FE']['Extensions']);
    $CIDRAM['FE']['ExtensionIsAvailable'] = $CIDRAM['LTRinRTF'](
        $CIDRAM['L10N']->getString('label_extension') . '➡' . $CIDRAM['L10N']->getString('label_installed_available')
    );
    unset($CIDRAM['ExtVer'], $CIDRAM['ThisResponse'], $CIDRAM['ThisExtension']);

    /** Build clipboard data. */
    $CIDRAM['FE']['HomeCopyData'] = sprintf(
        '%1$s\n\n- %2$s %3$s\n- %4$s %5$s\n- %6$s %7$s\n- %8$s %9$s\n\n- %10$s %11$s\n- %4$s %12$s\n- %6$s %13$s\n- %8$s %14$s\n- %15$s %16$s\n\n%17$s\n%18$s',
        $CIDRAM['L10N']->getString('label_sysinfo'),
        $CIDRAM['L10N']->getString('label_cidram'),
        $CIDRAM['FE']['ScriptVersion'],
        $CIDRAM['L10N']->getString('label_branch'),
        $CIDRAM['FE']['info_cidram_branch'],
        $CIDRAM['L10N']->getString('label_stable'),
        $CIDRAM['FE']['info_cidram_stable'],
        $CIDRAM['L10N']->getString('label_unstable'),
        $CIDRAM['FE']['info_cidram_unstable'],
        $CIDRAM['L10N']->getString('label_php'),
        $CIDRAM['FE']['info_php'],
        $CIDRAM['FE']['info_php_branch'],
        $CIDRAM['FE']['info_php_stable'],
        $CIDRAM['FE']['info_php_unstable'],
        $CIDRAM['L10N']->getString('label_sapi'),
        $CIDRAM['FE']['info_sapi'],
        $CIDRAM['FE']['ExtensionIsAvailable'],
        $CIDRAM['FE']['ExtensionsCopyData']
    );

    /** Parse output. */
    $CIDRAM['FE']['FE_Content'] = $CIDRAM['ParseVars'](
        $CIDRAM['L10N']->Data + $CIDRAM['FE'],
        $CIDRAM['ReadFile']($CIDRAM['GetAssetPath']('_home.html'))
    ) . $CIDRAM['MenuToggle'];

    /** Send output. */
    echo $CIDRAM['SendOutput']();
}

/** A simple passthru for the file manager icons. */
elseif ($CIDRAM['QueryVars']['cidram-page'] === 'icon' && $CIDRAM['FE']['Permissions'] === 1) {
    if (
        !empty($CIDRAM['QueryVars']['file']) &&
        $CIDRAM['FileManager-PathSecurityCheck']($CIDRAM['QueryVars']['file']) &&
        file_exists($CIDRAM['Vault'] . $CIDRAM['QueryVars']['file']) &&
        is_readable($CIDRAM['Vault'] . $CIDRAM['QueryVars']['file'])
    ) {
        header('Content-Type: image/x-icon');
        echo $CIDRAM['ReadFile']($CIDRAM['Vault'] . $CIDRAM['QueryVars']['file']);
    } elseif (!empty($CIDRAM['QueryVars']['icon'])) {
        $CIDRAM['Icons_Handler_Path'] = $CIDRAM['GetAssetPath']('icons.php');
        if (is_readable($CIDRAM['Icons_Handler_Path'])) {
            /** Fetch file manager icons data. */
            require $CIDRAM['Icons_Handler_Path'];

            /** Set mime-type. */
            header('Content-Type: image/gif');

            /** Prevents needlessly reloading static assets. */
            if (!empty($CIDRAM['QueryVars']['theme'])) {
                header('Last-Modified: ' . gmdate('D, d M Y H:i:s T', filemtime($CIDRAM['Icons_Handler_Path'])));
            }

            /** Send icon data. */
            if (!empty($CIDRAM['Icons'][$CIDRAM['QueryVars']['icon']])) {
                echo gzinflate(base64_decode($CIDRAM['Icons'][$CIDRAM['QueryVars']['icon']]));
            } elseif (!empty($CIDRAM['Icons']['unknown'])) {
                echo gzinflate(base64_decode($CIDRAM['Icons']['unknown']));
            }
        }
    }

    die;
}

/** A simple passthru for the flags CSS. */
elseif ($CIDRAM['QueryVars']['cidram-page'] === 'flags' && $CIDRAM['FE']['Permissions'] && file_exists($CIDRAM['Vault'] . 'fe_assets/flags.css')) {
    header('Content-Type: text/css');

    /** Prevents needlessly reloading static assets. */
    header('Last-Modified: ' . gmdate('D, d M Y H:i:s T', filemtime($CIDRAM['Vault'] . 'fe_assets/flags.css')));

    /** Send asset data. */
    echo $CIDRAM['ReadFile']($CIDRAM['Vault'] . 'fe_assets/flags.css');

    die;
}

/** Accounts. */
elseif ($CIDRAM['QueryVars']['cidram-page'] === 'accounts' && $CIDRAM['FE']['Permissions'] === 1) {
    /** $_POST overrides for mobile display. */
    if (!empty($_POST['username']) && !empty($_POST['do_mob']) && (!empty($_POST['password_mob']) || $_POST['do_mob'] === 'delete-account')) {
        $_POST['do'] = $_POST['do_mob'];
    }
    if (empty($_POST['username']) && !empty($_POST['username_mob'])) {
        $_POST['username'] = $_POST['username_mob'];
    }
    if (empty($_POST['permissions']) && !empty($_POST['permissions_mob'])) {
        $_POST['permissions'] = $_POST['permissions_mob'];
    }
    if (empty($_POST['password']) && !empty($_POST['password_mob'])) {
        $_POST['password'] = $_POST['password_mob'];
    }

    /** A form has been submitted. */
    if ($CIDRAM['FE']['FormTarget'] === 'accounts' && !empty($_POST['do'])) {
        /** Create a new account. */
        if ($_POST['do'] === 'create-account' && !empty($_POST['username']) && !empty($_POST['password']) && !empty($_POST['permissions'])) {
            $CIDRAM['FE']['NewUser'] = $_POST['username'];
            $CIDRAM['FE']['NewPass'] = password_hash($_POST['password'], $CIDRAM['DefaultAlgo']);
            $CIDRAM['FE']['NewPerm'] = (int)$_POST['permissions'];
            $CIDRAM['FE']['NewUserB64'] = base64_encode($_POST['username']);
            if (strpos($CIDRAM['FE']['UserList'], "\n" . $CIDRAM['FE']['NewUserB64'] . ',') !== false) {
                $CIDRAM['FE']['state_msg'] = $CIDRAM['L10N']->getString('response_accounts_already_exists');
            } else {
                $CIDRAM['AccountsArray'] = [
                    'Iterate' => 0,
                    'Count' => 1,
                    'ByName' => [$CIDRAM['FE']['NewUser'] =>
                        $CIDRAM['FE']['NewUserB64'] . ',' .
                        $CIDRAM['FE']['NewPass'] . ',' .
                        $CIDRAM['FE']['NewPerm'] . "\n"
                    ]
                ];
                $CIDRAM['FE']['NewLineOffset'] = 0;
                while (($CIDRAM['FE']['NewLinePos'] = strpos(
                    $CIDRAM['FE']['UserList'],
                    "\n",
                    $CIDRAM['FE']['NewLineOffset'] + 1
                )) !== false) {
                    $CIDRAM['FE']['NewLine'] = substr(
                        $CIDRAM['FE']['UserList'],
                        $CIDRAM['FE']['NewLineOffset'] + 1,
                        $CIDRAM['FE']['NewLinePos'] - $CIDRAM['FE']['NewLineOffset']
                    );
                    $CIDRAM['RowInfo'] = explode(',', $CIDRAM['FE']['NewLine'], 3);
                    $CIDRAM['RowInfo'] = base64_decode($CIDRAM['RowInfo'][0]);
                    $CIDRAM['AccountsArray']['ByName'][$CIDRAM['RowInfo']] = $CIDRAM['FE']['NewLine'];
                    $CIDRAM['FE']['NewLineOffset'] = $CIDRAM['FE']['NewLinePos'];
                }
                ksort($CIDRAM['AccountsArray']['ByName']);
                $CIDRAM['FE']['UserList'] = "\n" . implode('', $CIDRAM['AccountsArray']['ByName']);
                $CIDRAM['FE']['Rebuild'] = true;
                unset($CIDRAM['AccountsArray']);
                $CIDRAM['FE']['state_msg'] = $CIDRAM['L10N']->getString('response_accounts_created');
            }
        }

        /** Delete an account. */
        if ($_POST['do'] === 'delete-account' && !empty($_POST['username'])) {
            $CIDRAM['FE']['User64'] = base64_encode($_POST['username']);
            $CIDRAM['FE']['UserLinePos'] = strpos($CIDRAM['FE']['UserList'], "\n" . $CIDRAM['FE']['User64'] . ',');
            if ($CIDRAM['FE']['UserLinePos'] === false) {
                $CIDRAM['FE']['state_msg'] = $CIDRAM['L10N']->getString('response_accounts_doesnt_exist');
            } else {
                $CIDRAM['FE']['UserLineEndPos'] = strpos($CIDRAM['FE']['UserList'], "\n", $CIDRAM['FE']['UserLinePos'] + 1);
                if ($CIDRAM['FE']['UserLineEndPos'] !== false) {
                    $CIDRAM['FE']['UserLine'] = substr(
                        $CIDRAM['FE']['UserList'],
                        $CIDRAM['FE']['UserLinePos'] + 1,
                        $CIDRAM['FE']['UserLineEndPos'] - $CIDRAM['FE']['UserLinePos']
                    );
                    $CIDRAM['FE']['UserList'] = str_replace($CIDRAM['FE']['UserLine'], '', $CIDRAM['FE']['UserList']);
                    $CIDRAM['FE']['Rebuild'] = true;
                    $CIDRAM['FE']['state_msg'] = $CIDRAM['L10N']->getString('response_accounts_deleted');
                }
            }
            $CIDRAM['FE']['UserLinePos'] = strpos($CIDRAM['FE']['SessionList'], "\n" . $CIDRAM['FE']['User64'] . ',');
            if ($CIDRAM['FE']['UserLinePos'] !== false) {
                $CIDRAM['FE']['UserLineEndPos'] = strpos($CIDRAM['FE']['SessionList'], "\n", $CIDRAM['FE']['UserLinePos'] + 1);
                if ($CIDRAM['FE']['UserLineEndPos'] !== false) {
                    $CIDRAM['FE']['SessionLine'] = substr(
                        $CIDRAM['FE']['SessionList'],
                        $CIDRAM['FE']['UserLinePos'] + 1,
                        $CIDRAM['FE']['UserLineEndPos'] - $CIDRAM['FE']['UserLinePos']
                    );
                    $CIDRAM['FE']['SessionList'] = str_replace($CIDRAM['FE']['SessionLine'], '', $CIDRAM['FE']['SessionList']);
                    $CIDRAM['FE']['Rebuild'] = true;
                }
            }
        }

        /** Update an account password. */
        if ($_POST['do'] === 'update-password' && !empty($_POST['username']) && !empty($_POST['password'])) {
            $CIDRAM['FE']['User64'] = base64_encode($_POST['username']);
            $CIDRAM['FE']['NewPass'] = password_hash($_POST['password'], $CIDRAM['DefaultAlgo']);
            $CIDRAM['FE']['UserLinePos'] = strpos($CIDRAM['FE']['UserList'], "\n" . $CIDRAM['FE']['User64'] . ',');
            if ($CIDRAM['FE']['UserLinePos'] === false) {
                $CIDRAM['FE']['state_msg'] = $CIDRAM['L10N']->getString('response_accounts_doesnt_exist');
            } else {
                $CIDRAM['FE']['UserLineEndPos'] = strpos($CIDRAM['FE']['UserList'], "\n", $CIDRAM['FE']['UserLinePos'] + 1);
                if ($CIDRAM['FE']['UserLineEndPos'] !== false) {
                    $CIDRAM['FE']['UserLine'] = substr(
                        $CIDRAM['FE']['UserList'],
                        $CIDRAM['FE']['UserLinePos'] + 1,
                        $CIDRAM['FE']['UserLineEndPos'] - $CIDRAM['FE']['UserLinePos']
                    );
                    $CIDRAM['FE']['UserPerm'] = substr($CIDRAM['FE']['UserLine'], -2, 1);
                    $CIDRAM['FE']['NewUserLine'] =
                        $CIDRAM['FE']['User64'] . ',' .
                        $CIDRAM['FE']['NewPass'] . ',' .
                        $CIDRAM['FE']['UserPerm'] . "\n";
                    $CIDRAM['FE']['UserList'] = str_replace($CIDRAM['FE']['UserLine'], $CIDRAM['FE']['NewUserLine'], $CIDRAM['FE']['UserList']);
                    $CIDRAM['FE']['Rebuild'] = true;
                    $CIDRAM['FE']['state_msg'] = $CIDRAM['L10N']->getString('response_accounts_password_updated');
                }
            }
        }
    }

    if (!$CIDRAM['FE']['ASYNC']) {
        /** Page initial prepwork. */
        $CIDRAM['InitialPrepwork']($CIDRAM['L10N']->getString('link_accounts'), $CIDRAM['L10N']->getString('tip_accounts'));

        /** Append async globals. */
        $CIDRAM['FE']['JS'] .= sprintf(
            'window[%3$s]=\'accounts\';function acc(e,d,i,t){var o=function(e){%4$se)' .
            '},a=function(){%4$s\'%1$s\')};window.username=%2$s(e).value,window.passw' .
            'ord=%2$s(d).value,window.do=%2$s(t).value,\'delete-account\'==window.do&' .
            '&$(\'POST\',\'\',[%3$s,\'username\',\'password\',\'do\'],a,function(e){%' .
            '4$se),hideid(i)},o),\'update-password\'==window.do&&$(\'POST\',\'\',[%3$' .
            's,\'username\',\'password\',\'do\'],a,o,o)}' . "\n",
            $CIDRAM['L10N']->getString('state_loading'),
            'document.getElementById',
            "'cidram-form-target'",
            "w('stateMsg',"
        );

        $CIDRAM['FE']['AccountsRow'] = $CIDRAM['ReadFile']($CIDRAM['GetAssetPath']('_accounts_row.html'));
        $CIDRAM['FE']['Accounts'] = '';
        $CIDRAM['FE']['NewLineOffset'] = 0;

        while (($CIDRAM['FE']['NewLinePos'] = strpos(
            $CIDRAM['FE']['UserList'],
            "\n",
            $CIDRAM['FE']['NewLineOffset'] + 1
        )) !== false) {
            $CIDRAM['FE']['NewLine'] = substr(
                $CIDRAM['FE']['UserList'],
                $CIDRAM['FE']['NewLineOffset'] + 1,
                $CIDRAM['FE']['NewLinePos'] - $CIDRAM['FE']['NewLineOffset'] - 1
            );
            $CIDRAM['RowInfo'] = ['DelPos' => strpos($CIDRAM['FE']['NewLine'], ','), 'AccWarnings' => ''];
            $CIDRAM['RowInfo']['AccUsername'] = substr($CIDRAM['FE']['NewLine'], 0, $CIDRAM['RowInfo']['DelPos']);
            $CIDRAM['RowInfo']['AccPassword'] = substr($CIDRAM['FE']['NewLine'], $CIDRAM['RowInfo']['DelPos'] + 1);
            $CIDRAM['RowInfo']['AccPermissions'] = (int)substr($CIDRAM['RowInfo']['AccPassword'], -1);
            if ($CIDRAM['RowInfo']['AccPermissions'] === 1) {
                $CIDRAM['RowInfo']['AccPermissions'] = $CIDRAM['L10N']->getString('state_complete_access');
            } elseif ($CIDRAM['RowInfo']['AccPermissions'] === 2) {
                $CIDRAM['RowInfo']['AccPermissions'] = $CIDRAM['L10N']->getString('state_logs_access_only');
            } elseif ($CIDRAM['RowInfo']['AccPermissions'] === 3) {
                $CIDRAM['RowInfo']['AccPermissions'] = 'Cronable';
            } else {
                $CIDRAM['RowInfo']['AccPermissions'] = $CIDRAM['L10N']->getString('response_error');
            }
            $CIDRAM['RowInfo']['AccPassword'] = substr($CIDRAM['RowInfo']['AccPassword'], 0, -2);

            /** Account password warnings. */
            if ($CIDRAM['RowInfo']['AccPassword'] === $CIDRAM['FE']['DefaultPassword']) {
                $CIDRAM['RowInfo']['AccWarnings'] .= '<br /><div class="txtRd">' . $CIDRAM['L10N']->getString('state_default_password') . '</div>';
            } elseif ((
                strlen($CIDRAM['RowInfo']['AccPassword']) !== 60 &&
                strlen($CIDRAM['RowInfo']['AccPassword']) !== 96 &&
                strlen($CIDRAM['RowInfo']['AccPassword']) !== 97
            ) || (
                strlen($CIDRAM['RowInfo']['AccPassword']) === 60 &&
                !preg_match('/^\$2.\$\d\d\$/', $CIDRAM['RowInfo']['AccPassword'])
            ) || (
                strlen($CIDRAM['RowInfo']['AccPassword']) === 96 &&
                !preg_match('/^\$argon2i\$/', $CIDRAM['RowInfo']['AccPassword'])
            ) || (
                strlen($CIDRAM['RowInfo']['AccPassword']) === 97 &&
                !preg_match('/^\$argon2id\$/', $CIDRAM['RowInfo']['AccPassword'])
            )) {
                $CIDRAM['RowInfo']['AccWarnings'] .= '<br /><div class="txtRd">' . $CIDRAM['L10N']->getString('state_password_not_valid') . '</div>';
            }

            /** Logged in notice. */
            if (strrpos($CIDRAM['FE']['SessionList'], "\n" . $CIDRAM['RowInfo']['AccUsername'] . ',') !== false) {
                $CIDRAM['RowInfo']['AccWarnings'] .= '<br /><div class="txtGn">' . $CIDRAM['L10N']->getString('state_logged_in') . '</div>';
            }

            $CIDRAM['RowInfo']['AccID'] = bin2hex($CIDRAM['RowInfo']['AccUsername']);
            $CIDRAM['RowInfo']['AccUsername'] = htmlentities(base64_decode($CIDRAM['RowInfo']['AccUsername']));
            $CIDRAM['FE']['NewLineOffset'] = $CIDRAM['FE']['NewLinePos'];
            $CIDRAM['FE']['Accounts'] .= $CIDRAM['ParseVars'](
                $CIDRAM['L10N']->Data + $CIDRAM['RowInfo'],
                $CIDRAM['FE']['AccountsRow']
            );
        }
        unset($CIDRAM['RowInfo']);
    }

    if ($CIDRAM['FE']['ASYNC']) {
        /** Send output (async). */
        echo $CIDRAM['FE']['state_msg'];
    } else {
        /** Parse output. */
        $CIDRAM['FE']['FE_Content'] = $CIDRAM['ParseVars'](
            $CIDRAM['L10N']->Data + $CIDRAM['FE'],
            $CIDRAM['ReadFile']($CIDRAM['GetAssetPath']('_accounts.html'))
        );

        /** Send output. */
        echo $CIDRAM['SendOutput']();
    }
}

/** Configuration. */
elseif ($CIDRAM['QueryVars']['cidram-page'] === 'config' && $CIDRAM['FE']['Permissions'] === 1) {
    /** Page initial prepwork. */
    $CIDRAM['InitialPrepwork']($CIDRAM['L10N']->getString('link_config'), $CIDRAM['L10N']->getString('tip_config'));

    /** Append number localisation JS. */
    $CIDRAM['FE']['JS'] .= $CIDRAM['Number_L10N_JS']() . "\n";

    /** Directive template. */
    $CIDRAM['FE']['ConfigRow'] = $CIDRAM['ReadFile']($CIDRAM['GetAssetPath']('_config_row.html'));

    $CIDRAM['FE']['Indexes'] = '<ul class="pieul">';
    $CIDRAM['FE']['ConfigFields'] = '';
    $CIDRAM['RegenerateConfig'] = '';
    $CIDRAM['ConfigModified'] = (!empty($CIDRAM['QueryVars']['updated']) && $CIDRAM['QueryVars']['updated'] === 'true');

    /** For required extensions, classes, etc. */
    $CIDRAM['ReqsLookupCache'] = [];

    /** Iterate through configuration defaults. */
    foreach ($CIDRAM['Config']['Config Defaults'] as $CIDRAM['CatKey'] => $CIDRAM['CatValue']) {
        if (!is_array($CIDRAM['CatValue'])) {
            continue;
        }
        $CIDRAM['RegenerateConfig'] .= '[' . $CIDRAM['CatKey'] . ']';
        if ($CIDRAM['CatInfo'] = $CIDRAM['L10N']->getString('config_' . $CIDRAM['CatKey']) ?: (
            $CIDRAM['FromModuleConfigL10N']('config_' . $CIDRAM['CatKey'])
        )) {
            $CIDRAM['CatInfo'] = '<br /><em>' . $CIDRAM['CatInfo'] . '</em>';
            $CIDRAM['RegenerateConfig'] .= "\r\n; " . wordwrap(str_replace(
                ['&amp;', '&lt;', '&gt;'],
                ['&', '<', '>'],
                strip_tags($CIDRAM['CatInfo'])
            ), 77, "\r\n; ");
        }
        $CIDRAM['RegenerateConfig'] .= "\r\n\r\n";
        $CIDRAM['FE']['ConfigFields'] .= sprintf(
            '<table class="tablend"><tr><td class="ng2"><div id="%1$s-container" class="s">' .
            '<a id="%1$sShowLink" class="showlink" href="#%1$s-container" onclick="javascript:toggleconfig(\'%1$sRow\',\'%1$sShowLink\')">%1$s</a>' .
            '%3$s</div></td></tr></table><span id="%1$sRow" %2$s><table class="tablend">',
            $CIDRAM['CatKey'],
            'style="display:none"',
            $CIDRAM['CatInfo']
        ) . "\n";
        $CIDRAM['CatData'] = '';
        foreach ($CIDRAM['CatValue'] as $CIDRAM['DirKey'] => $CIDRAM['DirValue']) {
            $CIDRAM['ThisDir'] = ['Reset' => '', 'Preview' => '', 'Trigger' => '', 'FieldOut' => '', 'CatKey' => $CIDRAM['CatKey']];
            if (empty($CIDRAM['DirValue']['type']) || !isset($CIDRAM['Config'][$CIDRAM['CatKey']][$CIDRAM['DirKey']])) {
                continue;
            }
            $CIDRAM['ThisDir']['DirLangKey'] = 'config_' . $CIDRAM['CatKey'] . '_' . $CIDRAM['DirKey'];
            $CIDRAM['ThisDir']['DirLangKeyOther'] = $CIDRAM['ThisDir']['DirLangKey'] . '_other';
            $CIDRAM['ThisDir']['DirName'] = '<span class="normalHeight">' . $CIDRAM['LTRinRTF']($CIDRAM['CatKey'] . '➡' . $CIDRAM['DirKey']) . '</span>';
            $CIDRAM['ThisDir']['Friendly'] = $CIDRAM['L10N']->getString($CIDRAM['ThisDir']['DirLangKey'] . '_label') ?: (
                $CIDRAM['FromModuleConfigL10N']($CIDRAM['ThisDir']['DirLangKey'] . '_label')
            ) ?: $CIDRAM['DirKey'];
            $CIDRAM['CatData'] .= sprintf(
                '<li><a onclick="javascript:toggleconfigNav(\'%1$sRow\',\'%1$sShowLink\')" href="#%2$s">%3$s</a></li>',
                $CIDRAM['CatKey'],
                $CIDRAM['ThisDir']['DirLangKey'],
                $CIDRAM['ThisDir']['Friendly']
            );
            $CIDRAM['ThisDir']['DirLang'] =
                $CIDRAM['L10N']->getString($CIDRAM['ThisDir']['DirLangKey']) ?:
                $CIDRAM['L10N']->getString('label_' . $CIDRAM['DirKey']) ?:
                $CIDRAM['L10N']->getString('config_' . $CIDRAM['CatKey']) ?:
                $CIDRAM['FromModuleConfigL10N']($CIDRAM['ThisDir']['DirLangKey']) ?:
                $CIDRAM['FromModuleConfigL10N']('config_' . $CIDRAM['CatKey']) ?:
                $CIDRAM['L10N']->getString('response_error');
            if (!empty($CIDRAM['DirValue']['experimental'])) {
                $CIDRAM['ThisDir']['DirLang'] = '<code class="exp">' . $CIDRAM['L10N']->getString('config_experimental') . '</code> ' . $CIDRAM['ThisDir']['DirLang'];
            }
            $CIDRAM['ThisDir']['autocomplete'] = empty($CIDRAM['DirValue']['autocomplete']) ? '' : sprintf(
                ' autocomplete="%s"',
                $CIDRAM['DirValue']['autocomplete']
            );
            $CIDRAM['RegenerateConfig'] .= '; ' . wordwrap(str_replace(
                ['&amp;', '&lt;', '&gt;'],
                ['&', '<', '>'],
                strip_tags($CIDRAM['ThisDir']['DirLang'])
            ), 77, "\r\n; ") . "\r\n";

            /** Fix for PHP automatically changing certain kinds of $_POST keys. */
            if (!isset($_POST[$CIDRAM['ThisDir']['DirLangKey']])) {
                $CIDRAM['Try'] = str_replace('.', '_', $CIDRAM['ThisDir']['DirLangKey']);
                if (isset($_POST[$CIDRAM['Try']])) {
                    $_POST[$CIDRAM['ThisDir']['DirLangKey']] = $_POST[$CIDRAM['Try']];
                    unset($_POST[$CIDRAM['Try']]);
                }
            }

            if (isset($_POST[$CIDRAM['ThisDir']['DirLangKey']])) {
                if (in_array($CIDRAM['DirValue']['type'], ['bool', 'float', 'int', 'kb', 'string', 'timezone', 'email', 'url'], true)) {
                    $CIDRAM['AutoType']($_POST[$CIDRAM['ThisDir']['DirLangKey']], $CIDRAM['DirValue']['type']);
                }
                if (!preg_match('/[^\x20-\xFF"\']/', $_POST[$CIDRAM['ThisDir']['DirLangKey']]) && (
                    !isset($CIDRAM['DirValue']['choices']) ||
                    isset($CIDRAM['DirValue']['choices'][$_POST[$CIDRAM['ThisDir']['DirLangKey']]])
                )) {
                    $CIDRAM['Config'][$CIDRAM['CatKey']][$CIDRAM['DirKey']] = $_POST[$CIDRAM['ThisDir']['DirLangKey']];
                    $CIDRAM['ConfigModified'] = true;
                } elseif (
                    !empty($CIDRAM['DirValue']['allow_other']) &&
                    $_POST[$CIDRAM['ThisDir']['DirLangKey']] === 'Other' &&
                    isset($_POST[$CIDRAM['ThisDir']['DirLangKeyOther']]) &&
                    !preg_match('/[^\x20-\xFF"\']/', $_POST[$CIDRAM['ThisDir']['DirLangKeyOther']])
                ) {
                    $CIDRAM['Config'][$CIDRAM['CatKey']][$CIDRAM['DirKey']] = $_POST[$CIDRAM['ThisDir']['DirLangKeyOther']];
                    $CIDRAM['ConfigModified'] = true;
                }
            } elseif (
                empty($CIDRAM['QueryVars']['updated']) &&
                $CIDRAM['ConfigModified'] &&
                $CIDRAM['DirValue']['type'] === 'checkbox' &&
                isset($CIDRAM['DirValue']['choices']) &&
                is_array($CIDRAM['DirValue']['choices'])
            ) {
                $CIDRAM['DirValue']['Posts'] = [];
                foreach ($CIDRAM['DirValue']['choices'] as $CIDRAM['DirValue']['ThisChoiceKey'] => $CIDRAM['DirValue']['ThisChoice']) {
                    if (isset($CIDRAM['DirValue']['labels']) && is_array($CIDRAM['DirValue']['labels'])) {
                        foreach ($CIDRAM['DirValue']['labels'] as $CIDRAM['DirValue']['ThisLabelKey'] => $CIDRAM['DirValue']['ThisLabel']) {
                            if (!empty($_POST[$CIDRAM['ThisDir']['DirLangKey'] . '_' . $CIDRAM['DirValue']['ThisChoiceKey'] . '_' . $CIDRAM['DirValue']['ThisLabelKey']])) {
                                $CIDRAM['DirValue']['Posts'][] = $CIDRAM['DirValue']['ThisChoiceKey'] . ':' . $CIDRAM['DirValue']['ThisLabelKey'];
                            } else {
                                $CIDRAM['Try'] = str_replace('.', '_', $CIDRAM['ThisDir']['DirLangKey'] . '_' . $CIDRAM['DirValue']['ThisChoiceKey'] . '_' . $CIDRAM['DirValue']['ThisLabelKey']);
                                if (!empty($_POST[$CIDRAM['Try']])) {
                                    $_POST[$CIDRAM['ThisDir']['DirLangKey'] . '_' . $CIDRAM['DirValue']['ThisChoiceKey'] . '_' . $CIDRAM['DirValue']['ThisLabelKey']] = $_POST[$CIDRAM['Try']];
                                    unset($_POST[$CIDRAM['Try']]);
                                    $CIDRAM['DirValue']['Posts'][] = $CIDRAM['DirValue']['ThisChoiceKey'] . ':' . $CIDRAM['DirValue']['ThisLabelKey'];
                                }
                            }
                        }
                    } elseif (!empty($_POST[$CIDRAM['ThisDir']['DirLangKey'] . '_' . $CIDRAM['DirValue']['ThisChoiceKey']])) {
                        $CIDRAM['DirValue']['Posts'][] = $CIDRAM['DirValue']['ThisChoiceKey'];
                    } else {
                        $CIDRAM['Try'] = str_replace('.', '_', $CIDRAM['ThisDir']['DirLangKey'] . '_' . $CIDRAM['DirValue']['ThisChoiceKey']);
                        if (!empty($_POST[$CIDRAM['Try']])) {
                            $_POST[$CIDRAM['ThisDir']['DirLangKey'] . '_' . $CIDRAM['DirValue']['ThisChoiceKey']] = $_POST[$CIDRAM['Try']];
                            unset($_POST[$CIDRAM['Try']]);
                            $CIDRAM['DirValue']['Posts'][] = $CIDRAM['DirValue']['ThisChoiceKey'];
                        }
                    }
                }
                $CIDRAM['DirValue']['Posts'] = implode(',', $CIDRAM['DirValue']['Posts']) ?: '';
                if (!empty($_POST['updatingConfig']) && $CIDRAM['Config'][$CIDRAM['CatKey']][$CIDRAM['DirKey']] !== $CIDRAM['DirValue']['Posts']) {
                    $CIDRAM['ConfigModified'] = true;
                    $CIDRAM['Config'][$CIDRAM['CatKey']][$CIDRAM['DirKey']] = $CIDRAM['DirValue']['Posts'];
                }
            }
            if ($CIDRAM['Config'][$CIDRAM['CatKey']][$CIDRAM['DirKey']] === true) {
                $CIDRAM['RegenerateConfig'] .= $CIDRAM['DirKey'] . "=true\r\n\r\n";
            } elseif ($CIDRAM['Config'][$CIDRAM['CatKey']][$CIDRAM['DirKey']] === false) {
                $CIDRAM['RegenerateConfig'] .= $CIDRAM['DirKey'] . "=false\r\n\r\n";
            } elseif (in_array($CIDRAM['DirValue']['type'], ['float', 'int'], true)) {
                $CIDRAM['RegenerateConfig'] .= $CIDRAM['DirKey'] . '=' . $CIDRAM['Config'][$CIDRAM['CatKey']][$CIDRAM['DirKey']] . "\r\n\r\n";
            } else {
                $CIDRAM['RegenerateConfig'] .= $CIDRAM['DirKey'] . '=\'' . $CIDRAM['Config'][$CIDRAM['CatKey']][$CIDRAM['DirKey']] . "'\r\n\r\n";
            }
            if (isset($CIDRAM['DirValue']['preview'])) {
                $CIDRAM['ThisDir']['Preview'] = ($CIDRAM['DirValue']['preview'] === 'allow_other') ? '' : sprintf(
                    ' = <span id="%s_preview"></span>',
                    $CIDRAM['ThisDir']['DirLangKey']
                );
                $CIDRAM['ThisDir']['Trigger'] = ' onchange="javascript:' . $CIDRAM['ThisDir']['DirLangKey'] . '_function();" onkeyup="javascript:' . $CIDRAM['ThisDir']['DirLangKey'] . '_function();"';
                if ($CIDRAM['DirValue']['preview'] === 'seconds') {
                    $CIDRAM['ThisDir']['Preview'] .= sprintf(
                        '<script type="text/javascript">function %1$s_function(){var t=%9$s?%9$s(' .
                        '\'%1$s_field\').value:%10$s&&!%9$s?%10$s.%1$s_field.value:\'\',e=isNaN(t' .
                        ')?0:0>t?t*-1:t,n=e?Math.floor(e/31536e3):0,e=e?e-31536e3*n:0,o=e?Math.fl' .
                        'oor(e/2592e3):0,e=e-2592e3*o,l=e?Math.floor(e/604800):0,e=e-604800*l,r=e' .
                        '?Math.floor(e/86400):0,e=e-86400*r,d=e?Math.floor(e/3600):0,e=e-3600*d,i' .
                        '=e?Math.floor(e/60):0,e=e-60*i,f=e?Math.floor(1*e):0,a=nft(n.toString())' .
                        '+\' %2$s – \'+nft(o.toString())+\' %3$s – \'+nft(l.toString())+\' %4$s –' .
                        ' \'+nft(r.toString())+\' %5$s – \'+nft(d.toString())+\' %6$s – \'+nft(i.' .
                        'toString())+\' %7$s – \'+nft(f.toString())+\' %8$s\';%9$s?%9$s(\'%1$s_pr' .
                        'eview\').innerHTML=a:%10$s&&!%9$s?%10$s.%1$s_preview.innerHTML=a:\'\'}' .
                        '%1$s_function();</script>',
                        $CIDRAM['ThisDir']['DirLangKey'],
                        $CIDRAM['L10N']->getString('previewer_years'),
                        $CIDRAM['L10N']->getString('previewer_months'),
                        $CIDRAM['L10N']->getString('previewer_weeks'),
                        $CIDRAM['L10N']->getString('previewer_days'),
                        $CIDRAM['L10N']->getString('previewer_hours'),
                        $CIDRAM['L10N']->getString('previewer_minutes'),
                        $CIDRAM['L10N']->getString('previewer_seconds'),
                        'document.getElementById',
                        'document.all'
                    );
                } elseif ($CIDRAM['DirValue']['preview'] === 'minutes') {
                    $CIDRAM['ThisDir']['Preview'] .= sprintf(
                        '<script type="text/javascript">function %1$s_function(){var t=%9$s?%9$s(' .
                        '\'%1$s_field\').value:%10$s&&!%9$s?%10$s.%1$s_field.value:\'\',e=isNaN(t' .
                        ')?0:0>t?t*-1:t,n=e?Math.floor(e/525600):0,e=e?e-525600*n:0,o=e?Math.floo' .
                        'r(e/43200):0,e=e-43200*o,l=e?Math.floor(e/10080):0,e=e-10080*l,r=e?Math.' .
                        'floor(e/1440):0,e=e-1440*r,d=e?Math.floor(e/60):0,e=e-60*d,i=e?Math.floo' .
                        'r(e*1):0,e=e-i,f=e?Math.floor(60*e):0,a=nft(n.toString())+\' %2$s – \'+n' .
                        'ft(o.toString())+\' %3$s – \'+nft(l.toString())+\' %4$s – \'+nft(r.toStr' .
                        'ing())+\' %5$s – \'+nft(d.toString())+\' %6$s – \'+nft(i.toString())+\' ' .
                        '%7$s – \'+nft(f.toString())+\' %8$s\';%9$s?%9$s(\'%1$s_preview\').innerH' .
                        'TML=a:%10$s&&!%9$s?%10$s.%1$s_preview.innerHTML=a:\'\'}%1$s_function();<' .
                        '/script>',
                        $CIDRAM['ThisDir']['DirLangKey'],
                        $CIDRAM['L10N']->getString('previewer_years'),
                        $CIDRAM['L10N']->getString('previewer_months'),
                        $CIDRAM['L10N']->getString('previewer_weeks'),
                        $CIDRAM['L10N']->getString('previewer_days'),
                        $CIDRAM['L10N']->getString('previewer_hours'),
                        $CIDRAM['L10N']->getString('previewer_minutes'),
                        $CIDRAM['L10N']->getString('previewer_seconds'),
                        'document.getElementById',
                        'document.all'
                    );
                } elseif ($CIDRAM['DirValue']['preview'] === 'hours') {
                    $CIDRAM['ThisDir']['Preview'] .= sprintf(
                        '<script type="text/javascript">function %1$s_function(){var t=%9$s?%9$s(' .
                        '\'%1$s_field\').value:%10$s&&!%9$s?%10$s.%1$s_field.value:\'\',e=isNaN(t' .
                        ')?0:0>t?t*-1:t,n=e?Math.floor(e/8760):0,e=e?e-8760*n:0,o=e?Math.floor(e/' .
                        '720):0,e=e-720*o,l=e?Math.floor(e/168):0,e=e-168*l,r=e?Math.floor(e/24):' .
                        '0,e=e-24*r,d=e?Math.floor(e*1):0,e=e-d,i=e?Math.floor(60*e):0,e=e-(i/60)' .
                        ',f=e?Math.floor(3600*e):0,a=nft(n.toString())+\' %2$s – \'+nft(o.toStrin' .
                        'g())+\' %3$s – \'+nft(l.toString())+\' %4$s – \'+nft(r.toString())+\' ' .
                        '%5$s – \'+nft(d.toString())+\' %6$s – \'+nft(i.toString())+\' %7$s – \'+' .
                        'nft(f.toString())+\' %8$s\';%9$s?%9$s(\'%1$s_preview\').innerHTML=a:' .
                        '%10$s&&!%9$s?%10$s.%1$s_preview.innerHTML=a:\'\'}%1$s_function();</script>',
                        $CIDRAM['ThisDir']['DirLangKey'],
                        $CIDRAM['L10N']->getString('previewer_years'),
                        $CIDRAM['L10N']->getString('previewer_months'),
                        $CIDRAM['L10N']->getString('previewer_weeks'),
                        $CIDRAM['L10N']->getString('previewer_days'),
                        $CIDRAM['L10N']->getString('previewer_hours'),
                        $CIDRAM['L10N']->getString('previewer_minutes'),
                        $CIDRAM['L10N']->getString('previewer_seconds'),
                        'document.getElementById',
                        'document.all'
                    );
                } elseif ($CIDRAM['DirValue']['preview'] === 'allow_other') {
                    $CIDRAM['ThisDir']['Preview'] .= sprintf(
                        '<script type="text/javascript">function %1$s_function(){var e=%2$s?%2$s(' .
                        '\'%1$s_field\').value:%3$s&&!%2$s?%3$s.%1$s_field.value:\'\';e==\'Other\'' .
                        '?showid(\'%4$s_field\'):hideid(\'%4$s_field\')};%1$s_function();</script>',
                        $CIDRAM['ThisDir']['DirLangKey'],
                        'document.getElementById',
                        'document.all',
                        $CIDRAM['ThisDir']['DirLangKeyOther']
                    );
                } elseif (substr($CIDRAM['DirValue']['preview'], 0, 3) === 'js:') {
                    $CIDRAM['ThisDir']['Preview'] .= '<script type="text/javascript">' . sprintf(
                        substr($CIDRAM['DirValue']['preview'], 3),
                        $CIDRAM['ThisDir']['DirLangKey']
                    ) . '</script>';
                }
            } elseif ($CIDRAM['DirValue']['type'] === 'kb') {
                $CIDRAM['ThisDir']['Preview'] = sprintf(' = <span id="%s_preview"></span>', $CIDRAM['ThisDir']['DirLangKey']);
                $CIDRAM['ThisDir']['Trigger'] = ' onchange="javascript:' . $CIDRAM['ThisDir']['DirLangKey'] . '_function();" onkeyup="javascript:' . $CIDRAM['ThisDir']['DirLangKey'] . '_function();"';
                $CIDRAM['ThisDir']['Preview'] .= sprintf(
                    '<script type="text/javascript">function %1$s_function(){const bytesPerUnit={' .
                    'B:1,K:1024,M:1048576,G:1073741824,T:1099511627776,P:1125899906842620},unitNa' .
                    'mes=["%2$s","%3$s","%4$s","%5$s","%6$s","%7$s"];var e=%8$s?%8$s(\'%1$s_field' .
                    '\').value:%9$s&&!%8$s?%9$s.%1$s_field.value:\'\';if((Unit=e.match(/(?<Unit>[' .
                    'KkMmGgTtPpOoBb]|К|к|М|м|Г|г|Т|т|П|п|Ｋ|ｋ|Ｍ|ｍ|Ｇ|ｇ|Ｔ|ｔ|Ｐ|ｐ|Б|б|Ｂ|ｂ)(?:[OoBb]|Б|' .
                    'б|Ｂ|ｂ)?$/))&&void 0!==Unit.groups.Unit)if((Unit=Unit.groups.Unit).match(/^(?' .
                    ':[OoBb]|Б|б|Ｂ|ｂ)$/))var Unit=\'B\';else if(Unit.match(/^(?:[Mm]|М|м)$/))Unit' .
                    '=\'M\';else if(Unit.match(/^(?:[Gg]|Г|г)$/))Unit=\'G\';else if(Unit.match(/^' .
                    '(?:[Tt]|Т|т)$/))Unit=\'T\';else if(Unit.match(/^(?:[Pp]|П|п)$/))Unit=\'P\';e' .
                    'lse Unit=\'K\';else Unit=\'K\';var e=parseFloat(e);if(isNaN(e))var fixed=0;e' .
                    'lse{if(void 0!==bytesPerUnit[Unit])fixed=e*bytesPerUnit[Unit];else fixed=e;f' .
                    'ixed=Math.floor(fixed)}for(var i=0,p=unitNames[i];fixed>=1024;){fixed=fixed/' .
                    '1024;i++;p=unitNames[i];if(i>=5)break}t=nft(fixed.toFixed(i===0?0:2))+\' \'+' .
                    'p;%8$s?%8$s(\'%1$s_preview\').innerHTML=t:%9$s&&!%8$s?%9$s.%1$s_preview.inne' .
                    'rHTML=t:\'\';};%1$s_function();</script>',
                    $CIDRAM['ThisDir']['DirLangKey'],
                    $CIDRAM['L10N']->getPlural(0, 'field_size_bytes'),
                    $CIDRAM['L10N']->getString('field_size_KB'),
                    $CIDRAM['L10N']->getString('field_size_MB'),
                    $CIDRAM['L10N']->getString('field_size_GB'),
                    $CIDRAM['L10N']->getString('field_size_TB'),
                    $CIDRAM['L10N']->getString('field_size_PB'),
                    'document.getElementById',
                    'document.all'
                );
            }
            if ($CIDRAM['DirValue']['type'] === 'timezone') {
                $CIDRAM['DirValue']['choices'] = ['SYSTEM' => $CIDRAM['L10N']->getString('field_system_timezone')];
                foreach (array_unique(\DateTimeZone::listIdentifiers()) as $CIDRAM['DirValue']['ChoiceValue']) {
                    $CIDRAM['DirValue']['choices'][$CIDRAM['DirValue']['ChoiceValue']] = $CIDRAM['DirValue']['ChoiceValue'];
                }
            }
            if (isset($CIDRAM['DirValue']['choices'])) {
                if (
                    $CIDRAM['DirValue']['type'] === 'checkbox' ||
                    (isset($CIDRAM['DirValue']['style']) && $CIDRAM['DirValue']['style'] === 'radio')
                ) {
                    if (
                        $CIDRAM['DirValue']['type'] === 'checkbox' &&
                        isset($CIDRAM['DirValue']['labels']) &&
                        is_array($CIDRAM['DirValue']['labels'])
                    ) {
                        $CIDRAM['DirValue']['gridV'] = 'gridVB';
                        $CIDRAM['ThisDir']['FieldOut'] = sprintf(
                            '<div style="display:grid;margin:auto 38px;grid-template-columns:repeat(%s) auto;text-align:%s">',
                            count($CIDRAM['DirValue']['labels']) . ',minmax(0, 1fr)',
                            $CIDRAM['FE']['FE_Align']
                        );
                        $CIDRAM['DirValue']['HasLabels'] = true;
                        foreach ($CIDRAM['DirValue']['labels'] as $CIDRAM['DirValue']['ThisLabel']) {
                            $CIDRAM['DirValue']['gridV'] = ($CIDRAM['DirValue']['gridV']) === 'gridVB' ? 'gridVA' : 'gridVB';
                            $CIDRAM['ReplaceLabelWithL10N']($CIDRAM['DirValue']['ThisLabel']);
                            $CIDRAM['ThisDir']['FieldOut'] .= sprintf(
                                '<div class="gridboxitem configMatrixLabel %s">%s</div>',
                                $CIDRAM['DirValue']['gridV'],
                                $CIDRAM['DirValue']['ThisLabel']
                            );
                        }
                        $CIDRAM['ThisDir']['FieldOut'] .= '<div class="gridboxitem"></div>';
                    } else {
                        $CIDRAM['ThisDir']['FieldOut'] = sprintf(
                            '<div style="display:grid;margin:auto 38px;grid-template-columns:19px auto;text-align:%s">',
                            $CIDRAM['FE']['FE_Align']
                        );
                        $CIDRAM['DirValue']['HasLabels'] = false;
                    }
                } else {
                    $CIDRAM['ThisDir']['FieldOut'] = sprintf(
                        '<select class="auto" style="text-transform:capitalize" name="%1$s" id="%1$s_field"%2$s>',
                        $CIDRAM['ThisDir']['DirLangKey'],
                        $CIDRAM['ThisDir']['Trigger']
                    );
                }
                $CIDRAM['DirValue']['gridH'] = 'gridHB';
                foreach ($CIDRAM['DirValue']['choices'] as $CIDRAM['ChoiceKey'] => $CIDRAM['ChoiceValue']) {
                    if (isset($CIDRAM['DirValue']['choice_filter'])) {
                        if (
                            !is_string($CIDRAM['ChoiceValue']) ||
                            !$CIDRAM[$CIDRAM['DirValue']['choice_filter']]($CIDRAM['ChoiceKey'], $CIDRAM['ChoiceValue'])
                        ) {
                            continue;
                        }
                    }
                    $CIDRAM['DirValue']['gridV'] = 'gridVB';
                    $CIDRAM['DirValue']['gridH'] = ($CIDRAM['DirValue']['gridH']) === 'gridHB' ? 'gridHA' : 'gridHB';
                    $CIDRAM['ChoiceValue'] = $CIDRAM['TimeFormat']($CIDRAM['Now'], $CIDRAM['ChoiceValue']);
                    if (strpos($CIDRAM['ChoiceValue'], '{') !== false) {
                        $CIDRAM['ChoiceValue'] = $CIDRAM['ParseVars']($CIDRAM['L10N']->Data, $CIDRAM['ChoiceValue']);
                    }
                    $CIDRAM['ReplaceLabelWithL10N']($CIDRAM['ChoiceValue']);
                    if ($CIDRAM['DirValue']['type'] === 'checkbox') {
                        if ($CIDRAM['DirValue']['HasLabels']) {
                            foreach ($CIDRAM['DirValue']['labels'] as $CIDRAM['DirValue']['ThisLabelKey'] => $CIDRAM['DirValue']['ThisLabel']) {
                                $CIDRAM['DirValue']['gridV'] = ($CIDRAM['DirValue']['gridV']) === 'gridVB' ? 'gridVA' : 'gridVB';
                                $CIDRAM['ThisDir']['FieldOut'] .= sprintf(
                                    '<div class="gridboxcheckcell %4$s %5$s"><label class="gridlabel"><input%3$s type="checkbox" class="auto" name="%1$s" id="%1$s"%2$s /></label></div>',
                                    $CIDRAM['ThisDir']['DirLangKey'] . '_' . $CIDRAM['ChoiceKey'] . '_' . $CIDRAM['DirValue']['ThisLabelKey'],
                                    $CIDRAM['Request']->inCsv(
                                        $CIDRAM['ChoiceKey'] . ':' . $CIDRAM['DirValue']['ThisLabelKey'],
                                        $CIDRAM['Config'][$CIDRAM['CatKey']][$CIDRAM['DirKey']]
                                    ) ? ' checked' : '',
                                    $CIDRAM['ThisDir']['Trigger'],
                                    $CIDRAM['DirValue']['gridV'],
                                    $CIDRAM['DirValue']['gridH']
                                );
                                $CIDRAM['ThisDir']['Reset'] .= sprintf(
                                    'document.getElementById(\'%s\').checked=%s;',
                                    $CIDRAM['ThisDir']['DirLangKey'] . '_' . $CIDRAM['ChoiceKey'] . '_' . $CIDRAM['DirValue']['ThisLabelKey'],
                                    isset($CIDRAM['Config']['Config Defaults'][$CIDRAM['CatKey']][$CIDRAM['DirKey']]['default']) && $CIDRAM['Request']->inCsv(
                                        $CIDRAM['ChoiceKey'] . ':' . $CIDRAM['DirValue']['ThisLabelKey'],
                                        $CIDRAM['Config']['Config Defaults'][$CIDRAM['CatKey']][$CIDRAM['DirKey']]['default']
                                    ) ? 'true' : 'false'
                                );
                            }
                            $CIDRAM['ThisDir']['FieldOut'] .= sprintf(
                                '<div class="gridboxitem %s %s">%s</div>',
                                $CIDRAM['DirValue']['gridH'],
                                (count($CIDRAM['DirValue']['labels']) % 2) === 0 ? 'vrte' : 'vrto',
                                $CIDRAM['ChoiceValue']
                            );
                        } else {
                            $CIDRAM['ThisDir']['FieldOut'] .= sprintf(
                                '<div class="gridboxcheckcell gridVA %5$s"><label class="gridlabel"><input%4$s type="checkbox" class="auto" name="%1$s" id="%1$s"%2$s /></label></div><div class="gridboxitem %5$s"><label for="%1$s" class="s">%3$s</label></div>',
                                $CIDRAM['ThisDir']['DirLangKey'] . '_' . $CIDRAM['ChoiceKey'],
                                $CIDRAM['Request']->inCsv(
                                    $CIDRAM['ChoiceKey'],
                                    $CIDRAM['Config'][$CIDRAM['CatKey']][$CIDRAM['DirKey']]
                                ) ? ' checked' : '',
                                $CIDRAM['ChoiceValue'],
                                $CIDRAM['ThisDir']['Trigger'],
                                $CIDRAM['DirValue']['gridH']
                            );
                            $CIDRAM['ThisDir']['Reset'] .= sprintf(
                                'document.getElementById(\'%s\').checked=%s;',
                                $CIDRAM['ThisDir']['DirLangKey'] . '_' . $CIDRAM['ChoiceKey'],
                                isset($CIDRAM['Config']['Config Defaults'][$CIDRAM['CatKey']][$CIDRAM['DirKey']]['default']) && $CIDRAM['Request']->inCsv(
                                    $CIDRAM['ChoiceKey'],
                                    $CIDRAM['Config']['Config Defaults'][$CIDRAM['CatKey']][$CIDRAM['DirKey']]['default']
                                ) ? 'true' : 'false'
                            );
                        }
                    } elseif (isset($CIDRAM['DirValue']['style']) && $CIDRAM['DirValue']['style'] === 'radio') {
                        if (strpos($CIDRAM['ChoiceValue'], "\n")) {
                            $CIDRAM['ChoiceValue'] = explode("\n", $CIDRAM['ChoiceValue']);
                            $CIDRAM['ThisDir']['FieldOut'] .= sprintf(
                                '<div class="gridboxstretch gridVA %5$s"><label class="gridlabel"><input%4$s type="radio" class="auto" name="%6$s" id="%1$s" value="%7$s"%2$s /></label></div><div class="gridboxstretch %5$s"><label for="%1$s"><span class="s">%3$s</span><br />%8$s</label></div>',
                                $CIDRAM['ThisDir']['DirLangKey'] . '_' . $CIDRAM['ChoiceKey'],
                                $CIDRAM['ChoiceKey'] === $CIDRAM['Config'][$CIDRAM['CatKey']][$CIDRAM['DirKey']] ? ' checked' : '',
                                $CIDRAM['ChoiceValue'][0],
                                $CIDRAM['ThisDir']['Trigger'],
                                $CIDRAM['DirValue']['gridH'],
                                $CIDRAM['ThisDir']['DirLangKey'],
                                $CIDRAM['ChoiceKey'],
                                $CIDRAM['ChoiceValue'][1]
                            );
                        } else {
                            $CIDRAM['ThisDir']['FieldOut'] .= sprintf(
                                '<div class="gridboxcheckcell gridVA %5$s"><label class="gridlabel"><input%4$s type="radio" class="auto" name="%6$s" id="%1$s" value="%7$s"%2$s /></label></div><div class="gridboxitem %5$s"><label for="%1$s" class="s">%3$s</label></div>',
                                $CIDRAM['ThisDir']['DirLangKey'] . '_' . $CIDRAM['ChoiceKey'],
                                $CIDRAM['ChoiceKey'] === $CIDRAM['Config'][$CIDRAM['CatKey']][$CIDRAM['DirKey']] ? ' checked' : '',
                                $CIDRAM['ChoiceValue'],
                                $CIDRAM['ThisDir']['Trigger'],
                                $CIDRAM['DirValue']['gridH'],
                                $CIDRAM['ThisDir']['DirLangKey'],
                                $CIDRAM['ChoiceKey']
                            );
                        }
                        if (
                            isset($CIDRAM['Config']['Config Defaults'][$CIDRAM['CatKey']][$CIDRAM['DirKey']]['default']) &&
                            $CIDRAM['ChoiceKey'] === $CIDRAM['Config']['Config Defaults'][$CIDRAM['CatKey']][$CIDRAM['DirKey']]['default']
                        ) {
                            $CIDRAM['ThisDir']['Reset'] .= sprintf(
                                'document.getElementById(\'%s\').checked=true;',
                                $CIDRAM['ThisDir']['DirLangKey'] . '_' . $CIDRAM['ChoiceKey']
                            );
                        }
                    } else {
                        $CIDRAM['ThisDir']['FieldOut'] .= sprintf(
                            '<option style="text-transform:capitalize" value="%s"%s>%s</option>',
                            $CIDRAM['ChoiceKey'],
                            $CIDRAM['ChoiceKey'] === $CIDRAM['Config'][$CIDRAM['CatKey']][$CIDRAM['DirKey']] ? ' selected' : '',
                            $CIDRAM['ChoiceValue']
                        );
                        if (
                            isset($CIDRAM['Config']['Config Defaults'][$CIDRAM['CatKey']][$CIDRAM['DirKey']]['default']) &&
                            $CIDRAM['ChoiceKey'] === $CIDRAM['Config']['Config Defaults'][$CIDRAM['CatKey']][$CIDRAM['DirKey']]['default']
                        ) {
                            $CIDRAM['ThisDir']['Reset'] .= sprintf(
                                'document.getElementById(\'%s_field\').value=\'%s\';',
                                $CIDRAM['ThisDir']['DirLangKey'],
                                addcslashes($CIDRAM['ChoiceKey'], "\n'\"\\")
                            );
                        }
                    }
                }
                if (
                    $CIDRAM['DirValue']['type'] === 'checkbox' ||
                    (isset($CIDRAM['DirValue']['style']) && $CIDRAM['DirValue']['style'] === 'radio')
                ) {
                    $CIDRAM['ThisDir']['FieldOut'] .= '</div>';
                } else {
                    $CIDRAM['ThisDir']['SelectOther'] = !isset($CIDRAM['DirValue']['choices'][$CIDRAM['Config'][$CIDRAM['CatKey']][$CIDRAM['DirKey']]]);
                    $CIDRAM['ThisDir']['FieldOut'] .= empty($CIDRAM['DirValue']['allow_other']) ? '</select>' : sprintf(
                        '<option value="Other"%1$s>%2$s</option></select><input type="text"%3$s class="auto" name="%4$s" id="%4$s_field" value="%5$s" />',
                        $CIDRAM['ThisDir']['SelectOther'] ? ' selected' : '',
                        $CIDRAM['L10N']->getString('label_other'),
                        $CIDRAM['ThisDir']['SelectOther'] ? '' : ' style="display:none"',
                        $CIDRAM['ThisDir']['DirLangKeyOther'],
                        $CIDRAM['Config'][$CIDRAM['CatKey']][$CIDRAM['DirKey']]
                    );
                }
            } elseif ($CIDRAM['DirValue']['type'] === 'bool') {
                $CIDRAM['ThisDir']['FieldOut'] = sprintf(
                    '<select class="auto" name="%1$s" id="%1$s_field"%2$s><option value="true"%5$s>%3$s</option><option value="false"%6$s>%4$s</option></select>',
                    $CIDRAM['ThisDir']['DirLangKey'],
                    $CIDRAM['ThisDir']['Trigger'],
                    $CIDRAM['L10N']->getString('field_true'),
                    $CIDRAM['L10N']->getString('field_false'),
                    ($CIDRAM['Config'][$CIDRAM['CatKey']][$CIDRAM['DirKey']] ? ' selected' : ''),
                    ($CIDRAM['Config'][$CIDRAM['CatKey']][$CIDRAM['DirKey']] ? '' : ' selected')
                );
                $CIDRAM['ThisDir']['Reset'] .= sprintf(
                    'document.getElementById(\'%s_field\').value=\'%s\';',
                    $CIDRAM['ThisDir']['DirLangKey'],
                    empty($CIDRAM['Config']['Config Defaults'][$CIDRAM['CatKey']][$CIDRAM['DirKey']]['default']) ? 'false' : 'true'
                );
            } elseif ($CIDRAM['DirValue']['type'] === 'float' || $CIDRAM['DirValue']['type'] === 'int') {
                $CIDRAM['ThisDir']['FieldAppend'] = '';
                if (isset($CIDRAM['DirValue']['step'])) {
                    $CIDRAM['ThisDir']['FieldAppend'] .= ' step="' . $CIDRAM['DirValue']['step'] . '"';
                }
                $CIDRAM['ThisDir']['FieldAppend'] .= $CIDRAM['ThisDir']['Trigger'];
                if ($CIDRAM['DirValue']['type'] === 'int') {
                    $CIDRAM['ThisDir']['FieldAppend'] .= ' inputmode="numeric"';
                    if (isset($CIDRAM['DirValue']['pattern'])) {
                        $CIDRAM['ThisDir']['FieldAppend'] .= ' pattern="' . $CIDRAM['DirValue']['pattern'] . '"';
                    } else {
                        $CIDRAM['ThisDir']['FieldAppend'] .= (!isset($CIDRAM['DirValue']['min']) || $CIDRAM['DirValue']['min'] < 0) ? ' pattern="^-?\d*$"' : ' pattern="^\d*$"';
                    }
                } elseif (isset($CIDRAM['DirValue']['pattern'])) {
                    $CIDRAM['ThisDir']['FieldAppend'] .= ' pattern="' . $CIDRAM['DirValue']['pattern'] . '"';
                }
                foreach (['min', 'max'] as $CIDRAM['ThisDir']['ParamTry']) {
                    if (isset($CIDRAM['DirValue'][$CIDRAM['ThisDir']['ParamTry']])) {
                        $CIDRAM['ThisDir']['FieldAppend'] .= ' ' . $CIDRAM['ThisDir']['ParamTry'] . '="' . $CIDRAM['DirValue'][$CIDRAM['ThisDir']['ParamTry']] . '"';
                    }
                }
                $CIDRAM['ThisDir']['FieldOut'] = sprintf(
                    '<input type="number" name="%1$s" id="%1$s_field" value="%2$s"%3$s />',
                    $CIDRAM['ThisDir']['DirLangKey'],
                    $CIDRAM['Config'][$CIDRAM['CatKey']][$CIDRAM['DirKey']],
                    $CIDRAM['ThisDir']['FieldAppend']
                );
                if (isset($CIDRAM['Config']['Config Defaults'][$CIDRAM['CatKey']][$CIDRAM['DirKey']]['default'])) {
                    $CIDRAM['ThisDir']['Reset'] .= sprintf(
                        'document.getElementById(\'%s_field\').value=%s;',
                        $CIDRAM['ThisDir']['DirLangKey'],
                        $CIDRAM['Config']['Config Defaults'][$CIDRAM['CatKey']][$CIDRAM['DirKey']]['default']
                    );
                }
            } elseif ($CIDRAM['DirValue']['type'] === 'url' || (
                empty($CIDRAM['DirValue']['autocomplete']) && $CIDRAM['DirValue']['type'] === 'string'
            )) {
                $CIDRAM['ThisDir']['FieldOut'] = sprintf(
                    '<textarea name="%1$s" id="%1$s_field" class="half"%2$s%3$s>%4$s</textarea>',
                    $CIDRAM['ThisDir']['DirLangKey'],
                    $CIDRAM['ThisDir']['autocomplete'],
                    $CIDRAM['ThisDir']['Trigger'],
                    $CIDRAM['Config'][$CIDRAM['CatKey']][$CIDRAM['DirKey']]
                );
                if (isset($CIDRAM['Config']['Config Defaults'][$CIDRAM['CatKey']][$CIDRAM['DirKey']]['default'])) {
                    $CIDRAM['ThisDir']['Reset'] .= sprintf(
                        'document.getElementById(\'%s_field\').value=\'%s\';',
                        $CIDRAM['ThisDir']['DirLangKey'],
                        addcslashes($CIDRAM['Config']['Config Defaults'][$CIDRAM['CatKey']][$CIDRAM['DirKey']]['default'], "\n'\"\\")
                    );
                }
            } else {
                $CIDRAM['ThisDir']['FieldAppend'] = $CIDRAM['ThisDir']['autocomplete'] . $CIDRAM['ThisDir']['Trigger'];
                if (isset($CIDRAM['DirValue']['pattern'])) {
                    $CIDRAM['ThisDir']['FieldAppend'] .= ' pattern="' . $CIDRAM['DirValue']['pattern'] . '"';
                } elseif ($CIDRAM['DirValue']['type'] === 'kb') {
                    $CIDRAM['ThisDir']['FieldAppend'] .= ' pattern="^\d+(\.\d+)?\s*(?:[KkMmGgTtPpOoBb]|К|к|М|м|Г|г|Т|т|П|п|Ｋ|ｋ|Ｍ|ｍ|Ｇ|ｇ|Ｔ|ｔ|Ｐ|ｐ|Б|б|Ｂ|ｂ)(?:[OoBb]|Б|б|Ｂ|ｂ)?$"';
                }
                $CIDRAM['ThisDir']['FieldOut'] = sprintf(
                    '<input type="text" name="%1$s" id="%1$s_field" value="%2$s"%3$s />',
                    $CIDRAM['ThisDir']['DirLangKey'],
                    $CIDRAM['Config'][$CIDRAM['CatKey']][$CIDRAM['DirKey']],
                    $CIDRAM['ThisDir']['FieldAppend']
                );
                if (isset($CIDRAM['Config']['Config Defaults'][$CIDRAM['CatKey']][$CIDRAM['DirKey']]['default'])) {
                    $CIDRAM['ThisDir']['Reset'] .= sprintf(
                        'document.getElementById(\'%s_field\').value=\'%s\';',
                        $CIDRAM['ThisDir']['DirLangKey'],
                        addcslashes($CIDRAM['Config']['Config Defaults'][$CIDRAM['CatKey']][$CIDRAM['DirKey']]['default'], "\n'\"\\")
                    );
                }
            }
            $CIDRAM['ThisDir']['FieldOut'] .= $CIDRAM['ThisDir']['Preview'];

            /** Check extension and class requirements. */
            if (!empty($CIDRAM['DirValue']['required'])) {
                $CIDRAM['ThisDir']['FieldOut'] .= '<small>';
                foreach ($CIDRAM['DirValue']['required'] as $CIDRAM['DirValue']['Requirement'] => $CIDRAM['DirValue']['Friendly']) {
                    if (isset($CIDRAM['ReqsLookupCache'][$CIDRAM['DirValue']['Requirement']])) {
                        $CIDRAM['ThisDir']['FieldOut'] .= $CIDRAM['ReqsLookupCache'][$CIDRAM['DirValue']['Requirement']];
                        continue;
                    }
                    if (substr($CIDRAM['DirValue']['Requirement'], 0, 1) === "\\") {
                        $CIDRAM['ReqsLookupCache'][$CIDRAM['DirValue']['Requirement']] = '<br /><span class="txtGn">✔️ ' . sprintf(
                            $CIDRAM['L10N']->getString('label_is_available_class'),
                            $CIDRAM['DirValue']['Friendly']
                        ) . '</span>';
                    } elseif (extension_loaded($CIDRAM['DirValue']['Requirement'])) {
                        $CIDRAM['DirValue']['ReqVersion'] = (new \ReflectionExtension($CIDRAM['DirValue']['Requirement']))->getVersion();
                        $CIDRAM['ReqsLookupCache'][$CIDRAM['DirValue']['Requirement']] = '<br /><span class="txtGn">✔️ ' . sprintf(
                            $CIDRAM['L10N']->getString('label_is_available'),
                            $CIDRAM['DirValue']['Friendly'],
                            $CIDRAM['DirValue']['ReqVersion']
                        ) . '</span>';
                    } else {
                        $CIDRAM['ReqsLookupCache'][$CIDRAM['DirValue']['Requirement']] = '<br /><span class="txtRd">❌ ' . sprintf(
                            $CIDRAM['L10N']->getString('label_is_not_available'),
                            $CIDRAM['DirValue']['Friendly']
                        ) . '</span>';
                    }
                    $CIDRAM['ThisDir']['FieldOut'] .= $CIDRAM['ReqsLookupCache'][$CIDRAM['DirValue']['Requirement']];
                }
                $CIDRAM['ThisDir']['FieldOut'] .= '</small>';
            }

            /** Provide hints, useful for users to better understand the directive at hand. */
            if (!empty($CIDRAM['DirValue']['hints'])) {
                $CIDRAM['ThisDir']['Hints'] = $CIDRAM['ArrayFromL10NDataToArray']($CIDRAM['DirValue']['hints']);
                foreach ($CIDRAM['ThisDir']['Hints'] as $CIDRAM['ThisDir']['HintKey'] => $CIDRAM['ThisDir']['HintValue']) {
                    if (is_int($CIDRAM['ThisDir']['HintKey'])) {
                        $CIDRAM['ThisDir']['FieldOut'] .= sprintf("\n<br /><br />%s", $CIDRAM['ThisDir']['HintValue']);
                        continue;
                    }
                    $CIDRAM['ThisDir']['FieldOut'] .= sprintf(
                        "\n<br /><br /><span class=\"s\">%s</span> %s",
                        $CIDRAM['ThisDir']['HintKey'],
                        $CIDRAM['ThisDir']['HintValue']
                    );
                }
            }

            /** Provide additional information, useful for users to better understand the directive at hand. */
            if (!empty($CIDRAM['DirValue']['See also']) && is_array($CIDRAM['DirValue']['See also'])) {
                $CIDRAM['ThisDir']['FieldOut'] .= sprintf("\n<br /><br />%s<ul>\n", $CIDRAM['L10N']->getString('label_see_also'));
                foreach ($CIDRAM['DirValue']['See also'] as $CIDRAM['DirValue']['Ref key'] => $CIDRAM['DirValue']['Ref link']) {
                    if (isset($CIDRAM['L10N']->Data[$CIDRAM['DirValue']['Ref key']])) {
                        $CIDRAM['DirValue']['Ref key'] = $CIDRAM['L10N']->Data[$CIDRAM['DirValue']['Ref key']];
                    }
                    $CIDRAM['ThisDir']['FieldOut'] .= sprintf(
                        '<li><a dir="ltr" href="%s">%s</a></li>',
                        $CIDRAM['DirValue']['Ref link'],
                        $CIDRAM['DirValue']['Ref key']
                    );
                }
                $CIDRAM['ThisDir']['FieldOut'] .= "\n</ul>";
            }

            /** Reset to defaults. */
            if ($CIDRAM['ThisDir']['Reset'] !== '') {
                if (isset($CIDRAM['DirValue']['preview'], $CIDRAM['DirValue']['default']) && $CIDRAM['DirValue']['preview'] === 'allow_other') {
                    $CIDRAM['ThisDir']['Reset'] .= sprintf(
                        'hideid(\'%1$s_field\');getElementById(\'%1$s_field\').value=\'%2$s\';',
                        $CIDRAM['ThisDir']['DirLangKeyOther'],
                        $CIDRAM['DirValue']['default']
                    );
                }
                $CIDRAM['ThisDir']['FieldOut'] .= sprintf(
                    '<br /><br /><input type="button" class="reset" onclick="javascript:%s" value="↺ %s" />',
                    $CIDRAM['ThisDir']['Reset'],
                    $CIDRAM['L10N']->getString('field_reset')
                );
            }

            /** Finalise configuration row. */
            $CIDRAM['FE']['ConfigFields'] .= $CIDRAM['ParseVars'](
                $CIDRAM['L10N']->Data + $CIDRAM['ThisDir'],
                $CIDRAM['FE']['ConfigRow']
            );
        }
        $CIDRAM['CatKeyFriendly'] = $CIDRAM['L10N']->getString('config_' . $CIDRAM['CatKey'] . '_label') ?: (
            $CIDRAM['FromModuleConfigL10N']('config_' . $CIDRAM['CatKey'] . '_label')
        ) ?: $CIDRAM['CatKey'];
        $CIDRAM['FE']['Indexes'] .= sprintf(
            '<li><span class="comCat">%s</span><ul class="comSub">%s</ul></li>',
            $CIDRAM['CatKeyFriendly'],
            $CIDRAM['CatData']
        );
        $CIDRAM['FE']['ConfigFields'] .= "</table></span>\n";
        $CIDRAM['RegenerateConfig'] .= "\r\n";
    }

    /** Cleanup. */
    unset($CIDRAM['ReqsLookupCache']);

    /** Update the currently active configuration file if any changes were made. */
    if ($CIDRAM['ConfigModified']) {
        $CIDRAM['UpdateSuccess'] = false;
        if (($CIDRAM['Handle'] = fopen($CIDRAM['Vault'] . $CIDRAM['FE']['ActiveConfigFile'], 'wb')) !== false) {
            $CIDRAM['UpdateSuccess'] = fwrite($CIDRAM['Handle'], $CIDRAM['RegenerateConfig']);
            fclose($CIDRAM['Handle']);
            if ($CIDRAM['UpdateSuccess'] !== false && empty($CIDRAM['QueryVars']['updated'])) {
                header('Location: ?cidram-page=config&updated=true');
                die;
            }
        }
        $CIDRAM['FE']['state_msg'] = $CIDRAM['L10N']->getString($CIDRAM['UpdateSuccess'] ? 'response_configuration_updated' : 'response_configuration_update_failed');
    }

    $CIDRAM['FE']['Indexes'] .= '</ul>';

    /** Parse output. */
    $CIDRAM['FE']['FE_Content'] = $CIDRAM['ParseVars'](
        $CIDRAM['L10N']->Data + $CIDRAM['FE'],
        $CIDRAM['ReadFile']($CIDRAM['GetAssetPath']('_config.html'))
    ) . $CIDRAM['MenuToggle'];

    /** Send output. */
    echo $CIDRAM['SendOutput']();
}

/** Cache data. */
elseif ($CIDRAM['QueryVars']['cidram-page'] === 'cache-data' && $CIDRAM['FE']['Permissions'] === 1) {
    /** Page initial prepwork. */
    $CIDRAM['InitialPrepwork']($CIDRAM['L10N']->getString('link_cache_data'), $CIDRAM['L10N']->getString('tip_cache_data'));

    if ($CIDRAM['FE']['ASYNC']) {
        /** Delete a cache entry. */
        if (isset($_POST['do']) && $_POST['do'] === 'delete') {
            if (!empty($_POST['cdi'])) {
                if ($_POST['cdi'] === '__') {
                    $CIDRAM['Cache']->clearCache();
                } else {
                    $CIDRAM['Cache']->deleteEntry($_POST['cdi']);
                }
            } elseif (!empty($_POST['fecdi'])) {
                $CIDRAM['FECacheRemove']($CIDRAM['FE']['Cache'], $CIDRAM['FE']['Rebuild'], $_POST['fecdi']);
            }
        }
    } else {
        /** Append async globals. */
        $CIDRAM['FE']['JS'] .=
            "function cdd(d){window.cdi=d,window.do='delete',$('POST','',['cidram-for" .
            "m-target','cdi','do'],null,function(o){hideid(d+'Container')})}window['c" .
            "idram-form-target']='cache-data';function fecdd(d){window.fecdi=d,window" .
            ".do='delete',$('POST','',['cidram-form-target','fecdi','do'],null,functi" .
            "on(o){hideid(d+'FEContainer')})};";

        /** To be populated by the cache data. */
        $CIDRAM['FE']['CacheData'] = '';

        /** To be populated by the cache data. */
        $CIDRAM['PreferredSource'] = ($CIDRAM['Cache']->Using && $CIDRAM['Cache']->Using !== 'FF') ? $CIDRAM['Cache']->Using : 'cache.dat';

        /** Array of all cache items from all sources. */
        $CIDRAM['CacheArray'] = [
            'fe_assets/frontend.dat' => [],
            $CIDRAM['PreferredSource'] => []
        ];

        /** Get cache index data. */
        foreach ($CIDRAM['Cache']->getAllEntries() as $CIDRAM['ThisCacheName'] => $CIDRAM['ThisCacheItem']) {
            if (isset($CIDRAM['ThisCacheItem']['Time']) && $CIDRAM['ThisCacheItem']['Time'] > 0 && $CIDRAM['ThisCacheItem']['Time'] < $CIDRAM['Now']) {
                continue;
            }
            $CIDRAM['Arrayify']($CIDRAM['ThisCacheItem']);
            $CIDRAM['CacheArray'][$CIDRAM['PreferredSource']][$CIDRAM['ThisCacheName']] = $CIDRAM['ThisCacheItem'];
        }
        unset($CIDRAM['ThisCacheName'], $CIDRAM['ThisCacheItem'], $CIDRAM['PreferredSource']);

        /** Get front-end cache data. */
        if ($CIDRAM['CacheIndexData'] = $CIDRAM['FE']['Cache']) {
            foreach (explode("\n", $CIDRAM['CacheIndexData']) as $CIDRAM['CacheIndexData']) {
                if (!$CIDRAM['CacheIndexData']) {
                    continue;
                }
                $CIDRAM['CacheIndexData'] = explode(',', $CIDRAM['CacheIndexData']);
                $CIDRAM['ThisCacheEntryName'] = base64_decode($CIDRAM['CacheIndexData'][0]);
                if (isset($CIDRAM['CacheIndexData'][1])) {
                    $CIDRAM['CacheIndexData'][1] = base64_decode($CIDRAM['CacheIndexData'][1]);
                }
                $CIDRAM['CacheIndexData'][2] = ($CIDRAM['CacheIndexData'][2] >= 0 ? $CIDRAM['TimeFormat'](
                    $CIDRAM['CacheIndexData'][2],
                    $CIDRAM['Config']['general']['timeFormat']
                ) : $CIDRAM['L10N']->getString('label_never'));
                $CIDRAM['Arrayify']($CIDRAM['CacheIndexData'][1]);
                $CIDRAM['CacheArray']['fe_assets/frontend.dat'][$CIDRAM['ThisCacheEntryName']] = $CIDRAM['CacheIndexData'][1];
                $CIDRAM['CacheArray']['fe_assets/frontend.dat'][$CIDRAM['ThisCacheEntryName']][
                    $CIDRAM['L10N']->getString('label_expires') ?: 'Expires'
                ] = $CIDRAM['CacheIndexData'][2];
            }
        }
        unset($CIDRAM['ThisCacheEntryName'], $CIDRAM['CacheIndexData']);

        /** Begin processing all cache items from all sources. */
        foreach ($CIDRAM['CacheArray'] as $CIDRAM['CacheSourceName'] => $CIDRAM['CacheSourceData']) {
            if (empty($CIDRAM['CacheSourceData'])) {
                continue;
            }
            $CIDRAM['FE']['CacheData'] .= '<div class="ng1" id="__' . ($CIDRAM['CacheSourceName'] === 'fe_assets/frontend.dat' ? 'FE' : '') . 'Container"><span class="s">' . $CIDRAM['CacheSourceName'] . ' – (<span style="cursor:pointer" onclick="javascript:' . (
                $CIDRAM['CacheSourceName'] === 'fe_assets/frontend.dat' ? 'fecdd' : 'cdd'
            ) . '(\'__\')"><code class="s">' . $CIDRAM['L10N']->getString('field_clear_all') . '</code></span>)</span><br /><br /><ul class="pieul">' . $CIDRAM['ArrayToClickableList'](
                $CIDRAM['CacheSourceData'],
                ($CIDRAM['CacheSourceName'] === 'fe_assets/frontend.dat' ? 'fecdd' : 'cdd'),
                0,
                $CIDRAM['CacheSourceName']
            ) . '</ul></div>';
        }
        unset($CIDRAM['CacheSourceData'], $CIDRAM['CacheSourceName'], $CIDRAM['CacheArray']);

        /** Cache is empty. */
        if (!$CIDRAM['FE']['CacheData']) {
            $CIDRAM['FE']['CacheData'] = '<div class="ng1"><span class="s">' . $CIDRAM['L10N']->getString('state_cache_is_empty') . '</span></div>';
        }

        /** Parse output. */
        $CIDRAM['FE']['FE_Content'] = $CIDRAM['ParseVars'](
            $CIDRAM['L10N']->Data + $CIDRAM['FE'],
            $CIDRAM['ReadFile']($CIDRAM['GetAssetPath']('_cache.html'))
        ) . $CIDRAM['MenuToggle'];

        /** Send output. */
        echo $CIDRAM['SendOutput']();
    }
}

/** Updates. */
elseif ($CIDRAM['QueryVars']['cidram-page'] === 'updates' && ($CIDRAM['FE']['Permissions'] === 1 || ($CIDRAM['FE']['Permissions'] === 3 && $CIDRAM['FE']['CronMode'] !== ''))) {
    /** Include major version notice (if relevant). */
    if ($CIDRAM['MajorVersionNotice']) {
        $CIDRAM['FE']['state_msg'] .= $CIDRAM['MajorVersionNotice'] . '<hr />';
    }

    $CIDRAM['FE']['UpdatesFormTarget'] = 'cidram-page=updates';
    $CIDRAM['FE']['UpdatesFormTargetControls'] = '';
    $CIDRAM['StateModified'] = false;
    $CIDRAM['FilterSwitch'](
        ['hide-non-outdated', 'hide-unused', 'sort-by-name', 'descending-order'],
        isset($_POST['FilterSelector']) ? $_POST['FilterSelector'] : '',
        $CIDRAM['StateModified'],
        $CIDRAM['FE']['UpdatesFormTarget'],
        $CIDRAM['FE']['UpdatesFormTargetControls']
    );
    if ($CIDRAM['StateModified']) {
        header('Location: ?' . $CIDRAM['FE']['UpdatesFormTarget']);
        die;
    }
    unset($CIDRAM['StateModified']);

    /** Useful for avoiding excessive IO operations when dealing with components. */
    $CIDRAM['Updater-IO'] = new \Maikuolan\Common\DelayedIO();

    /** Useful for checking dependency constraints. */
    $CIDRAM['Operation'] = new \Maikuolan\Common\Operation();

    /** Updates page form boilerplate. */
    $CIDRAM['CFBoilerplate'] =
        '<form action="?%s" method="POST" style="display:inline">' .
        '<input name="cidram-form-target" type="hidden" value="updates" />' .
        '<input name="do" type="hidden" value="%s" />';

    /** Prepare components metadata working array. */
    $CIDRAM['Components'] = [
        'Meta' => [],
        'RemoteMeta' => [],
        'Remotes' => [],
        'Installed Versions' => ['PHP' => PHP_VERSION],
        'Available Versions' => [],
        'Install Together' => [],
        'Outdated' => [],
        'OutdatedSignatureFiles' => [],
        'Verify' => [],
        'Repairable' => [],
        'Out' => []
    ];

    /** Fetch components lists. */
    $CIDRAM['FetchComponentsLists']($CIDRAM['Vault'], $CIDRAM['Components']['Meta']);

    /** Check versions beforehand (needed for dependency checks). */
    $CIDRAM['CheckVersions']($CIDRAM['Components']['Meta'], $CIDRAM['Components']['Installed Versions']);

    $CIDRAM['FE']['Indexes'] = [];

    /** Component aliases (needed to discern some dependencies). */
    $CIDRAM['Components']['Installed Versions']['CIDRAM Core'] = &$CIDRAM['Components']['Installed Versions']['CIDRAM'];
    $CIDRAM['Components']['Available Versions']['CIDRAM Core'] = &$CIDRAM['Components']['Available Versions']['CIDRAM'];
    $CIDRAM['Components']['Installed Versions']['CIDRAM Front-End'] = &$CIDRAM['Components']['Installed Versions']['CIDRAM'];
    $CIDRAM['Components']['Available Versions']['CIDRAM Front-End'] = &$CIDRAM['Components']['Available Versions']['CIDRAM'];
    $CIDRAM['Components']['Installed Versions']['Common Classes Package'] = &$CIDRAM['Components']['Installed Versions']['CIDRAM'];
    $CIDRAM['Components']['Available Versions']['Common Classes Package'] = &$CIDRAM['Components']['Available Versions']['CIDRAM'];

    /** Fetch available versions beforehand (needed for dependency checks). */
    foreach ($CIDRAM['Components']['Meta'] as $CIDRAM['Components']['Key'] => &$CIDRAM['Components']['ThisComponent']) {
        if (empty($CIDRAM['Components']['ThisComponent']['Remote'])) {
            continue;
        }
        if (!isset($CIDRAM['Components']['Remotes'][$CIDRAM['Components']['ThisComponent']['Remote']])) {
            $CIDRAM['Components']['Remotes'][$CIDRAM['Components']['ThisComponent']['Remote']] = '';
            $CIDRAM['FetchRemote-ContextFree'](
                $CIDRAM['Components']['Remotes'][$CIDRAM['Components']['ThisComponent']['Remote']],
                $CIDRAM['Components']['ThisComponent']['Remote']
            );
            if (($CIDRAM['Components']['Remotes'][$CIDRAM['Components']['ThisComponent']['Remote']] = $CIDRAM['ExtractPage'](
                $CIDRAM['Components']['Remotes'][$CIDRAM['Components']['ThisComponent']['Remote']]
            )) !== '') {
                $CIDRAM['Components']['TempRemoteMeta'] = [];
                $CIDRAM['YAML']->process(
                    $CIDRAM['Components']['Remotes'][$CIDRAM['Components']['ThisComponent']['Remote']],
                    $CIDRAM['Components']['TempRemoteMeta']
                );
                $CIDRAM['Components']['Remotes'][$CIDRAM['Components']['ThisComponent']['Remote']] = $CIDRAM['Components']['TempRemoteMeta'];
                $CIDRAM['CheckVersions'](
                    $CIDRAM['Components']['Remotes'][$CIDRAM['Components']['ThisComponent']['Remote']],
                    $CIDRAM['Components']['Available Versions']
                );
            } else {
                $CIDRAM['Components']['Remotes'][$CIDRAM['Components']['ThisComponent']['Remote']] = [];
            }
        }
        if (isset($CIDRAM['Components']['Remotes'][$CIDRAM['Components']['ThisComponent']['Remote']][$CIDRAM['Components']['Key']])) {
            $CIDRAM['Components']['RemoteMeta'][$CIDRAM['Components']['Key']] =
                &$CIDRAM['Components']['Remotes'][$CIDRAM['Components']['ThisComponent']['Remote']][$CIDRAM['Components']['Key']];
        } else {
            $CIDRAM['Components']['RemoteMeta'][$CIDRAM['Components']['Key']] = [];
        }
    }
    unset($CIDRAM['Components']['TempRemoteMeta']);

    /** A form has been submitted. */
    if (empty($CIDRAM['Alternate']) && $CIDRAM['FE']['FormTarget'] === 'updates' && !empty($_POST['do']) && !empty($_POST['ID'])) {
        /** Trigger updates handler. */
        $CIDRAM['UpdatesHandler']($_POST['do'], $_POST['ID']);

        /** Trigger signatures update log event. */
        if (!empty($CIDRAM['SignaturesUpdateEvent'])) {
            $CIDRAM['SignaturesUpdateEvent'] = sprintf(
                $CIDRAM['L10N']->getString('response_signatures_updated'),
                $CIDRAM['TimeFormat'](
                    $CIDRAM['SignaturesUpdateEvent'],
                    $CIDRAM['Config']['general']['timeFormat']
                )
            );
            $CIDRAM['Events']->fireEvent('writeToSignaturesUpdateEventLog', $CIDRAM['SignaturesUpdateEvent']);
        }

        /** Check again, since the information might've been updated. */
        $CIDRAM['CheckVersions']($CIDRAM['Components']['Meta'], $CIDRAM['Components']['Installed Versions']);
    }

    /** Page initial prepwork. */
    $CIDRAM['InitialPrepwork']($CIDRAM['L10N']->getString('link_updates'), $CIDRAM['L10N']->getString('tip_updates'));

    $CIDRAM['FE']['UpdatesRow'] = $CIDRAM['ReadFile']($CIDRAM['GetAssetPath']('_updates_row.html'));

    /** Prepare installed component metadata and options for display. */
    foreach ($CIDRAM['Components']['Meta'] as $CIDRAM['Components']['Key'] => &$CIDRAM['Components']['ThisComponent']) {
        /** Skip if component is malformed. */
        if (empty($CIDRAM['Components']['ThisComponent']['Name']) && !$CIDRAM['L10N']->getString('Name ' . $CIDRAM['Components']['Key'])) {
            $CIDRAM['Components']['ThisComponent'] = '';
            continue;
        }

        /** Execute any necessary preload instructions. */
        if (!empty($CIDRAM['Components']['ThisComponent']['When Checking'])) {
            $CIDRAM['FE_Executor']($CIDRAM['Components']['ThisComponent']['When Checking']);
        }

        /** Determine whether all dependency constraints have been met. */
        $CIDRAM['CheckConstraints']($CIDRAM['Components']['ThisComponent'], false, $CIDRAM['Components']['Key']);

        $CIDRAM['PrepareName']($CIDRAM['Components']['ThisComponent'], $CIDRAM['Components']['Key']);
        $CIDRAM['PrepareExtendedDescription']($CIDRAM['Components']['ThisComponent'], $CIDRAM['Components']['Key']);
        $CIDRAM['Components']['ThisComponent']['ID'] = $CIDRAM['Components']['Key'];
        $CIDRAM['Components']['ThisComponent']['Options'] = '';
        $CIDRAM['Components']['ThisComponent']['StatusOptions'] = '';
        $CIDRAM['Components']['ThisComponent']['StatClass'] = '';
        if (empty($CIDRAM['Components']['ThisComponent']['Version'])) {
            if (empty($CIDRAM['Components']['ThisComponent']['Files']['To'])) {
                $CIDRAM['Components']['ThisComponent']['RowClass'] = 'h2';
                $CIDRAM['Components']['ThisComponent']['Version'] = $CIDRAM['L10N']->getString('response_updates_not_installed');
                $CIDRAM['Components']['ThisComponent']['StatClass'] = 'txtRd';
                $CIDRAM['Components']['ThisComponent']['StatusOptions'] = $CIDRAM['L10N']->getString('response_updates_not_installed');
            } else {
                $CIDRAM['Components']['ThisComponent']['Version'] = $CIDRAM['L10N']->getString('response_updates_unable_to_determine');
                $CIDRAM['Components']['ThisComponent']['StatClass'] = 's';
            }
        }
        if (!empty($CIDRAM['Components']['ThisComponent']['Files'])) {
            $CIDRAM['Arrayify']($CIDRAM['Components']['ThisComponent']['Files']);
            $CIDRAM['Arrayify']($CIDRAM['Components']['ThisComponent']['Files']['To']);
            $CIDRAM['Arrayify']($CIDRAM['Components']['ThisComponent']['Files']['From']);
            if (isset($CIDRAM['Components']['ThisComponent']['Files']['Checksum'])) {
                $CIDRAM['Arrayify']($CIDRAM['Components']['ThisComponent']['Files']['Checksum']);
            }
        }
        if (isset($CIDRAM['Components']['Available Versions'][$CIDRAM['Components']['Key']])) {
            $CIDRAM['Components']['ThisComponent']['Latest'] = $CIDRAM['Components']['Available Versions'][$CIDRAM['Components']['Key']];
        } else {
            $CIDRAM['Components']['ThisComponent']['Latest'] = $CIDRAM['L10N']->getString('response_updates_unable_to_determine');
            $CIDRAM['Components']['ThisComponent']['StatClass'] = 's';
        }

        /** Guard against component metadata missing at the upstream. */
        if (!isset($CIDRAM['Components']['RemoteMeta'][$CIDRAM['Components']['Key']])) {
            $CIDRAM['Components']['RemoteMeta'][$CIDRAM['Components']['Key']] = [];
        }

        /** Determine whether all dependency constraints have been met. */
        if (!isset($CIDRAM['Components']['RemoteMeta'][$CIDRAM['Components']['Key']]['Dependency Status'])) {
            $CIDRAM['CheckConstraints']($CIDRAM['Components']['RemoteMeta'][$CIDRAM['Components']['Key']], true);
        }
        $CIDRAM['Components']['ThisComponent']['Remote Dependency Status'] =
            $CIDRAM['Components']['RemoteMeta'][$CIDRAM['Components']['Key']]['Dependency Status'];
        $CIDRAM['Components']['ThisComponent']['Remote All Constraints Met'] =
            $CIDRAM['Components']['RemoteMeta'][$CIDRAM['Components']['Key']]['All Constraints Met'];
        if (isset($CIDRAM['Components']['RemoteMeta'][$CIDRAM['Components']['Key']]['Install Together'])) {
            if (!isset($CIDRAM['Components']['Install Together'][$CIDRAM['Components']['Key']])) {
                $CIDRAM['Components']['Install Together'][$CIDRAM['Components']['Key']] = [];
            }
            $CIDRAM['Components']['Install Together'][$CIDRAM['Components']['Key']] = array_merge(
                $CIDRAM['Components']['Install Together'][$CIDRAM['Components']['Key']],
                $CIDRAM['Components']['RemoteMeta'][$CIDRAM['Components']['Key']]['Install Together']
            );
        }

        if (!empty($CIDRAM['Components']['RemoteMeta'][$CIDRAM['Components']['Key']]['Name'])) {
            $CIDRAM['Components']['ThisComponent']['Name'] =
                $CIDRAM['Components']['RemoteMeta'][$CIDRAM['Components']['Key']]['Name'];
            $CIDRAM['PrepareName']($CIDRAM['Components']['ThisComponent'], $CIDRAM['Components']['Key']);
        }
        if (
            empty($CIDRAM['Components']['ThisComponent']['False Positive Risk']) &&
            !empty($CIDRAM['Components']['RemoteMeta'][$CIDRAM['Components']['Key']]['False Positive Risk'])
        ) {
            $CIDRAM['Components']['ThisComponent']['False Positive Risk'] =
                $CIDRAM['Components']['RemoteMeta'][$CIDRAM['Components']['Key']]['False Positive Risk'];
        }
        if (
            empty($CIDRAM['Components']['ThisComponent']['Used with']) &&
            !empty($CIDRAM['Components']['RemoteMeta'][$CIDRAM['Components']['Key']]['Used with'])
        ) {
            $CIDRAM['Components']['ThisComponent']['Used with'] = $CIDRAM['Components']['RemoteMeta'][$CIDRAM['Components']['Key']]['Used with'];
        }
        if (!empty($CIDRAM['Components']['RemoteMeta'][$CIDRAM['Components']['Key']]['Extended Description'])) {
            $CIDRAM['Components']['ThisComponent']['Extended Description'] =
                $CIDRAM['Components']['RemoteMeta'][$CIDRAM['Components']['Key']]['Extended Description'];
            $CIDRAM['PrepareExtendedDescription']($CIDRAM['Components']['ThisComponent'], $CIDRAM['Components']['Key']);
        }
        if (!$CIDRAM['Components']['ThisComponent']['StatClass']) {
            if (!empty($CIDRAM['Components']['ThisComponent']['Latest']) && $CIDRAM['Operation']->singleCompare(
                $CIDRAM['Components']['ThisComponent']['Version'],
                '<' . $CIDRAM['Components']['ThisComponent']['Latest']
            )) {
                $CIDRAM['Components']['ThisComponent']['Outdated'] = true;
                $CIDRAM['Components']['Outdated'][] = $CIDRAM['Components']['Key'];
                if ((
                    !empty($CIDRAM['Components']['ThisComponent']['Used with']) &&
                    $CIDRAM['Has']($CIDRAM['Components']['ThisComponent']['Used with'], ['ipv4', 'ipv6'])
                ) || (
                    !empty($CIDRAM['Components']['ThisComponent']['Extended Description']) &&
                    strpos($CIDRAM['Components']['ThisComponent']['Extended Description'], 'signatures-&gt;ipv') !== false
                )) {
                    $CIDRAM['Components']['OutdatedSignatureFiles'][] = $CIDRAM['Components']['Key'];
                }
                $CIDRAM['Components']['ThisComponent']['RowClass'] = 'r';
                $CIDRAM['Components']['ThisComponent']['StatClass'] = 'txtRd';
                $CIDRAM['Components']['ThisComponent']['StatusOptions'] = $CIDRAM['L10N']->getString('response_updates_outdated');
                if (!empty($CIDRAM['Components']['ThisComponent']['Remote All Constraints Met'])) {
                    $CIDRAM['Components']['ThisComponent']['Options'] .=
                        '<option value="update-component">' . $CIDRAM['L10N']->getString('field_update') . '</option>';
                }
            } else {
                $CIDRAM['Components']['ThisComponent']['StatClass'] = 'txtGn';
                $CIDRAM['Components']['ThisComponent']['StatusOptions'] = $CIDRAM['L10N']->getString('response_updates_already_up_to_date');
                if (isset(
                    $CIDRAM['Components']['RemoteMeta'][$CIDRAM['Components']['Key']]['Files']['To'],
                    $CIDRAM['Components']['RemoteMeta'][$CIDRAM['Components']['Key']]['Files']['From'],
                    $CIDRAM['Components']['RemoteMeta'][$CIDRAM['Components']['Key']]['Files']['Checksum'],
                    $CIDRAM['Components']['ThisComponent']['Files']['To'],
                    $CIDRAM['Components']['ThisComponent']['Remote']
                ) && (
                    $CIDRAM['Components']['RemoteMeta'][$CIDRAM['Components']['Key']]['Files']['To'] === $CIDRAM['Components']['ThisComponent']['Files']['To']
                )) {
                    $CIDRAM['Components']['Repairable'][] = $CIDRAM['Components']['Key'];
                    $CIDRAM['Components']['ThisComponent']['Options'] .= '<option value="repair-component">' . $CIDRAM['L10N']->getString('field_repair') . '</option>';
                }
            }
        }
        if (!empty($CIDRAM['Components']['ThisComponent']['Files']['To'])) {
            $CIDRAM['Activable'] = $CIDRAM['IsActivable']($CIDRAM['Components']['ThisComponent']);
            $CIDRAM['Components']['ThisIsInUse'] = $CIDRAM['IsInUse']($CIDRAM['Components']['ThisComponent']);
            if (preg_match(
                '~^(?:theme/' . preg_quote($CIDRAM['Config']['template_data']['theme']) . '|CIDRAM.*|Common Classes Package)$~i',
                $CIDRAM['Components']['Key']
            ) || $CIDRAM['Components']['ThisIsInUse'] !== 0) {
                if ($CIDRAM['Components']['ThisIsInUse'] === -1) {
                    $CIDRAM['AppendToString'](
                        $CIDRAM['Components']['ThisComponent']['StatusOptions'],
                        '<hr />',
                        '<div class="txtOe">' . $CIDRAM['L10N']->getString('state_component_is_partially_active') . '</div>'
                    );
                } else {
                    $CIDRAM['AppendToString'](
                        $CIDRAM['Components']['ThisComponent']['StatusOptions'],
                        '<hr />',
                        '<div class="txtGn">' . $CIDRAM['L10N']->getString('state_component_is_active') . '</div>'
                    );
                }
                if ($CIDRAM['Activable']) {
                    $CIDRAM['Components']['ThisComponent']['Options'] .= '<option value="deactivate-component">' . $CIDRAM['L10N']->getString('field_deactivate') . '</option>';
                    if (!empty($CIDRAM['Components']['ThisComponent']['Uninstallable'])) {
                        $CIDRAM['Components']['ThisComponent']['Options'] .=
                            '<option value="deactivate-and-uninstall-component">' .
                            $CIDRAM['L10N']->getString('field_deactivate') . ' + ' . $CIDRAM['L10N']->getString('field_uninstall') .
                            '</option>';
                    }
                }
            } else {
                if ($CIDRAM['Activable']) {
                    $CIDRAM['Components']['ThisComponent']['Options'] .=
                        '<option value="activate-component">' . $CIDRAM['L10N']->getString('field_activate') . '</option>';
                }
                if (!empty($CIDRAM['Components']['ThisComponent']['Uninstallable'])) {
                    $CIDRAM['Components']['ThisComponent']['Options'] .=
                        '<option value="uninstall-component">' . $CIDRAM['L10N']->getString('field_uninstall') . '</option>';
                }
                if (
                    !empty($CIDRAM['Components']['ThisComponent']['Provisional']) ||
                    ($CIDRAM['Config']['general']['lang_override'] && preg_match('~^L10N:~', $CIDRAM['Components']['ThisComponent']['Name']))
                ) {
                    $CIDRAM['AppendToString'](
                        $CIDRAM['Components']['ThisComponent']['StatusOptions'],
                        '<hr />',
                        '<div class="txtOe">' . $CIDRAM['L10N']->getString('state_component_is_provisional') . '</div>'
                    );
                } else {
                    $CIDRAM['AppendToString'](
                        $CIDRAM['Components']['ThisComponent']['StatusOptions'],
                        '<hr />',
                        '<div class="txtRd">' . $CIDRAM['L10N']->getString('state_component_is_inactive') . '</div>'
                    );
                }
            }
        }
        if (
            empty($CIDRAM['Components']['ThisComponent']['Files']['To']) &&
            !empty($CIDRAM['Components']['RemoteMeta'][$CIDRAM['Components']['Key']]['Files']['To'])
        ) {
            if (!empty($CIDRAM['Components']['ThisComponent']['Remote All Constraints Met'])) {
                $CIDRAM['Components']['ThisComponent']['Options'] .= '<option value="update-component">' . $CIDRAM['L10N']->getString('field_install') . '</option>';
                if ($CIDRAM['IsActivable']($CIDRAM['Components']['ThisComponent'])) {
                    $CIDRAM['Components']['ThisComponent']['Options'] .=
                        '<option value="update-and-activate-component">' .
                        $CIDRAM['L10N']->getString('field_install') . ' + ' . $CIDRAM['L10N']->getString('field_activate') .
                        '</option>';
                }
            }
        }
        $CIDRAM['Components']['ThisComponent']['VersionSize'] = 0;
        if (
            !empty($CIDRAM['Components']['ThisComponent']['Files']['To']) &&
            is_array($CIDRAM['Components']['ThisComponent']['Files']['To'])
        ) {
            $CIDRAM['Components']['ThisComponent']['Options'] .=
                '<option value="verify-component" selected>' . $CIDRAM['L10N']->getString('field_verify') . '</option>';
            $CIDRAM['Components']['Verify'][] = $CIDRAM['Components']['Key'];
        }
        if (
            !empty($CIDRAM['Components']['ThisComponent']['Files']['Checksum']) &&
            is_array($CIDRAM['Components']['ThisComponent']['Files']['Checksum'])
        ) {
            array_walk($CIDRAM['Components']['ThisComponent']['Files']['Checksum'], function ($Checksum) use (&$CIDRAM) {
                if (!empty($Checksum) && ($Delimiter = strpos($Checksum, ':')) !== false) {
                    $CIDRAM['Components']['ThisComponent']['VersionSize'] += (int)substr($Checksum, $Delimiter + 1);
                }
            });
        }
        if ($CIDRAM['Components']['ThisComponent']['VersionSize'] > 0) {
            $CIDRAM['FormatFilesize']($CIDRAM['Components']['ThisComponent']['VersionSize']);
            $CIDRAM['Components']['ThisComponent']['VersionSize'] = sprintf(
                '<br />%s %s',
                $CIDRAM['L10N']->getString('field_size'),
                $CIDRAM['Components']['ThisComponent']['VersionSize']
            );
        } else {
            $CIDRAM['Components']['ThisComponent']['VersionSize'] = '';
        }
        $CIDRAM['Components']['ThisComponent']['LatestSize'] = 0;
        if (
            !empty($CIDRAM['Components']['RemoteMeta'][$CIDRAM['Components']['Key']]['Files']['Checksum']) &&
            is_array($CIDRAM['Components']['RemoteMeta'][$CIDRAM['Components']['Key']]['Files']['Checksum'])
        ) {
            array_walk($CIDRAM['Components']['RemoteMeta'][$CIDRAM['Components']['Key']]['Files']['Checksum'], function ($Checksum) use (&$CIDRAM) {
                if (!empty($Checksum) && ($Delimiter = strpos($Checksum, ':')) !== false) {
                    $CIDRAM['Components']['ThisComponent']['LatestSize'] += (int)substr($Checksum, $Delimiter + 1);
                }
            });
        }
        if ($CIDRAM['Components']['ThisComponent']['LatestSize'] > 0) {
            $CIDRAM['FormatFilesize']($CIDRAM['Components']['ThisComponent']['LatestSize']);
            $CIDRAM['Components']['ThisComponent']['LatestSize'] = sprintf(
                '<br />%s %s',
                $CIDRAM['L10N']->getString('field_size'),
                $CIDRAM['Components']['ThisComponent']['LatestSize']
            );
        } else {
            $CIDRAM['Components']['ThisComponent']['LatestSize'] = '';
        }
        if (!empty($CIDRAM['Components']['ThisComponent']['Options'])) {
            $CIDRAM['AppendToString'](
                $CIDRAM['Components']['ThisComponent']['StatusOptions'],
                '<hr />',
                '<select name="do" class="auto">' . $CIDRAM['Components']['ThisComponent']['Options'] .
                '</select><input type="submit" value="' . $CIDRAM['L10N']->getString('field_ok') . '" class="auto" />'
            );
            $CIDRAM['Components']['ThisComponent']['Options'] = '';
        }

        /** Append changelog. */
        $CIDRAM['Components']['ThisComponent']['Changelog'] = empty(
            $CIDRAM['Components']['ThisComponent']['Changelog']
        ) ? '' : '<br /><a href="' . $CIDRAM['Components']['ThisComponent']['Changelog'] . '" rel="noopener external">Changelog</a>';

        /** Append filename. */
        $CIDRAM['Components']['ThisComponent']['Filename'] = (
            empty($CIDRAM['Components']['ThisComponent']['Files']['To']) ||
            count($CIDRAM['Components']['ThisComponent']['Files']['To']) !== 1
        ) ? '' : '<br />' . $CIDRAM['L10N']->getString('field_filename') . ' ' . $CIDRAM['Components']['ThisComponent']['Files']['To'][0];

        /** Finalise entry. */
        if (
            !($CIDRAM['FE']['hide-non-outdated'] && empty($CIDRAM['Components']['ThisComponent']['Outdated'])) &&
            !($CIDRAM['FE']['hide-unused'] && empty($CIDRAM['Components']['ThisComponent']['Files']['To']))
        ) {
            if (empty($CIDRAM['Components']['ThisComponent']['RowClass'])) {
                $CIDRAM['Components']['ThisComponent']['RowClass'] = 'h1';
            }
            if (!empty($CIDRAM['FE']['sort-by-name']) && !empty($CIDRAM['Components']['ThisComponent']['Name'])) {
                $CIDRAM['Components']['ThisComponent']['SortKey'] = $CIDRAM['Components']['ThisComponent']['Name'];
            } else {
                $CIDRAM['Components']['ThisComponent']['SortKey'] = $CIDRAM['Components']['Key'];
            }
            $CIDRAM['FE']['Indexes'][$CIDRAM['Components']['ThisComponent']['SortKey']] = sprintf(
                "<a href=\"#%s\">%s</a><br /><br />\n      ",
                $CIDRAM['Components']['ThisComponent']['ID'],
                $CIDRAM['Components']['ThisComponent']['Name']
            );
            $CIDRAM['Components']['Out'][$CIDRAM['Components']['ThisComponent']['SortKey']] = $CIDRAM['ParseVars'](
                $CIDRAM['L10N']->Data + $CIDRAM['ArrayFlatten']($CIDRAM['Components']['ThisComponent']) + $CIDRAM['ArrayFlatten']($CIDRAM['FE']),
                $CIDRAM['FE']['UpdatesRow']
            );
        }
    }

    /** Update request via Cronable. */
    if (!empty($CIDRAM['Alternate']) && (
        (
            $CIDRAM['FE']['CronMode'] === 'Signatures' &&
            !empty($CIDRAM['Components']['OutdatedSignatureFiles']) &&
            ($CIDRAM['FE']['BuildUse'] = 'OutdatedSignatureFiles')
        ) || (
            $CIDRAM['FE']['CronMode'] !== '' &&
            $CIDRAM['FE']['CronMode'] !== 'Signatures' &&
            !empty($CIDRAM['Components']['Outdated']) &&
            ($CIDRAM['FE']['BuildUse'] = 'Outdated')
        )
    )) {
        /** Fetch dependency installation triggers. */
        $CIDRAM['Components']['Build'] = $CIDRAM['Components'][$CIDRAM['FE']['BuildUse']];
        foreach ($CIDRAM['Components'][$CIDRAM['FE']['BuildUse']] as $CIDRAM['Components']['Key']) {
            if (isset($CIDRAM['Components']['Install Together'][$CIDRAM['Components']['Key']])) {
                $CIDRAM['Components']['Build'] = array_merge(
                    $CIDRAM['Components']['Build'],
                    $CIDRAM['Components']['Install Together'][$CIDRAM['Components']['Key']]
                );
            }
        }
        $CIDRAM['Components'][$CIDRAM['FE']['BuildUse']] = array_unique($CIDRAM['Components']['Build']);

        /** Trigger updates handler. */
        $CIDRAM['UpdatesHandler']('update-component', $CIDRAM['Components'][$CIDRAM['FE']['BuildUse']]);

        /** Trigger signatures update log event. */
        if (!empty($CIDRAM['SignaturesUpdateEvent'])) {
            $CIDRAM['SignaturesUpdateEvent'] = sprintf(
                $CIDRAM['L10N']->getString('response_signatures_updated'),
                $CIDRAM['TimeFormat'](
                    $CIDRAM['SignaturesUpdateEvent'],
                    $CIDRAM['Config']['general']['timeFormat']
                )
            );
            $CIDRAM['Events']->fireEvent('writeToSignaturesUpdateEventLog', $CIDRAM['SignaturesUpdateEvent']);
        }

        /** Check again, since the information might've been updated. */
        $CIDRAM['CheckVersions']($CIDRAM['Components']['Meta'], $CIDRAM['Components']['Installed Versions']);
    }

    /** Prepare newly found component metadata and options for display. */
    foreach ($CIDRAM['Components']['Remotes'] as &$CIDRAM['Components']['TheseComponents']) {
        foreach ($CIDRAM['Components']['TheseComponents'] as $CIDRAM['Components']['Key'] => &$CIDRAM['Components']['ThisComponent']) {
            if (
                isset($CIDRAM['Components']['Meta'][$CIDRAM['Components']['Key']]) ||
                empty($CIDRAM['Components']['ThisComponent']['Remote']) ||
                empty($CIDRAM['Components']['ThisComponent']['Version']) ||
                empty($CIDRAM['Components']['ThisComponent']['Files']['From']) ||
                empty($CIDRAM['Components']['ThisComponent']['Files']['To']) ||
                empty($CIDRAM['Components']['ThisComponent']['Reannotate']) ||
                !$CIDRAM['Traverse']($CIDRAM['Components']['ThisComponent']['Reannotate']) ||
                !file_exists($CIDRAM['Vault'] . $CIDRAM['Components']['ThisComponent']['Reannotate'])
            ) {
                continue;
            }
            $CIDRAM['FetchRemote']();
            $CIDRAM['Components']['RemoteDataThis'] = [];
            if (!preg_match(
                "~(\n" . preg_quote($CIDRAM['Components']['Key']) . ":?)(\n [^\n]*)*\n~i",
                $CIDRAM['Components']['ThisComponent']['RemoteData'],
                $CIDRAM['Components']['RemoteDataThis']
            )) {
                continue;
            }
            $CIDRAM['Components']['RemoteDataThis'] = preg_replace(
                ["/\n Files:(\n  [^\n]*)*\n/i", "/\n Version: [^\n]*\n/i"],
                "\n",
                $CIDRAM['Components']['RemoteDataThis'][0]
            );
            $CIDRAM['Components']['ReannotateThis'] = $CIDRAM['Updater-IO']->readFile(
                $CIDRAM['Vault'] . $CIDRAM['Components']['ThisComponent']['Reannotate']
            );
            if (!$CIDRAM['ExtractPage']($CIDRAM['Components']['ReannotateThis'])) {
                continue;
            }
            $CIDRAM['ThisOffset'] = [0 => []];
            $CIDRAM['ThisOffset'][1] = preg_match(
                '/(\n+)$/',
                $CIDRAM['Components']['ReannotateThis'],
                $CIDRAM['ThisOffset'][0]
            );
            $CIDRAM['ThisOffset'] = strlen($CIDRAM['ThisOffset'][0][0]) * -1;
            $CIDRAM['Components']['ReannotateThis'] = substr(
                $CIDRAM['Components']['ReannotateThis'],
                0,
                $CIDRAM['ThisOffset']
            ) . $CIDRAM['Components']['RemoteDataThis'] . "\n";
            $CIDRAM['Updater-IO']->writeFile(
                $CIDRAM['Vault'] . $CIDRAM['Components']['ThisComponent']['Reannotate'],
                $CIDRAM['Components']['ReannotateThis']
            );

            /** Determine whether all dependency constraints have been met. */
            $CIDRAM['CheckConstraints']($CIDRAM['Components']['ThisComponent'], true);
            $CIDRAM['Components']['ThisComponent']['Remote Dependency Status'] = $CIDRAM['Components']['ThisComponent']['Dependency Status'];
            $CIDRAM['Components']['ThisComponent']['Dependency Status'] = '';
            $CIDRAM['Components']['ThisComponent']['Remote All Constraints Met'] = $CIDRAM['Components']['ThisComponent']['All Constraints Met'];
            if (isset($CIDRAM['Components']['ThisComponent']['Install Together'])) {
                if (!isset($CIDRAM['Components']['Install Together'][$CIDRAM['Components']['Key']])) {
                    $CIDRAM['Components']['Install Together'][$CIDRAM['Components']['Key']] = [];
                }
                $CIDRAM['Components']['Install Together'][$CIDRAM['Components']['Key']] = array_merge(
                    $CIDRAM['Components']['Install Together'][$CIDRAM['Components']['Key']],
                    $CIDRAM['Components']['ThisComponent']['Install Together']
                );
            }

            $CIDRAM['PrepareName']($CIDRAM['Components']['ThisComponent'], $CIDRAM['Components']['Key']);
            $CIDRAM['PrepareExtendedDescription']($CIDRAM['Components']['ThisComponent'], $CIDRAM['Components']['Key']);
            $CIDRAM['Components']['ThisComponent']['ID'] = $CIDRAM['Components']['Key'];
            $CIDRAM['Components']['ThisComponent']['Latest'] = $CIDRAM['Components']['ThisComponent']['Version'];
            $CIDRAM['Components']['ThisComponent']['Version'] = $CIDRAM['L10N']->getString('response_updates_not_installed');
            $CIDRAM['Components']['ThisComponent']['StatClass'] = 'txtRd';
            $CIDRAM['Components']['ThisComponent']['RowClass'] = 'h2';
            $CIDRAM['Components']['ThisComponent']['VersionSize'] = '';
            $CIDRAM['Components']['ThisComponent']['LatestSize'] = 0;
            if (
                !empty($CIDRAM['Components']['ThisComponent']['Files']['Checksum']) &&
                is_array($CIDRAM['Components']['ThisComponent']['Files']['Checksum'])
            ) {
                foreach ($CIDRAM['Components']['ThisComponent']['Files']['Checksum'] as $CIDRAM['Components']['ThisChecksum']) {
                    if (empty($CIDRAM['Components']['ThisChecksum'])) {
                        continue;
                    }
                    if (($CIDRAM['FilesDelimit'] = strpos($CIDRAM['Components']['ThisChecksum'], ':')) !== false) {
                        $CIDRAM['Components']['ThisComponent']['LatestSize'] +=
                            (int)substr($CIDRAM['Components']['ThisChecksum'], $CIDRAM['FilesDelimit'] + 1);
                    }
                }
            }
            if ($CIDRAM['Components']['ThisComponent']['LatestSize'] > 0) {
                $CIDRAM['FormatFilesize']($CIDRAM['Components']['ThisComponent']['LatestSize']);
                $CIDRAM['Components']['ThisComponent']['LatestSize'] = sprintf(
                    '<br />%s %s',
                    $CIDRAM['L10N']->getString('field_size'),
                    $CIDRAM['Components']['ThisComponent']['LatestSize']
                );
            } else {
                $CIDRAM['Components']['ThisComponent']['LatestSize'] = '';
            }
            $CIDRAM['Components']['ThisComponent']['StatusOptions'] = $CIDRAM['L10N']->getString('response_updates_not_installed');
            if (!empty($CIDRAM['Components']['ThisComponent']['Remote All Constraints Met'])) {
                $CIDRAM['Components']['ThisComponent']['StatusOptions'] .= '<br /><select name="do" class="auto">' .
                    '<option value="update-component">' . $CIDRAM['L10N']->getString('field_install') . '</option>';
                if ($CIDRAM['IsActivable']($CIDRAM['Components']['ThisComponent'])) {
                    $CIDRAM['Components']['ThisComponent']['StatusOptions'] .=
                        '<option value="update-and-activate-component">' .
                        $CIDRAM['L10N']->getString('field_install') . ' + ' . $CIDRAM['L10N']->getString('field_activate') .
                        '</option>';
                }
                $CIDRAM['Components']['ThisComponent']['StatusOptions'] .= '</select><input type="submit" value="' . $CIDRAM['L10N']->getString('field_ok') . '" class="auto" />';
            }

            /** Append changelog. */
            $CIDRAM['Components']['ThisComponent']['Changelog'] = empty(
                $CIDRAM['Components']['ThisComponent']['Changelog']
            ) ? '' : '<br /><a href="' . $CIDRAM['Components']['ThisComponent']['Changelog'] . '" rel="noopener external">Changelog</a>';

            /** Append filename (empty). */
            $CIDRAM['Components']['ThisComponent']['Filename'] = '';

            /** Finalise entry. */
            if (!$CIDRAM['FE']['hide-unused']) {
                if (!empty($CIDRAM['FE']['sort-by-name']) && !empty($CIDRAM['Components']['ThisComponent']['Name'])) {
                    $CIDRAM['Components']['ThisComponent']['SortKey'] = $CIDRAM['Components']['ThisComponent']['Name'];
                } else {
                    $CIDRAM['Components']['ThisComponent']['SortKey'] = $CIDRAM['Components']['Key'];
                }
                $CIDRAM['FE']['Indexes'][$CIDRAM['Components']['ThisComponent']['SortKey']] = sprintf(
                    "<a href=\"#%s\">%s</a><br /><br />\n      ",
                    $CIDRAM['Components']['ThisComponent']['ID'],
                    $CIDRAM['Components']['ThisComponent']['Name']
                );
                $CIDRAM['Components']['Out'][$CIDRAM['Components']['ThisComponent']['SortKey']] = $CIDRAM['ParseVars'](
                    $CIDRAM['L10N']->Data + $CIDRAM['ArrayFlatten']($CIDRAM['Components']['ThisComponent']) + $CIDRAM['ArrayFlatten']($CIDRAM['FE']),
                    $CIDRAM['FE']['UpdatesRow']
                );
            }
        }
    }

    /** Finalise output and unset working data. */
    $CIDRAM['FE']['Indexes'] = $CIDRAM['UpdatesSortFunc']($CIDRAM['FE']['Indexes']);
    $CIDRAM['FE']['Components'] = $CIDRAM['UpdatesSortFunc']($CIDRAM['Components']['Out']);

    $CIDRAM['Components']['CountOutdated'] = count($CIDRAM['Components']['Outdated']);
    $CIDRAM['Components']['CountOutdatedSignatureFiles'] = count($CIDRAM['Components']['OutdatedSignatureFiles']);
    $CIDRAM['Components']['CountVerify'] = count($CIDRAM['Components']['Verify']);
    $CIDRAM['Components']['CountRepairable'] = count($CIDRAM['Components']['Repairable']);

    /** Preparing the update all, verify all, repair all buttons. */
    $CIDRAM['FE']['UpdateAll'] = (
        $CIDRAM['Components']['CountOutdated'] ||
        $CIDRAM['Components']['CountOutdatedSignatureFiles'] ||
        $CIDRAM['Components']['CountVerify'] ||
        $CIDRAM['Components']['CountRepairable']
    ) ? '<hr />' : '';

    /** Instructions to update all signature files (but not necessarily everything). */
    if ($CIDRAM['Components']['CountOutdatedSignatureFiles']) {
        $CIDRAM['FE']['UpdateAll'] .= sprintf($CIDRAM['CFBoilerplate'], $CIDRAM['FE']['UpdatesFormTarget'], 'update-component');
        foreach ($CIDRAM['Components']['OutdatedSignatureFiles'] as $CIDRAM['Components']['ThisOutdated']) {
            $CIDRAM['FE']['UpdateAll'] .= '<input name="ID[]" type="hidden" value="' . $CIDRAM['Components']['ThisOutdated'] . '" />';
        }
        $CIDRAM['FE']['UpdateAll'] .= '<input type="submit" value="' . $CIDRAM['L10N']->getString('field_update_signatures_files') . '" class="auto" /></form>';
    }

    /** Instructions to update everything at once. */
    if ($CIDRAM['Components']['CountOutdated'] && $CIDRAM['Components']['CountOutdated'] !== $CIDRAM['Components']['CountOutdatedSignatureFiles']) {
        $CIDRAM['FE']['UpdateAll'] .= sprintf($CIDRAM['CFBoilerplate'], $CIDRAM['FE']['UpdatesFormTarget'], 'update-component');
        foreach ($CIDRAM['Components']['Outdated'] as $CIDRAM['Components']['ThisOutdated']) {
            $CIDRAM['FE']['UpdateAll'] .= '<input name="ID[]" type="hidden" value="' . $CIDRAM['Components']['ThisOutdated'] . '" />';
        }
        $CIDRAM['FE']['UpdateAll'] .= '<input type="submit" value="' . $CIDRAM['L10N']->getString('field_update_all') . '" class="auto" /></form>';
    }

    /** Instructions to repair everything at once. */
    if ($CIDRAM['Components']['CountRepairable']) {
        $CIDRAM['FE']['UpdateAll'] .= sprintf($CIDRAM['CFBoilerplate'], $CIDRAM['FE']['UpdatesFormTarget'], 'repair-component');
        foreach ($CIDRAM['Components']['Repairable'] as $CIDRAM['Components']['ThisRepairable']) {
            $CIDRAM['FE']['UpdateAll'] .= '<input name="ID[]" type="hidden" value="' . $CIDRAM['Components']['ThisRepairable'] . '" />';
        }
        $CIDRAM['FE']['UpdateAll'] .= '<input type="submit" value="' . $CIDRAM['L10N']->getString('field_repair_all') . '" class="auto" /></form>';
    }

    /** Instructions to verify everything at once. */
    if ($CIDRAM['Components']['CountVerify']) {
        $CIDRAM['FE']['UpdateAll'] .= sprintf($CIDRAM['CFBoilerplate'], $CIDRAM['FE']['UpdatesFormTarget'], 'verify-component');
        foreach ($CIDRAM['Components']['Verify'] as $CIDRAM['Components']['ThisVerify']) {
            $CIDRAM['FE']['UpdateAll'] .= '<input name="ID[]" type="hidden" value="' . $CIDRAM['Components']['ThisVerify'] . '" />';
        }
        $CIDRAM['FE']['UpdateAll'] .= '<input type="submit" value="' . $CIDRAM['L10N']->getString('field_verify_all') . '" class="auto" /></form>';
    }

    /** Parse output. */
    $CIDRAM['FE']['FE_Content'] = $CIDRAM['ParseVars'](
        $CIDRAM['L10N']->Data + $CIDRAM['FE'],
        $CIDRAM['ReadFile']($CIDRAM['GetAssetPath']('_updates.html'))
    ) . $CIDRAM['MenuToggle'];

    /** Process dependency installation triggers. */
    foreach ($CIDRAM['Components']['Install Together'] as $CIDRAM['Components']['Key'] => $CIDRAM['Components']['ID']) {
        $CIDRAM['Components']['Build'] = '';
        $CIDRAM['Components']['ID'] = array_unique($CIDRAM['Components']['ID']);
        foreach ($CIDRAM['Components']['ID'] as $CIDRAM['Components']['ThisID']) {
            $CIDRAM['Components']['Build'] .= '<input name="InstallTogether[]" type="hidden" value="' . $CIDRAM['Components']['ThisID'] . '" />';
        }
        $CIDRAM['FE']['FE_Content'] = str_replace(
            '<input name="ID[]" type="hidden" value="' .$CIDRAM['Components']['Key'] . '" />',
            $CIDRAM['Components']['Build'] . '<input name="ID[]" type="hidden" value="' .$CIDRAM['Components']['Key'] . '" />',
            $CIDRAM['FE']['FE_Content']
        );
    }

    /** Finalise IO operations all at once. */
    unset($CIDRAM['Updater-IO']);

    /** Send output. */
    if ($CIDRAM['FE']['CronMode'] === '') {
        /** Normal page output. */
        echo $CIDRAM['SendOutput']();
    } elseif ($CIDRAM['FE']['CronType'] === 'localUpdate') {
        /** Returned state message for Cronable (updating locally). */
        $Results = ['state_msg' => str_ireplace(
            ['<code>', '</code>', '<br />', '<hr />'],
            ['[', ']', "\n", "\n---\n"],
            $CIDRAM['FE']['state_msg']
        )];
    } elseif (!empty($CIDRAM['FE']['state_msg'])) {
        /** Returned state message for Cronable. */
        echo json_encode(['state_msg' => str_ireplace(
            ['<code>', '</code>', '<br />', '<hr />'],
            ['[', ']', "\n", "\n---\n"],
            $CIDRAM['FE']['state_msg']
        )]);
    } elseif (!empty($_POST['do']) && $_POST['do'] === 'get-list' && (
        $CIDRAM['Components']['CountOutdated'] > 0 ||
        $CIDRAM['Components']['CountOutdatedSignatureFiles'] > 0
    )) {
        /** Returned list of outdated components for Cronable. */
        echo json_encode([
            'state_msg' => str_ireplace(
                ['<code>', '</code>', '<br />', '<hr />'],
                ['[', ']', "\n", "\n---\n"],
                $CIDRAM['FE']['state_msg']
            ),
            'outdated' => $CIDRAM['Components']['CountOutdated'] > 0 ? $CIDRAM['Components']['Outdated'] : [],
            'outdated_signature_files' => $CIDRAM['Components']['CountOutdatedSignatureFiles'] > 0 ? $CIDRAM['Components']['OutdatedSignatureFiles'] : []
        ]);
    }

    /** Cleanup. */
    unset($CIDRAM['Components'], $CIDRAM['CFBoilerplate'], $CIDRAM['Operation']);
}

/** Backup. */
elseif ($CIDRAM['QueryVars']['cidram-page'] === 'backup' && $CIDRAM['FE']['Permissions'] === 1) {
    /** Page initial prepwork. */
    $CIDRAM['InitialPrepwork']($CIDRAM['L10N']->getString('link_backup'), $CIDRAM['L10N']->getString('tip_backup'));

    $CIDRAM['FE']['size_config'] = filesize($CIDRAM['Vault'] . $CIDRAM['FE']['ActiveConfigFile']) ?: 0;
    $CIDRAM['FE']['size_aux'] = filesize($CIDRAM['Vault'] . 'auxiliary.yaml') ?: 0;
    $CIDRAM['FormatFilesize']($CIDRAM['FE']['size_config']);
    $CIDRAM['FormatFilesize']($CIDRAM['FE']['size_aux']);
    $CIDRAM['FE']['size_config'] = '[<span dir="ltr" class="txtRd">' . $CIDRAM['Vault'] . $CIDRAM['FE']['ActiveConfigFile'] . '</span>] – ' . $CIDRAM['FE']['size_config'];
    $CIDRAM['FE']['size_aux'] = '[<span dir="ltr" class="txtRd">' . $CIDRAM['Vault'] . 'auxiliary.yaml</span>] – ' . $CIDRAM['FE']['size_aux'];

    if (isset($_POST['bckpAct'])) {
        /** Export. */
        if ($_POST['bckpAct'] === 'export') {
            $CIDRAM['Export'] = ['CIDRAM Version' => $CIDRAM['ScriptVersion']];
            $CIDRAM['InitialiseErrorHandler']();

            /** Export configuration. */
            if (isset($_POST['doConfig']) && $_POST['doConfig'] === 'on') {
                $CIDRAM['Export']['Configuration'] = $CIDRAM['Config'];
                unset(
                    $CIDRAM['Export']['Configuration']['Config Defaults'],
                    $CIDRAM['Export']['Configuration']['Provide'],
                    $CIDRAM['Export']['Configuration']['Links']
                );
            }

            /** Export auxiliary rules. */
            if (isset($_POST['doAux']) && $_POST['doAux'] === 'on') {
                if (!isset($CIDRAM['AuxData'])) {
                    $CIDRAM['AuxData'] = [];
                    $CIDRAM['YAML']->process($CIDRAM['ReadFile']($CIDRAM['Vault'] . 'auxiliary.yaml'), $CIDRAM['AuxData']);
                }
                if (isset($_POST['xprtName'])) {
                    $CIDRAM['Export']['Auxiliary Rules'] = isset($CIDRAM['AuxData'][$_POST['xprtName']]) ? [$_POST['xprtName'] => $CIDRAM['AuxData'][$_POST['xprtName']]] : [];
                } else {
                    $CIDRAM['Export']['Auxiliary Rules'] = $CIDRAM['AuxData'];
                }
            }

            /** Build output. */
            $CIDRAM['Export'] = $CIDRAM['YAML']->reconstruct($CIDRAM['Export']);
            $CIDRAM['Filename'] = 'CIDRAM-v' . $CIDRAM['ScriptVersion'] . '-Exported-' . date('Y-m-d-H-i-s', $CIDRAM['Now']) . '.yml';
            if (isset($_POST['doCompress']) && $_POST['doCompress'] === 'on' && $CIDRAM['Export'] !== '') {
                $CIDRAM['Export'] = gzencode($CIDRAM['Export']);
                $CIDRAM['Filename'] .= '.gz';
            }
            header('Content-Type: application/octet-stream');
            header('Content-Transfer-Encoding: Binary');
            header('Content-disposition: attachment; filename="' . $CIDRAM['Filename'] . '"');
            echo $CIDRAM['Export'];
            $CIDRAM['RestoreErrorHandler']();
            die;
        }

        /** Import. */
        if ($_POST['bckpAct'] === 'import') {
            if (
                isset($_FILES['importFile']['name'], $_FILES['importFile']['tmp_name'], $_FILES['importFile']['error']) &&
                $_FILES['importFile']['error'] === UPLOAD_ERR_OK &&
                is_uploaded_file($_FILES['importFile']['tmp_name'])
            ) {
                $CIDRAM['InitialiseErrorHandler']();
                $CIDRAM['Try'] = $CIDRAM['ReadFile']($_FILES['importFile']['tmp_name']);
                if (substr($CIDRAM['Try'], 0, 2) === "\x1F\x8B") {
                    $CIDRAM['Try'] = gzdecode($CIDRAM['Try']);
                }
                $CIDRAM['Import'] = [];
                if (substr($CIDRAM['Try'], 0, 6) === 'CIDRAM') {
                    $CIDRAM['YAML']->process($CIDRAM['Try'], $CIDRAM['Import']);
                }
                $CIDRAM['Try'] = false;
                if (!isset($CIDRAM['Import']['CIDRAM Version'])) {
                    $CIDRAM['FE']['state_msg'] .= $CIDRAM['L10N']->getString('response_failed_to_import') . '<br />';
                } else {
                    $CIDRAM['Operation'] = new \Maikuolan\Common\Operation();

                    /** Import configuration. */
                    if (isset($_POST['doConfig']) && $_POST['doConfig'] === 'on') {
                        if ($CIDRAM['Operation']->singleCompare($CIDRAM['Import']['CIDRAM Version'], '<1.23|>=2 <2.10|>=3')) {
                            $this->FE['state_msg'] .= sprintf(
                                $this->L10N->getString('response_import_bad_version'),
                                $CIDRAM['Import']['CIDRAM Version']
                            ) . ' ' . $CIDRAM['L10N']->getString('response_configuration_update_failed') . '<br />';
                        } elseif (isset($CIDRAM['Import']['Configuration']) && is_array($CIDRAM['Import']['Configuration'])) {
                            if ($CIDRAM['Operation']->singleCompare($CIDRAM['Import']['CIDRAM Version'], '^2.10')) {
                                /** To allow backporting (v1<-v2). */
                                foreach ([
                                    'general' => [
                                        ['logfileApache', 'logfile_apache'],
                                        ['logfileSerialized', 'logfile_serialized'],
                                        ['timeOffset', 'time_offset'],
                                        ['timeFormat', 'time_format'],
                                        ['FrontEndLog', 'frontend_log']
                                    ],
                                    'template_data' => [['Magnification', 'magnification']],
                                    'PHPMailer' => [
                                        ['EventLog', 'event_log'],
                                        ['SkipAuthProcess', 'skip_auth_process'],
                                        ['Enable2FA', 'enable_two_factor'],
                                        ['Host', 'host'],
                                        ['Port', 'port'],
                                        ['SMTPSecure', 'smtp_secure'],
                                        ['SMTPAuth', 'smtp_auth'],
                                        ['Username', 'username'],
                                        ['Password', 'password'],
                                        ['setFromAddress', 'set_from_address'],
                                        ['setFromName', 'set_from_name'],
                                        ['addReplyToAddress', 'add_reply_to_address'],
                                        ['addReplyToName', 'add_reply_to_name']
                                    ],
                                ] as $CIDRAM['CatKey'] => $CIDRAM['Cat']) {
                                    foreach ($CIDRAM['Cat'] as $CIDRAM['Pair']) {
                                        if (isset($CIDRAM['Import']['Configuration'][$CIDRAM['CatKey']][$CIDRAM['Pair'][1]]) && !isset($CIDRAM['Import']['Configuration'][$CIDRAM['CatKey']][$CIDRAM['Pair'][0]])) {
                                            $CIDRAM['Import']['Configuration'][$CIDRAM['CatKey']][$CIDRAM['Pair'][0]] = $CIDRAM['Import']['Configuration'][$CIDRAM['CatKey']][$CIDRAM['Pair'][1]];
                                            unset($CIDRAM['Import']['Configuration'][$CIDRAM['CatKey']][$CIDRAM['Pair'][1]]);
                                        }
                                    }
                                }
                                unset($CIDRAM['Pair'], $CIDRAM['Cat']);
                            }
                            $CIDRAM['Config'] = array_replace_recursive($CIDRAM['Config'], $CIDRAM['Import']['Configuration']);
                            $CIDRAM['RegenerateConfig'] = '';
                            foreach ($CIDRAM['Config'] as $CIDRAM['CatKey'] => $CIDRAM['CatValue']) {
                                if (
                                    !is_array($CIDRAM['CatValue']) ||
                                    $CIDRAM['CatKey'] === 'Config Defaults' ||
                                    $CIDRAM['CatKey'] === 'Provide' ||
                                    $CIDRAM['CatKey'] === 'Links'
                                ) {
                                    continue;
                                }
                                $CIDRAM['RegenerateConfig'] .= '[' . $CIDRAM['CatKey'] . ']';
                                if ($CIDRAM['CatInfo'] = $CIDRAM['L10N']->getString('config_' . $CIDRAM['CatKey']) ?: (
                                    $CIDRAM['FromModuleConfigL10N']('config_' . $CIDRAM['CatKey'])
                                )) {
                                    $CIDRAM['RegenerateConfig'] .= "\r\n; " . wordwrap(str_replace(
                                        ['&amp;', '&lt;', '&gt;'],
                                        ['&', '<', '>'],
                                        strip_tags($CIDRAM['CatInfo'])
                                    ), 77, "\r\n; ") . "\r\n\r\n";
                                }
                                foreach ($CIDRAM['CatValue'] as $CIDRAM['DirKey'] => $CIDRAM['DirValue']) {
                                    if (is_string($CIDRAM['DirValue'])) {
                                        $CIDRAM['RegenerateDir'] = $CIDRAM['DirKey'] . '=\'' . $CIDRAM['DirValue'] . "'\r\n";
                                    } elseif ($CIDRAM['DirValue'] === true) {
                                        $CIDRAM['RegenerateDir'] = $CIDRAM['DirKey'] . "=true\r\n";
                                    } elseif ($CIDRAM['DirValue'] === false) {
                                        $CIDRAM['RegenerateDir'] = $CIDRAM['DirKey'] . "=false\r\n";
                                    } elseif (is_scalar($CIDRAM['DirValue'])) {
                                        $CIDRAM['RegenerateDir'] = $CIDRAM['DirKey'] . '=' . $CIDRAM['DirValue'] . "\r\n";
                                    } else {
                                        continue;
                                    }
                                    $CIDRAM['DirInfo'] =
                                        $CIDRAM['L10N']->getString('config_' . $CIDRAM['CatKey'] . '_' . $CIDRAM['DirKey']) ?:
                                        $CIDRAM['L10N']->getString('label_' . $CIDRAM['DirKey']) ?:
                                        $CIDRAM['L10N']->getString('config_' . $CIDRAM['CatKey']) ?:
                                        $CIDRAM['FromModuleConfigL10N']('config_' . $CIDRAM['CatKey'] . '_' . $CIDRAM['DirKey']) ?:
                                        $CIDRAM['FromModuleConfigL10N']('config_' . $CIDRAM['CatKey']) ?:
                                        $CIDRAM['L10N']->getString('response_error');
                                    $CIDRAM['RegenerateConfig'] .= '; ' . wordwrap(str_replace(
                                        ['&amp;', '&lt;', '&gt;'],
                                        ['&', '<', '>'],
                                        strip_tags($CIDRAM['DirInfo'])
                                    ), 77, "\r\n; ") . "\r\n" . $CIDRAM['RegenerateDir'] . "\r\n";
                                }
                                $CIDRAM['RegenerateConfig'] .= "\r\n";
                            }
                            $CIDRAM['UpdateSuccess'] = false;
                            if (($CIDRAM['Handle'] = fopen($CIDRAM['Vault'] . $CIDRAM['FE']['ActiveConfigFile'], 'wb')) !== false) {
                                $CIDRAM['UpdateSuccess'] = fwrite($CIDRAM['Handle'], $CIDRAM['RegenerateConfig']);
                                fclose($CIDRAM['Handle']);
                            }
                            $CIDRAM['FE']['state_msg'] .= $CIDRAM['L10N']->getString($CIDRAM['UpdateSuccess'] ? 'response_configuration_updated' : 'response_configuration_update_failed') . '<br />';
                            unset($CIDRAM['Handle'], $CIDRAM['UpdateSuccess'], $CIDRAM['DirInfo'], $CIDRAM['RegenerateDir'], $CIDRAM['DirValue'], $CIDRAM['DirKey'], $CIDRAM['CatValue'], $CIDRAM['CatKey'], $CIDRAM['RegenerateConfig']);
                        } else {
                            $CIDRAM['FE']['state_msg'] .= $CIDRAM['L10N']->getString('response_configuration_update_failed') . '<br />';
                        }
                    }

                    /** Import auxiliary rules. */
                    if (isset($_POST['doAux']) && $_POST['doAux'] === 'on') {
                        if (isset($CIDRAM['Import']['Auxiliary Rules']) && is_array($CIDRAM['Import']['Auxiliary Rules'])) {
                            if (!isset($CIDRAM['AuxData'])) {
                                $CIDRAM['AuxData'] = [];
                                $CIDRAM['YAML']->process($CIDRAM['ReadFile']($CIDRAM['Vault'] . 'auxiliary.yaml'), $CIDRAM['AuxData']);
                            }
                            if ($CIDRAM['Operation']->singleCompare($CIDRAM['Import']['CIDRAM Version'], '>=3')) {
                                $CIDRAM['CallableRecursive']($CIDRAM['Import']['Auxiliary Rules'], function (&$Arr, $Depth) {
                                    if ($Depth === 2) {
                                        if (isset($Arr['Profiles']) && !isset($Arr['Profile'])) {
                                            $Arr['Profile'] = $Arr['Profiles'];
                                            unset($Arr['Profiles']);
                                        }
                                    }
                                    return ($Depth < 3);
                                });
                            }
                            $CIDRAM['AuxData'] = array_replace($CIDRAM['AuxData'], $CIDRAM['Import']['Auxiliary Rules']);
                            if (
                                ($CIDRAM['NewAuxData'] = $CIDRAM['YAML']->reconstruct($CIDRAM['AuxData'])) !== '' &&
                                ($CIDRAM['Handle'] = fopen($CIDRAM['Vault'] . 'auxiliary.yaml', 'wb')) !== false
                            ) {
                                if ((fwrite($CIDRAM['Handle'], $CIDRAM['NewAuxData'])) !== false) {
                                    $CIDRAM['FE']['state_msg'] .= $CIDRAM['L10N']->getString('response_aux_updated') . '<br />';
                                } else {
                                    $CIDRAM['FE']['state_msg'] .= $CIDRAM['L10N']->getString('response_aux_update_failed') . '<br />';
                                }
                                fclose($CIDRAM['Handle']);
                            } else {
                                $CIDRAM['FE']['state_msg'] .= $CIDRAM['L10N']->getString('response_aux_update_failed') . '<br />';
                            }
                        } else {
                            $CIDRAM['FE']['state_msg'] .= $CIDRAM['L10N']->getString('response_aux_update_failed') . '<br />';
                        }
                    }
                }
                $CIDRAM['RestoreErrorHandler']();
            } else {
                $CIDRAM['FE']['state_msg'] .= $CIDRAM['L10N']->getString('response_upload_error') . '<br />';
            }
        }
    }

    /** Calculate page load time (useful for debugging). */
    $CIDRAM['FE']['ProcessTime'] = microtime(true) - $_SERVER['REQUEST_TIME_FLOAT'];
    $CIDRAM['FE']['state_msg'] .= sprintf(
        $CIDRAM['L10N']->getPlural($CIDRAM['FE']['ProcessTime'], 'state_loadtime'),
        '<span class="txtRd">' . $CIDRAM['NumberFormatter']->format($CIDRAM['FE']['ProcessTime'], 3) . '</span>'
    );

    /** Parse output. */
    $CIDRAM['FE']['FE_Content'] = $CIDRAM['ParseVars'](
        $CIDRAM['L10N']->Data + $CIDRAM['FE'],
        $CIDRAM['ReadFile']($CIDRAM['GetAssetPath']('_backup.html'))
    );

    /** Send output. */
    echo $CIDRAM['SendOutput']();
}

/** Signature file fixer. */
elseif ($CIDRAM['QueryVars']['cidram-page'] === 'fixer' && $CIDRAM['FE']['Permissions'] === 1) {
    /** Page initial prepwork. */
    $CIDRAM['InitialPrepwork']($CIDRAM['L10N']->getString('link_fixer'), $CIDRAM['L10N']->getString('tip_fixer'));

    /** Preferred source. */
    $CIDRAM['PreferredSource'] = empty($_POST['preferredSource']) ? '' : $_POST['preferredSource'];

    /** Direct input. */
    $CIDRAM['FE']['DirectInput'] = empty($_POST['DirectInput']) ? '' : $_POST['DirectInput'];

    /** Preferred source menu. */
    $CIDRAM['FE']['PreferredSource'] = sprintf(
        '%1$sList" value="List"%2$s %7$s%6$spreferredSourceList">%3$s</label><br />%1$sInput" value="Input"%4$s %7$s%6$spreferredSourceInput">%5$s</label>',
        '<input type="radio" class="auto" name="preferredSource" id="preferredSource',
        $CIDRAM['PreferredSource'] === 'List' ? ' checked' : '',
        $CIDRAM['L10N']->getString('field_preferred_list'),
        $CIDRAM['PreferredSource'] === 'Input' ? ' checked' : '',
        $CIDRAM['L10N']->getString('field_preferred_direct_input'),
        ' /><label class="s" for="',
        'onchange="javascript:{hideid(\'preferredSourceListDiv\');hideid(\'preferredSourceInputDiv\');showid(this.id+\'Div\');showid(\'submitButton\');}"'
    );

    /** Whether to show or hide preferred source sections. */
    $CIDRAM['FE']['styleList'] = $CIDRAM['PreferredSource'] === 'List' ? '' : ' style="display:none"';
    $CIDRAM['FE']['styleInput'] = $CIDRAM['PreferredSource'] === 'Input' ? '' : ' style="display:none"';
    $CIDRAM['FE']['submitButtonVisibility'] = empty($CIDRAM['PreferredSource']) ? ' style="display:none"' : '';

    /** Generate a list of currently active signature files. */
    $CIDRAM['FE']['ActiveSignatureFiles'] = '<div style="display:grid;margin:38px;grid-template-columns:auto">';
    $CIDRAM['GIClass'] = 'gridHB';
    foreach (explode(',', $CIDRAM['Config']['signatures']['ipv4'] . ',' . $CIDRAM['Config']['signatures']['ipv6']) as $CIDRAM['SigSource']) {
        $CIDRAM['GIClass'] = $CIDRAM['GIClass'] !== 'gridHA' ? 'gridHA' : 'gridHB';
        $CIDRAM['SigSourceID'] = preg_replace('~[^\da-z]~i', '_', $CIDRAM['SigSource']);
        $CIDRAM['FE']['ActiveSignatureFiles'] .= sprintf(
            '<div class="gridboxitem %4$s"><span class="s gridlabel"><input type="radio" class="auto" name="sigFile" id="%1$s" value="%2$s" %3$s/><label for="%1$s">%2$s</label></span></div>',
            $CIDRAM['SigSourceID'],
            $CIDRAM['SigSource'],
            (!empty($_POST['sigFile']) && $_POST['sigFile'] === $CIDRAM['SigSource']) ? 'checked ' : '',
            $CIDRAM['GIClass']
        );
    }
    $CIDRAM['FE']['ActiveSignatureFiles'] .= '</div>';
    unset($CIDRAM['SigSourceID'], $CIDRAM['SigSource'], $CIDRAM['GIClass']);

    /** Fixer output. */
    $CIDRAM['FE']['FixerOutput'] = '';

    /** Prepare to process a currently active signature file. */
    if ($CIDRAM['PreferredSource'] === 'List' && !empty($_POST['sigFile'])) {
        if (!isset($CIDRAM['FileCache'])) {
            $CIDRAM['FileCache'] = [];
        }
        if (!isset($CIDRAM['FileCache'][$_POST['sigFile']])) {
            $CIDRAM['FileCache'][$_POST['sigFile']] = $CIDRAM['ReadFile']($CIDRAM['Vault'] . $_POST['sigFile']);
        }
        if (!empty($CIDRAM['FileCache'][$_POST['sigFile']])) {
            $CIDRAM['FE']['FixerOutput'] = $CIDRAM['FileCache'][$_POST['sigFile']];
        }
    }

    /** Prepare to process via direct input. */
    if ($CIDRAM['PreferredSource'] === 'Input' && !empty($_POST['DirectInput'])) {
        $CIDRAM['FE']['FixerOutput'] = $_POST['DirectInput'];
    }

    /** Process (validate; attempt to fix) data. */
    if ($CIDRAM['FE']['FixerOutput']) {
        $CIDRAM['Fixer'] = [
            'Time' => microtime(true),
            'Changes' => 0,
            'Aggregator' => new \CIDRAM\Aggregator\Aggregator($CIDRAM),
            'Before' => hash('sha256', $CIDRAM['FE']['FixerOutput']) . ':' . strlen($CIDRAM['FE']['FixerOutput'])
        ];
        if (strpos($CIDRAM['FE']['FixerOutput'], "\r") !== false) {
            $CIDRAM['FE']['FixerOutput'] = str_replace("\r", '', $CIDRAM['FE']['FixerOutput']);
            $CIDRAM['Fixer']['Changes']++;
        }
        $CIDRAM['Fixer']['StrObject'] = new \Maikuolan\Common\ComplexStringHandler(
            "\n" . $CIDRAM['FE']['FixerOutput'] . "\n",
            $CIDRAM['RegExTags'],
            function ($Data) use (&$CIDRAM) {
                if (!$Data = trim($Data)) {
                    return '';
                }
                $Output = '';
                $EoLPos = $NEoLPos = 0;
                while ($NEoLPos !== false) {
                    $Set = $Previous = '';
                    while (true) {
                        if (($NEoLPos = strpos($Data, "\n", $EoLPos)) === false) {
                            $Line = trim(substr($Data, $EoLPos));
                        } else {
                            $Line = trim(substr($Data, $EoLPos, $NEoLPos - $EoLPos));
                            $NEoLPos++;
                        }
                        $Param = (($Pos = strpos($Line, ' ')) !== false) ? substr($Line, $Pos + 1) : 'Deny Generic';
                        $Param = preg_replace(['~^\s+|\s+$~', '~(\S+)\s+(\S+)~'], ['', '\1 \2'], $Param);
                        if ($Previous === '') {
                            $Previous = $Param;
                        }
                        if ($Param !== $Previous) {
                            $NEoLPos = 0;
                            break;
                        }
                        if ($Line) {
                            $Set .= $Line . "\n";
                        }
                        if ($NEoLPos === false) {
                            break;
                        }
                        $EoLPos = $NEoLPos;
                    }
                    $CIDRAM['Results'] = ['In' => 0, 'Rejected' => 0, 'Accepted' => 0, 'Merged' => 0, 'Out' => 0];
                    if ($Set = $CIDRAM['Fixer']['Aggregator']->aggregate(trim($Set))) {
                        $Set = preg_replace('~$~m', ' ' . $Previous, $Set);
                        $Output .= $Set . "\n";
                    }
                    $CIDRAM['Fixer']['Changes'] += $CIDRAM['Results']['Rejected'];
                    $CIDRAM['Fixer']['Changes'] += $CIDRAM['Results']['Merged'];
                }
                return trim($Output);
            }
        );
        $CIDRAM['Fixer']['StrObject']->iterateClosure(function ($Data) use (&$CIDRAM) {
            if (($Pos = strpos($Data, "---\n")) !== false && substr($Data, $Pos - 1, 1) === "\n") {
                $YAML = substr($Data, $Pos + 4);
                if (($HPos = strpos($YAML, "\n#")) !== false) {
                    $After = substr($YAML, $HPos);
                    $YAML = substr($YAML, 0, $HPos + 1);
                } else {
                    $After = '';
                }
                $BeforeCount = substr_count($YAML, "\n");
                $Arr = [];
                $CIDRAM['YAML']->process($YAML, $Arr);
                $NewData = substr($Data, 0, $Pos + 4) . $CIDRAM['YAML']->reconstruct($Arr);
                if (($Add = $BeforeCount - substr_count($NewData, "\n") + 1) > 0) {
                    $NewData .= str_repeat("\n", $Add);
                }
                $NewData .= $After;
                if ($Data !== $NewData) {
                    $CIDRAM['Fixer']['Changes']++;
                    $Data = $NewData;
                }
            }
            return "\n" . $Data;
        }, true);
        $CIDRAM['FE']['FixerOutput'] = trim($CIDRAM['Fixer']['StrObject']->recompile()) . "\n";
        $CIDRAM['Fixer']['After'] = hash('sha256', $CIDRAM['FE']['FixerOutput']) . ':' . strlen($CIDRAM['FE']['FixerOutput']);
        if ($CIDRAM['Fixer']['Before'] !== $CIDRAM['Fixer']['After'] && !$CIDRAM['Fixer']['Changes']) {
            $CIDRAM['Fixer']['Changes']++;
        }
        $CIDRAM['Fixer']['Time'] = microtime(true) - $CIDRAM['Fixer']['Time'];
        $CIDRAM['Fixer'] = '<div class="s">' . sprintf($CIDRAM['L10N']->getString('state_fixer'), sprintf(
            $CIDRAM['L10N']->getPlural($CIDRAM['Fixer']['Changes'], 'state_fixer_changed'),
            '<span class="txtRd">' . $CIDRAM['NumberFormatter']->format($CIDRAM['Fixer']['Changes']) . '</span>'
        ), sprintf(
            $CIDRAM['L10N']->getPlural($CIDRAM['Fixer']['Time'], 'state_fixer_seconds'),
            '<span class="txtRd">' . $CIDRAM['NumberFormatter']->format($CIDRAM['Fixer']['Time'], 3) . '</span>'
        )) . '<br /><blockquote><code>' . $CIDRAM['Fixer']['Before'] . '</code><br />↪️<code>' . $CIDRAM['Fixer']['After'] . '</code></blockquote></div>';
        $CIDRAM['FE']['FixerOutput'] = '<hr />' . $CIDRAM['Fixer'] . '<br /><textarea name="FixerOutput" id="fixerOutput">' . str_replace(
            ['&', '<', '>'],
            ['&amp;', '&lt;', '&gt;'],
            $CIDRAM['FE']['FixerOutput']
        ) . '</textarea><br /><br />';

        /** Copy SVG. */
        $CIDRAM['FE']['FixerOutput'] .= '<span class="s">' . sprintf(
            '<span id="fxOS" onclick="javascript:if(navigator.clipboard){navigator.cl' .
            'ipboard.writeText(getElementById(\'fixerOutput\').value);getElementById(' .
            '\'fxOS_copied\').className=\'sFade\'}else{getElementById(\'fxOS_failed\'' .
            ').style.className=\'sFade\'}"><script type="text/javascript">copySvg(\'f' .
            'xOS\');</script></span><span id="fxOS_copied"%1$s">✔️ %2$s</span><span id' .
            '="fxOS_failed"%1$s">❌ %3$s</span>',
            ' class="sHide" onanimationend="javascript:this.className=\'sHide\'',
            $CIDRAM['L10N']->getString('response_copied'),
            $CIDRAM['L10N']->getString('response_failed')
        ) . '</span>';

        /** Cleanup. */
        unset($CIDRAM['Fixer']);
    }

    /** Parse output. */
    $CIDRAM['FE']['FE_Content'] = $CIDRAM['ParseVars'](
        $CIDRAM['L10N']->Data + $CIDRAM['FE'],
        $CIDRAM['ReadFile']($CIDRAM['GetAssetPath']('_fixer.html'))
    );

    /** Send output. */
    echo $CIDRAM['SendOutput']();
}

/** File Manager. */
elseif ($CIDRAM['QueryVars']['cidram-page'] === 'file-manager' && $CIDRAM['FE']['Permissions'] === 1) {
    /** Page initial prepwork. */
    $CIDRAM['InitialPrepwork']($CIDRAM['L10N']->getString('link_file_manager'), $CIDRAM['L10N']->getString('tip_file_manager'));

    /** Load doughnut template file upon request. */
    if (empty($CIDRAM['QueryVars']['show'])) {
        $CIDRAM['FE']['ChartJSPath'] = '';
        $CIDRAM['DoughnutFile'] = '';
        $CIDRAM['DoughnutPath'] = '';
    } else {
        if ($CIDRAM['DoughnutPath'] = $CIDRAM['GetAssetPath']('_chartjs.html', true)) {
            $CIDRAM['DoughnutFile'] = $CIDRAM['ReadFile']($CIDRAM['DoughnutPath']);
        } else {
            $CIDRAM['DoughnutFile'] = '<tr><td class="h4f" colspan="2"><div class="s">{DoughnutHTML}</div></td></tr>';
        }
        $CIDRAM['FE']['ChartJSPath'] = $CIDRAM['GetAssetPath']('chart.min.js', true) ? '?cidram-asset=chart.min.js&theme=default' : '';
    }

    /** Set vault path for doughnut display. */
    $CIDRAM['FE']['VaultPath'] = str_replace("\\", '/', $CIDRAM['Vault']) . '*';

    /** Prepare components metadata working array. */
    $CIDRAM['Components'] = ['Files' => [], 'Components' => [], 'ComponentFiles' => [], 'Names' => []];

    /** Show/hide doughnuts link and etc. */
    if (!$CIDRAM['DoughnutFile']) {
        $CIDRAM['FE']['FMgrFormTarget'] = 'cidram-page=file-manager';
        $CIDRAM['FE']['ShowHideLink'] = '<a href="?cidram-page=file-manager&show=true">' . $CIDRAM['L10N']->getString('label_show') . '</a>';
    } else {
        $CIDRAM['FE']['FMgrFormTarget'] = 'cidram-page=file-manager&show=true';
        $CIDRAM['FE']['ShowHideLink'] = '<a href="?cidram-page=file-manager">' . $CIDRAM['L10N']->getString('label_hide') . '</a>';
    }

    /** Fetch components lists. */
    $CIDRAM['FetchComponentsLists']($CIDRAM['Vault'], $CIDRAM['Components']['Components']);

    /** Identifying file component correlations. */
    foreach ($CIDRAM['Components']['Components'] as $CIDRAM['Components']['ThisName'] => &$CIDRAM['Components']['ThisData']) {
        if (!empty($CIDRAM['Components']['ThisData']['Files']['To'])) {
            $CIDRAM['Arrayify']($CIDRAM['Components']['ThisData']['Files']['To']);
            foreach ($CIDRAM['Components']['ThisData']['Files']['To'] as $CIDRAM['Components']['ThisFile']) {
                $CIDRAM['Components']['ThisFile'] = str_replace("\\", '/', $CIDRAM['Components']['ThisFile']);
                $CIDRAM['Components']['Files'][$CIDRAM['Components']['ThisFile']] = $CIDRAM['Components']['ThisName'];
            }
        }
        $CIDRAM['PrepareName']($CIDRAM['Components']['ThisData'], $CIDRAM['Components']['ThisName']);
        if (!empty($CIDRAM['Components']['ThisData']['Name'])) {
            $CIDRAM['Components']['Names'][$CIDRAM['Components']['ThisName']] = $CIDRAM['Components']['ThisData']['Name'];
        }
        $CIDRAM['Components']['ThisData'] = 0;
    }

    /** Upload a new file. */
    if (isset($_POST['do'], $_FILES['upload-file']['name']) && $_POST['do'] === 'upload-file') {
        /** Check whether safe. */
        $CIDRAM['SafeToContinue'] = (
            basename($_FILES['upload-file']['name']) === $_FILES['upload-file']['name'] &&
            $CIDRAM['FileManager-PathSecurityCheck']($_FILES['upload-file']['name']) &&
            isset($_FILES['upload-file']['tmp_name'], $_FILES['upload-file']['error']) &&
            $_FILES['upload-file']['error'] === UPLOAD_ERR_OK &&
            is_uploaded_file($_FILES['upload-file']['tmp_name']) &&
            !is_link($CIDRAM['Vault'] . $_FILES['upload-file']['name'])
        );

        /** If the filename already exists, delete the old file before moving the new file. */
        if ($CIDRAM['SafeToContinue'] && is_readable($CIDRAM['Vault'] . $_FILES['upload-file']['name'])) {
            if (is_dir($CIDRAM['Vault'] . $_FILES['upload-file']['name'])) {
                if ($CIDRAM['IsDirEmpty']($CIDRAM['Vault'] . $_FILES['upload-file']['name'])) {
                    rmdir($CIDRAM['Vault'] . $_FILES['upload-file']['name']);
                } else {
                    $CIDRAM['SafeToContinue'] = false;
                }
            } else {
                unlink($CIDRAM['Vault'] . $_FILES['upload-file']['name']);
            }
        }

        /** Move the newly uploaded file to the designated location. */
        if ($CIDRAM['SafeToContinue']) {
            if (rename($_FILES['upload-file']['tmp_name'], $CIDRAM['Vault'] . $_FILES['upload-file']['name'])) {
                $CIDRAM['FE']['state_msg'] = $CIDRAM['L10N']->getString('response_file_uploaded');
                header('HTTP/1.0 201 Created');
                header('HTTP/1.1 201 Created');
                header('Status: 201 Created');
            } else {
                $CIDRAM['FE']['state_msg'] = $CIDRAM['L10N']->getString('response_upload_error');
            }
        } else {
            $CIDRAM['FE']['state_msg'] = $CIDRAM['L10N']->getString('response_upload_error');
        }
    }

    /** A form was submitted. */
    elseif (
        isset($_POST['filename'], $_POST['do']) &&
        is_readable($CIDRAM['Vault'] . $_POST['filename']) &&
        $CIDRAM['FileManager-PathSecurityCheck']($_POST['filename'])
    ) {
        /** Delete a file. */
        if ($_POST['do'] === 'delete-file') {
            if (is_dir($CIDRAM['Vault'] . $_POST['filename'])) {
                if (
                    $CIDRAM['IsDirEmpty']($CIDRAM['Vault'] . $_POST['filename']) &&
                    rmdir($CIDRAM['Vault'] . $_POST['filename'])
                ) {
                    $CIDRAM['FE']['state_msg'] = $CIDRAM['L10N']->getString('response_directory_deleted');
                } else {
                    $CIDRAM['FE']['state_msg'] = $CIDRAM['L10N']->getString('response_delete_error');
                }
            } elseif (unlink($CIDRAM['Vault'] . $_POST['filename'])) {
                /** Remove empty directories. */
                $CIDRAM['DeleteDirectory']($_POST['filename']);

                $CIDRAM['FE']['state_msg'] = $CIDRAM['L10N']->getString('response_file_deleted');
            } else {
                $CIDRAM['FE']['state_msg'] = $CIDRAM['L10N']->getString('response_delete_error');
            }
        }

        /** Rename a file. */
        if ($_POST['do'] === 'rename-file' && isset($_POST['filename'])) {
            if (isset($_POST['filename_new'])) {
                /** Check whether safe. */
                $CIDRAM['SafeToContinue'] = (
                    $CIDRAM['FileManager-PathSecurityCheck']($_POST['filename']) &&
                    $CIDRAM['FileManager-PathSecurityCheck']($_POST['filename_new']) &&
                    $_POST['filename'] !== $_POST['filename_new']
                );

                /** If the destination already exists, delete it before renaming the new file. */
                if (
                    $CIDRAM['SafeToContinue'] &&
                    file_exists($CIDRAM['Vault'] . $_POST['filename_new']) &&
                    is_readable($CIDRAM['Vault'] . $_POST['filename_new'])
                ) {
                    if (is_dir($CIDRAM['Vault'] . $_POST['filename_new'])) {
                        if (
                            !$CIDRAM['IsDirEmpty']($CIDRAM['Vault'] . $_POST['filename_new']) ||
                            !rmdir($CIDRAM['Vault'] . $_POST['filename_new'])
                        ) {
                            $CIDRAM['SafeToContinue'] = false;
                        }
                    } elseif (!unlink($CIDRAM['Vault'] . $_POST['filename_new'])) {
                        $CIDRAM['SafeToContinue'] = false;
                    }
                }

                /** Rename the file. */
                if ($CIDRAM['SafeToContinue']) {
                    /** Add parent directories. */
                    $CIDRAM['BuildPath']($CIDRAM['Vault'] . $_POST['filename_new']);

                    if (rename($CIDRAM['Vault'] . $_POST['filename'], $CIDRAM['Vault'] . $_POST['filename_new'])) {
                        /** Remove empty directories. */
                        $CIDRAM['DeleteDirectory']($_POST['filename']);

                        /** Update state message. */
                        $CIDRAM['FE']['state_msg'] = $CIDRAM['L10N']->getString(
                            is_dir($CIDRAM['Vault'] . $_POST['filename_new']) ? 'response_directory_renamed' : 'response_file_renamed'
                        );
                    } else {
                        $CIDRAM['FE']['state_msg'] = $CIDRAM['L10N']->getString('response_rename_error');
                    }
                } else {
                    $CIDRAM['FE']['state_msg'] = $CIDRAM['L10N']->getString('response_rename_error');
                }
            } else {
                $CIDRAM['FE']['FE_Title'] .= ' – ' . $CIDRAM['L10N']->getString('field_rename_file') . ' – ' . $_POST['filename'];
                $CIDRAM['FE']['filename'] = $_POST['filename'];

                /** Parse output. */
                $CIDRAM['FE']['FE_Content'] = $CIDRAM['ParseVars'](
                    $CIDRAM['L10N']->Data + $CIDRAM['FE'],
                    $CIDRAM['ReadFile']($CIDRAM['GetAssetPath']('_files_rename.html'))
                );

                /** Send output. */
                echo $CIDRAM['SendOutput']();
                die;
            }
        }

        /** Edit a file. */
        if ($_POST['do'] === 'edit-file') {
            if (isset($_POST['content'])) {
                $_POST['content'] = str_replace("\r", '', $_POST['content']);
                $CIDRAM['OldData'] = $CIDRAM['ReadFile']($CIDRAM['Vault'] . $_POST['filename']);
                if (strpos($CIDRAM['OldData'], "\r\n") !== false && strpos($CIDRAM['OldData'], "\n\n") === false) {
                    $_POST['content'] = str_replace("\n", "\r\n", $_POST['content']);
                }

                $CIDRAM['Handle'] = fopen($CIDRAM['Vault'] . $_POST['filename'], 'wb');
                fwrite($CIDRAM['Handle'], $_POST['content']);
                fclose($CIDRAM['Handle']);

                $CIDRAM['FE']['state_msg'] = $CIDRAM['L10N']->getString('response_file_edited');
            } else {
                $CIDRAM['FE']['FE_Title'] .= ' – ' . $_POST['filename'];
                $CIDRAM['FE']['filename'] = $_POST['filename'];
                $CIDRAM['FE']['content'] = htmlentities($CIDRAM['ReadFile']($CIDRAM['Vault'] . $_POST['filename']));

                /** Component update file overwrite warning. */
                if (isset($CIDRAM['Components']['Files'][$_POST['filename']])) {
                    $CIDRAM['FE']['state_msg'] = sprintf(
                        $CIDRAM['L10N']->getString('warning_file_overwritten'),
                        $CIDRAM['Components']['Files'][$_POST['filename']]
                    );
                }

                /** PHP file warning. */
                if (preg_match('~\.php$~i', $_POST['filename'])) {
                    $CIDRAM['FE']['JS'] .= "\nfunction wfp(d){};";
                    if ($CIDRAM['FE']['state_msg'] !== '') {
                        $CIDRAM['FE']['state_msg'] .= '<br />';
                    }
                    $CIDRAM['FE']['state_msg'] .= $CIDRAM['L10N']->getString('warning_file_php');
                } else {
                    $CIDRAM['FE']['JS'] .= "\nfunction wfp(d){d.includes('<?php')?showid('wfps'):hideid('wfps')};";
                    $CIDRAM['FE']['state_msg'] .= $CIDRAM['FE']['state_msg'] !== '' ? '<span id="wfps"><br />' : '<span id="wfps">';
                    $CIDRAM['FE']['state_msg'] .= $CIDRAM['L10N']->getString('warning_file_php') . '</span>';
                }

                /** Parse output. */
                $CIDRAM['FE']['FE_Content'] = $CIDRAM['ParseVars'](
                    $CIDRAM['L10N']->Data + $CIDRAM['FE'],
                    $CIDRAM['ReadFile']($CIDRAM['GetAssetPath']('_files_edit.html'))
                );

                /** Send output. */
                echo $CIDRAM['SendOutput']();
                die;
            }
        }

        /** Download a file. */
        if ($_POST['do'] === 'download-file') {
            header('Content-Type: application/octet-stream');
            header('Content-Transfer-Encoding: Binary');
            header('Content-disposition: attachment; filename="' . basename($_POST['filename']) . '"');
            echo $CIDRAM['ReadFile']($CIDRAM['Vault'] . $_POST['filename']);
            die;
        }
    }

    /** Template for file rows. */
    $CIDRAM['FE']['FilesRow'] = $CIDRAM['ReadFile']($CIDRAM['GetAssetPath']('_files_row.html'));

    /** Parse output. */
    $CIDRAM['FE']['FE_Content'] = $CIDRAM['ParseVars'](
        $CIDRAM['L10N']->Data + $CIDRAM['FE'],
        $CIDRAM['ReadFile']($CIDRAM['GetAssetPath']('_files.html'))
    );

    /** Initialise files data variable. */
    $CIDRAM['FE']['FilesData'] = '';

    /** Total size. */
    $CIDRAM['FE']['TotalSize'] = 0;

    /** Fetch files data. */
    $CIDRAM['FilesArray'] = $CIDRAM['FileManager-RecursiveList']($CIDRAM['Vault']);

    if (!$CIDRAM['DoughnutFile']) {
        $CIDRAM['FE']['Doughnut'] = '';
    } else {
        /** Sort doughnut values. */
        arsort($CIDRAM['Components']['Components']);

        /** Initialise doughnut values. */
        $CIDRAM['FE']['DoughnutValues'] = [];

        /** Initialise doughnut labels. */
        $CIDRAM['FE']['DoughnutLabels'] = [];

        /** Initialise doughnut colours. */
        $CIDRAM['FE']['DoughnutColours'] = [];

        /** Initialise doughnut legend. */
        $CIDRAM['FE']['DoughnutHTML'] = $CIDRAM['L10N']->getString('tip_click_the_component') . '<br /><ul class="pieul">';

        /** Building doughnut values. */
        foreach ($CIDRAM['Components']['Components'] as $CIDRAM['Components']['ThisName'] => $CIDRAM['Components']['ThisData']) {
            if (empty($CIDRAM['Components']['ThisData'])) {
                continue;
            }
            $CIDRAM['Components']['ThisSize'] = $CIDRAM['Components']['ThisData'];
            $CIDRAM['FormatFilesize']($CIDRAM['Components']['ThisSize']);
            $CIDRAM['Components']['ThisListed'] = '';
            if (!empty($CIDRAM['Components']['ComponentFiles'][$CIDRAM['Components']['ThisName']])) {
                $CIDRAM['Components']['ThisComponentFiles'] = &$CIDRAM['Components']['ComponentFiles'][$CIDRAM['Components']['ThisName']];
                arsort($CIDRAM['Components']['ThisComponentFiles']);
                $CIDRAM['Components']['ThisListed'] .= '<ul class="comSub">';
                foreach ($CIDRAM['Components']['ThisComponentFiles'] as $CIDRAM['Components']['ThisFile'] => $CIDRAM['Components']['ThisFileSize']) {
                    $CIDRAM['FormatFilesize']($CIDRAM['Components']['ThisFileSize']);
                    $CIDRAM['Components']['ThisListed'] .= sprintf(
                        '<li><span class="txtBl" style="font-size:0.9em">%s – %s</span></li>',
                        $CIDRAM['Components']['ThisFile'],
                        $CIDRAM['Components']['ThisFileSize']
                    );
                }
                $CIDRAM['Components']['ThisListed'] .= '</ul>';
            }
            $CIDRAM['Components']['ThisName'] .= ' – ' . $CIDRAM['Components']['ThisSize'];
            $CIDRAM['FE']['DoughnutValues'][] = $CIDRAM['Components']['ThisData'];
            $CIDRAM['FE']['DoughnutLabels'][] = $CIDRAM['Components']['ThisName'];
            if ($CIDRAM['DoughnutPath']) {
                $CIDRAM['Components']['ThisColour'] = $CIDRAM['RGB']($CIDRAM['Components']['ThisName']);
                $CIDRAM['Components']['RGB'] = implode(',', $CIDRAM['Components']['ThisColour']['Values']);
                $CIDRAM['FE']['DoughnutColours'][] = '#' . $CIDRAM['Components']['ThisColour']['Hash'];
                $CIDRAM['FE']['DoughnutHTML'] .= sprintf(
                    '<li style="background:linear-gradient(90deg,rgba(%1$s,%5$s),rgba(%1$s,%6$s));color:#%2$s"><span class="comCat"><span class="txtBl">%3$s</span></span>%4$s</li>',
                    $CIDRAM['Components']['RGB'],
                    $CIDRAM['Components']['ThisColour']['Hash'],
                    $CIDRAM['Components']['ThisName'],
                    $CIDRAM['Components']['ThisListed'],
                    $CIDRAM['FE']['FE_Align'] === 'left' ? '.3' : '0',
                    $CIDRAM['FE']['FE_Align'] === 'left' ? '0' : '.3'
                ) . "\n";
            } else {
                $CIDRAM['FE']['DoughnutHTML'] .= sprintf(
                    '<li><span class="comCat">%1$s</span>%2$s</li>',
                    $CIDRAM['Components']['ThisName'],
                    $CIDRAM['Components']['ThisListed']
                ) . "\n";
            }
        }

        /** Close doughnut legend and append necessary JavaScript for doughnut menu toggle. */
        $CIDRAM['FE']['DoughnutHTML'] .= '</ul>' . $CIDRAM['MenuToggle'];

        /** Finalise doughnut values. */
        $CIDRAM['FE']['DoughnutValues'] = '[' . implode(', ', $CIDRAM['FE']['DoughnutValues']) . ']';

        /** Finalise doughnut labels. */
        $CIDRAM['FE']['DoughnutLabels'] = '["' . implode('", "', $CIDRAM['FE']['DoughnutLabels']) . '"]';

        /** Finalise doughnut colours. */
        $CIDRAM['FE']['DoughnutColours'] = '["' . implode('", "', $CIDRAM['FE']['DoughnutColours']) . '"]';

        /** Finalise doughnut. */
        $CIDRAM['FE']['Doughnut'] = $CIDRAM['ParseVars']($CIDRAM['L10N']->Data + $CIDRAM['FE'], $CIDRAM['DoughnutFile']);
    }

    /** Cleanup. */
    unset($CIDRAM['DoughnutFile'], $CIDRAM['DoughnutPath'], $CIDRAM['Components']);

    /** Process files data. */
    array_walk($CIDRAM['FilesArray'], function ($ThisFile) use (&$CIDRAM) {
        $Base = '<option value="%s"%s>%s</option>';
        $ThisFile['ThisOptions'] = '';
        if (!$ThisFile['Directory'] || $CIDRAM['IsDirEmpty']($CIDRAM['Vault'] . $ThisFile['Filename'])) {
            $ThisFile['ThisOptions'] .= sprintf($Base, 'delete-file', ' class="txtRd"', $CIDRAM['L10N']->getString('field_delete'));
            $ThisFile['ThisOptions'] .= sprintf($Base, 'rename-file', $ThisFile['Directory'] && !$ThisFile['CanEdit'] ? ' selected' : '', $CIDRAM['L10N']->getString('field_rename_file'));
        }
        if ($ThisFile['CanEdit']) {
            $ThisFile['ThisOptions'] .= sprintf($Base, 'edit-file', ' selected', $CIDRAM['L10N']->getString('field_edit'));
        }
        if (!$ThisFile['Directory']) {
            $ThisFile['ThisOptions'] .= sprintf($Base, 'download-file', $ThisFile['CanEdit'] ? '' : ' selected', $CIDRAM['L10N']->getString('field_download_file'));
        }
        if ($ThisFile['ThisOptions']) {
            $ThisFile['ThisOptions'] =
                '<select name="do">' . $ThisFile['ThisOptions'] . '</select>' .
                '<input type="submit" value="' . $CIDRAM['L10N']->getString('field_ok') . '" class="auto" />';
        }
        $CIDRAM['FE']['FilesData'] .= $CIDRAM['ParseVars'](
            $CIDRAM['L10N']->Data + $CIDRAM['FE'] + $ThisFile,
            $CIDRAM['FE']['FilesRow']
        );
    });

    /** Total size. */
    $CIDRAM['FormatFilesize']($CIDRAM['FE']['TotalSize']);

    /** Disk free space. */
    $CIDRAM['FE']['FreeSpace'] = disk_free_space(__DIR__);

    /** Disk total space. */
    $CIDRAM['FE']['TotalSpace'] = disk_total_space(__DIR__);

    /** Disk total usage. */
    $CIDRAM['FE']['TotalUsage'] = $CIDRAM['FE']['TotalSpace'] - $CIDRAM['FE']['FreeSpace'];

    $CIDRAM['FormatFilesize']($CIDRAM['FE']['FreeSpace']);
    $CIDRAM['FormatFilesize']($CIDRAM['FE']['TotalSpace']);
    $CIDRAM['FormatFilesize']($CIDRAM['FE']['TotalUsage']);

    /** Send output. */
    echo $CIDRAM['SendOutput']();
}

/** Rate limiting. */
elseif ($CIDRAM['QueryVars']['cidram-page'] === 'rl' && $CIDRAM['FE']['Permissions'] === 1) {
    /** Page initial prepwork. */
    $CIDRAM['InitialPrepwork']($CIDRAM['L10N']->getString('link_rate_limiting'), $CIDRAM['L10N']->getString('tip_rate_limiting'));

    /** Maximum bandwidth for rate limiting. */
    $CIDRAM['RLMaxBandwidth'] = $CIDRAM['ReadBytes']($CIDRAM['Config']['rate_limiting']['max_bandwidth']);

    $CIDRAM['RLLowBandwidth'] = $CIDRAM['RLMaxBandwidth'] > 0 ? floor($CIDRAM['RLMaxBandwidth'] / 4) : 0;
    $CIDRAM['RLHighBandwidth'] = $CIDRAM['RLMaxBandwidth'] > 0 ? ceil(($CIDRAM['RLMaxBandwidth'] / 4) * 3) : 0;
    $CIDRAM['RLLowRequests'] = $CIDRAM['Config']['rate_limiting']['max_requests'] > 0 ? floor($CIDRAM['Config']['rate_limiting']['max_requests'] / 4) : 0;
    $CIDRAM['RLHighRequests'] = $CIDRAM['Config']['rate_limiting']['max_requests'] > 0 ? ceil(($CIDRAM['Config']['rate_limiting']['max_requests'] / 4) * 3) : 0;

    /** For entries to appear on the page. */
    $CIDRAM['FE']['Entries'] = '';

    if ($CIDRAM['Config']['rate_limiting']['max_requests'] > 0 || $CIDRAM['RLMaxBandwidth'] > 0) {
        if ($CIDRAM['Cache']->Using && $CIDRAM['Cache']->Using !== 'FF') {
            /** Get all entries for when using a non-flatfile cache strategy. */
            $CIDRAM['Entries'] = [];
            foreach ($CIDRAM['Cache']->getAllEntries() as $CIDRAM['EntryName'] => $CIDRAM['EntryData']) {
                if (preg_match('~^rl(?:-.+)?$~', $CIDRAM['EntryName'])) {
                    $CIDRAM['Entries'][$CIDRAM['EntryName']] = $CIDRAM['EntryData'];
                }
            }
        } else {
            /** Get all entries for when using a flatfile cache strategy. */
            $CIDRAM['Entries'] = [];
            foreach (new \RecursiveIteratorIterator(new \RecursiveDirectoryIterator($CIDRAM['Vault'], \RecursiveDirectoryIterator::FOLLOW_SYMLINKS), \RecursiveIteratorIterator::SELF_FIRST) as $CIDRAM['Item'] => $CIDRAM['AllFiles']) {
                if (preg_match('~rl\.dat$~i', $CIDRAM['Item'])) {
                    $CIDRAM['Entries']['rl'] = $CIDRAM['ReadFile']($CIDRAM['Item']);
                } elseif (preg_match('~rl(?:-(.+))?\.dat$~i', $CIDRAM['Item'], $CIDRAM['Matched'])) {
                    $CIDRAM['Entries']['rl-' . $CIDRAM['Matched'][1]] = $CIDRAM['ReadFile']($CIDRAM['Item']);
                }
            }
            unset($CIDRAM['Matched'], $CIDRAM['Item'], $CIDRAM['AllFiles']);
        }

        if (count($CIDRAM['Entries']) === 0) {
            /** Default message to display if there aren't any rate limiting records currently available. */
            $CIDRAM['FE']['Entries'] .= "\n" . sprintf('<tr><td class="center h4f" colspan="2"><div class="s">%s</div></td></tr>', $CIDRAM['L10N']->getString('label_no_data_available'));
        } else {
            /** Process all entries. */
            foreach ($CIDRAM['Entries'] as $CIDRAM['EntryName'] => $CIDRAM['EntryData']) {
                if ($CIDRAM['EntryName'] === 'rl') {
                    $CIDRAM['FE']['Entries'] .= "\n" . sprintf('<tr><td class="center h4f" colspan="2"><div class="s">%s</div></td></tr>', $CIDRAM['L10N']->getString('label_current_data'));
                } elseif (substr($CIDRAM['EntryName'], 0, 3) === 'rl-') {
                    $CIDRAM['FE']['Entries'] .= "\n" . sprintf('<tr><td class="center h4f" colspan="2"><div class="s">%s</div></td></tr>', sprintf(
                        $CIDRAM['L10N']->getString('label_current_data_for'),
                        substr($CIDRAM['EntryName'], 3)
                    ));
                }
                $CIDRAM['EntryData'] = $CIDRAM['ProcessRLUsage'](is_array($CIDRAM['EntryData']) && isset($CIDRAM['EntryData']['Data']) ? $CIDRAM['EntryData']['Data'] : $CIDRAM['EntryData']);
                if (count($CIDRAM['EntryData']) === 0) {
                    $CIDRAM['FE']['Entries'] .= "\n" . sprintf(
                        '<tr><td class="h3f" colspan="2"><div class="s">%s</div></td></tr>',
                        $CIDRAM['L10N']->getString('label_no_data_available')
                    );
                }
                foreach ($CIDRAM['EntryData'] as $CIDRAM['Address'] => $CIDRAM['EntryDetails']) {
                    $CIDRAM['EntryDetails']['Class'] = (
                        $CIDRAM['EntryDetails']['Bandwidth'] >= $CIDRAM['RLMaxBandwidth'] ||
                        $CIDRAM['EntryDetails']['Requests'] >= $CIDRAM['Config']['rate_limiting']['max_requests']
                    ) ? 'txtRd' : 's';
                    if ($CIDRAM['RLMaxBandwidth'] > 0) {
                        $CIDRAM['EntryDetails']['BandwidthUsed'] = $CIDRAM['EntryDetails']['Bandwidth'];
                        $CIDRAM['EntryDetails']['BandwidthAvailable'] = $CIDRAM['RLMaxBandwidth'] - $CIDRAM['EntryDetails']['Bandwidth'];
                        if ($CIDRAM['EntryDetails']['BandwidthAvailable'] < 1) {
                            $CIDRAM['EntryDetails']['BandwidthAvailable'] = 0;
                        }
                        $CIDRAM['FormatFilesize']($CIDRAM['EntryDetails']['BandwidthUsed']);
                        $CIDRAM['FormatFilesize']($CIDRAM['EntryDetails']['BandwidthAvailable']);
                    }
                    $CIDRAM['EntryDetails']['Bandwidth'] = $CIDRAM['RLMaxBandwidth'] > 0 ? sprintf(
                        '%s.<br /><meter min="0" max="%d" low="%d" high="%d" optimum="0" value="%d" style="width:100%%"></meter><br /><br />',
                        sprintf(
                            $CIDRAM['L10N']->getString('label_rl_bandwidth'),
                            $CIDRAM['EntryDetails']['BandwidthUsed'],
                            $CIDRAM['EntryDetails']['BandwidthAvailable']
                        ),
                        $CIDRAM['RLMaxBandwidth'],
                        $CIDRAM['RLLowBandwidth'],
                        $CIDRAM['RLHighBandwidth'],
                        $CIDRAM['EntryDetails']['Bandwidth']
                    ) : '';
                    $CIDRAM['EntryDetails']['RequestsAvailable'] = $CIDRAM['Config']['rate_limiting']['max_requests'] - $CIDRAM['EntryDetails']['Requests'];
                    if ($CIDRAM['EntryDetails']['RequestsAvailable'] < 1) {
                        $CIDRAM['EntryDetails']['RequestsAvailable'] = 0;
                    }
                    $CIDRAM['EntryDetails']['Requests'] = $CIDRAM['Config']['rate_limiting']['max_requests'] > 0 ? sprintf(
                        '%s.<br /><meter min="0" max="%d" low="%d" high="%d" optimum="0" value="%d" style="width:100%%"></meter><br /><br />',
                        sprintf(
                            $CIDRAM['L10N']->getString('label_rl_requests'),
                            $CIDRAM['NumberFormatter']->format($CIDRAM['EntryDetails']['Requests']),
                            $CIDRAM['NumberFormatter']->format($CIDRAM['EntryDetails']['RequestsAvailable'])
                        ),
                        $CIDRAM['Config']['rate_limiting']['max_requests'],
                        $CIDRAM['RLLowRequests'],
                        $CIDRAM['RLHighRequests'],
                        $CIDRAM['EntryDetails']['Requests']
                    ) : '';
                    $CIDRAM['FE']['Entries'] .= "\n" . sprintf('<tr><td class="h3"><div class="%s">%s</div></td>', $CIDRAM['EntryDetails']['Class'], $CIDRAM['Address']);
                    $CIDRAM['FE']['Entries'] .= "\n" . sprintf(
                        '<td class="h3f"><div class="s">%s%s%s</div></td></tr>',
                        $CIDRAM['EntryDetails']['Bandwidth'],
                        $CIDRAM['EntryDetails']['Requests'],
                        sprintf(
                            $CIDRAM['L10N']->getString('label_rl_when'),
                            $CIDRAM['RelativeTime']($CIDRAM['EntryDetails']['Newest']),
                            $CIDRAM['RelativeTime']($CIDRAM['EntryDetails']['Newest'] + $CIDRAM['Config']['rate_limiting']['allowance_period']->getAsSeconds()),
                            $CIDRAM['RelativeTime']($CIDRAM['EntryDetails']['Oldest']),
                            $CIDRAM['RelativeTime']($CIDRAM['EntryDetails']['Oldest'] + $CIDRAM['Config']['rate_limiting']['allowance_period']->getAsSeconds())
                        )
                    );
                }
            }
            unset($CIDRAM['EntryDetails'], $CIDRAM['Address'], $CIDRAM['EntryData'], $CIDRAM['EntryName']);
        }
        unset($CIDRAM['Entries']);
    } else {
        /** Display how to enable rate limiting if currently disabled. */
        $CIDRAM['FE']['state_msg'] .= '<span class="txtRd">' . $CIDRAM['L10N']->getString('tip_rate_limiting_disabled') . '</span><br />';
    }

    /** Calculate page load time (useful for debugging). */
    $CIDRAM['FE']['ProcessTime'] = microtime(true) - $_SERVER['REQUEST_TIME_FLOAT'];
    $CIDRAM['FE']['state_msg'] .= sprintf(
        $CIDRAM['L10N']->getPlural($CIDRAM['FE']['ProcessTime'], 'state_loadtime'),
        '<span class="txtRd">' . $CIDRAM['NumberFormatter']->format($CIDRAM['FE']['ProcessTime'], 3) . '</span>'
    );

    /** Parse output. */
    $CIDRAM['FE']['FE_Content'] = $CIDRAM['ParseVars'](
        $CIDRAM['L10N']->Data + $CIDRAM['FE'],
        $CIDRAM['ReadFile']($CIDRAM['GetAssetPath']('_rl.html'))
    );

    /** Send output. */
    echo $CIDRAM['SendOutput']();
}

/** Sections List. */
elseif ($CIDRAM['QueryVars']['cidram-page'] === 'sections' && $CIDRAM['FE']['Permissions'] === 1) {
    if (!$CIDRAM['FE']['ASYNC']) {
        /** Page initial prepwork. */
        $CIDRAM['InitialPrepwork']($CIDRAM['L10N']->getString('link_sections_list'), $CIDRAM['L10N']->getString('tip_sections_list'));

        /** Append async globals. */
        $CIDRAM['FE']['JS'] .=
            "function slx(a,b,c,d){window['SectionName']=a,window['Action']=b,$('POST','',['SectionName','Action'],null," .
            "function(e){hide(c),show(d,'block')},null)}";

        /** Add flags CSS. */
        if ($CIDRAM['FE']['Flags'] = file_exists($CIDRAM['Vault'] . 'fe_assets/flags.css')) {
            $CIDRAM['FE']['OtherHead'] .= "\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"?cidram-page=flags\" />";
        }

        /** Process signature files. */
        $CIDRAM['FE']['Data'] = (
            (empty($CIDRAM['Config']['signatures']['ipv4']) && empty($CIDRAM['Config']['signatures']['ipv6']))
        ) ? '    <div class="txtRd">' . $CIDRAM['L10N']->getString('warning_signatures_1') . "</div>\n" : $CIDRAM['SectionsHandler'](
            array_unique(explode(',', $CIDRAM['Config']['signatures']['ipv4'] . ',' . $CIDRAM['Config']['signatures']['ipv6']))
        );

        /** Calculate and append page load time, and append totals. */
        $CIDRAM['FE']['ProcessTime'] = microtime(true) - $_SERVER['REQUEST_TIME_FLOAT'];
        $CIDRAM['FE']['Data'] = '<div class="s">' . sprintf(
            $CIDRAM['L10N']->getPlural($CIDRAM['FE']['ProcessTime'], 'state_loadtime'),
            '<span class="txtRd">' . $CIDRAM['NumberFormatter']->format($CIDRAM['FE']['ProcessTime'], 3) . '</span>'
        ) . '<br />' . sprintf(
            $CIDRAM['L10N']->getString('state_sl_totals'),
            '<span class="txtRd">' . $CIDRAM['NumberFormatter']->format(isset($CIDRAM['FE']['SL_Signatures']) ? $CIDRAM['FE']['SL_Signatures'] : 0) . '</span>',
            '<span class="txtRd">' . $CIDRAM['NumberFormatter']->format(isset($CIDRAM['FE']['SL_Sections']) ? $CIDRAM['FE']['SL_Sections'] : 0) . '</span>',
            '<span class="txtRd">' . $CIDRAM['NumberFormatter']->format(isset($CIDRAM['FE']['SL_Files']) ? $CIDRAM['FE']['SL_Files'] : 0) . '</span>',
            '<span class="txtRd">' . $CIDRAM['NumberFormatter']->format(isset($CIDRAM['FE']['SL_Unique']) ? $CIDRAM['FE']['SL_Unique'] : 0) . '</span>'
        ) . '</div><hr />' . $CIDRAM['FE']['Data'];

        /** Parse output. */
        $CIDRAM['FE']['FE_Content'] = $CIDRAM['ParseVars'](
            $CIDRAM['L10N']->Data + $CIDRAM['FE'],
            $CIDRAM['ReadFile']($CIDRAM['GetAssetPath']('_sections.html'))
        );

        /** Send output. */
        echo $CIDRAM['SendOutput']();
    } elseif (isset($_POST['SectionName'], $_POST['Action'])) {
        /** Fetch current ignores data. */
        $CIDRAM['IgnoreData'] = $CIDRAM['ReadFile']($CIDRAM['Vault'] . 'ignore.dat') ?: '';

        if ($_POST['Action'] === 'unignore' && preg_match("~\nIgnore " . $_POST['SectionName'] . "\n~", $CIDRAM['IgnoreData'])) {
            $CIDRAM['IgnoreData'] = preg_replace("~\nIgnore " . $_POST['SectionName'] . "\n~", "\n", $CIDRAM['IgnoreData']);
            $CIDRAM['Handle'] = fopen($CIDRAM['Vault'] . 'ignore.dat', 'wb');
            fwrite($CIDRAM['Handle'], $CIDRAM['IgnoreData']);
            fclose($CIDRAM['Handle']);
        } elseif ($_POST['Action'] === 'ignore' && !preg_match("~\nIgnore " . $_POST['SectionName'] . "\n~", $CIDRAM['IgnoreData'])) {
            if (strpos($CIDRAM['IgnoreData'], "\n# End front-end generated ignore rules.") === false) {
                $CIDRAM['IgnoreData'] .= "\n# Begin front-end generated ignore rules.\n# End front-end generated ignore rules.\n";
            }
            $CIDRAM['IgnoreData'] = substr($CIDRAM['IgnoreData'], 0, strrpos(
                $CIDRAM['IgnoreData'],
                "# End front-end generated ignore rules.\n"
            )) . 'Ignore ' . $_POST['SectionName'] . "\n" . substr($CIDRAM['IgnoreData'], strrpos(
                $CIDRAM['IgnoreData'],
                "# End front-end generated ignore rules.\n"
            ));
            $CIDRAM['Handle'] = fopen($CIDRAM['Vault'] . 'ignore.dat', 'wb');
            fwrite($CIDRAM['Handle'], $CIDRAM['IgnoreData']);
            fclose($CIDRAM['Handle']);
        }

        /** Cleanup. */
        unset($CIDRAM['Handle'], $CIDRAM['IgnoreData']);
    }
}

/** Range Tables. */
elseif ($CIDRAM['QueryVars']['cidram-page'] === 'range' && $CIDRAM['FE']['Permissions'] === 1) {
    /** Page initial prepwork. */
    $CIDRAM['InitialPrepwork']($CIDRAM['L10N']->getString('link_range'), $CIDRAM['L10N']->getString('tip_range'));

    /** Append number localisation JS. */
    $CIDRAM['FE']['JS'] .= $CIDRAM['Number_L10N_JS']() . "\n";

    /** Add flags CSS. */
    if ($CIDRAM['FE']['Flags'] = file_exists($CIDRAM['Vault'] . 'fe_assets/flags.css')) {
        $CIDRAM['FE']['OtherHead'] .= "\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"?cidram-page=flags\" />";
    }

    /** Template for range rows. */
    $CIDRAM['FE']['RangeRow'] = $CIDRAM['ReadFile']($CIDRAM['GetAssetPath']('_range_row.html'));

    /** Process signature files and fetch returned JavaScript stuff. */
    $CIDRAM['FE']['JSFOOT'] = $CIDRAM['RangeTablesHandler'](
        array_unique(explode(',', $CIDRAM['Config']['signatures']['ipv4'])),
        array_unique(explode(',', $CIDRAM['Config']['signatures']['ipv6']))
    );

    /** Calculate and append page load time, and append totals. */
    $CIDRAM['FE']['ProcTime'] = microtime(true) - $_SERVER['REQUEST_TIME_FLOAT'];
    $CIDRAM['FE']['ProcTime'] = '<div class="s">' . sprintf(
        $CIDRAM['L10N']->getPlural($CIDRAM['FE']['ProcTime'], 'state_loadtime'),
        '<span class="txtRd">' . $CIDRAM['NumberFormatter']->format($CIDRAM['FE']['ProcTime'], 3) . '</span>'
    ) . '</div>';

    /** Parse output. */
    $CIDRAM['FE']['FE_Content'] = $CIDRAM['ParseVars'](
        $CIDRAM['L10N']->Data + $CIDRAM['FE'],
        $CIDRAM['ReadFile']($CIDRAM['GetAssetPath']('_range.html'))
    );

    /** Send output. */
    echo $CIDRAM['SendOutput']();
}

/** Range Intersector. */
elseif ($CIDRAM['QueryVars']['cidram-page'] === 'range-intersector' && $CIDRAM['FE']['Permissions'] === 1) {
    /** Page initial prepwork. */
    $CIDRAM['InitialPrepwork']($CIDRAM['L10N']->getString('link_range_intersector'), $CIDRAM['L10N']->getString('tip_range_intersector'));

    /** Output format. */
    $CIDRAM['OutputFormat'] = (isset($_POST['format']) && $_POST['format'] === 'Netmask') ? 1 : 0;

    /** Output format menu. */
    $CIDRAM['FE']['OutputFormat'] = sprintf(
        '%1$sCIDR" value="CIDR"%2$s%6$sformatCIDR">%3$s</label><br />%1$sNetmask" value="Netmask"%4$s%6$sformatNetmask">%5$s</label>',
        '<input type="radio" class="auto" name="format" id="format',
        $CIDRAM['OutputFormat'] !== 1 ? ' checked' : '',
        $CIDRAM['L10N']->getString('field_cidr'),
        $CIDRAM['OutputFormat'] === 1 ? ' checked' : '',
        $CIDRAM['L10N']->getString('field_netmask'),
        ' /><label class="s" for="'
    );

    /** Default values for inputs. */
    $CIDRAM['FE']['Intersector_A'] = isset($_POST['A']) ? $_POST['A'] : '';
    $CIDRAM['FE']['Intersector_B'] = isset($_POST['B']) ? $_POST['B'] : '';

    /** Default value for output. */
    $CIDRAM['FE']['Intersector_AB'] = '';

    /** Data was submitted for intersection. */
    if (isset($_POST['A'], $_POST['B'])) {
        $CIDRAM['Intersection'] = [
            'A' => str_replace("\r", '', trim($_POST['A'])),
            'B' => str_replace("\r", '', trim($_POST['B']))
        ];

        /** We'll aggregate the latter set before intersecting it with the former. */
        $CIDRAM['Aggregator'] = new \CIDRAM\Aggregator\Aggregator($CIDRAM);
        if ($CIDRAM['Intersection']['B']) {
            $CIDRAM['Intersection']['B'] = "\n" . $CIDRAM['Aggregator']->aggregate(
                $CIDRAM['Intersection']['B']
            ) . "\n";
        }

        /** Beginning intersection process here. */
        if ($CIDRAM['Intersection']['A'] && $CIDRAM['Intersection']['B']) {
            $CIDRAM['FE']['Intersector_AB'] = $CIDRAM['IntersectCIDR'](
                $CIDRAM['Intersection']['A'],
                $CIDRAM['Intersection']['B'],
                $CIDRAM['OutputFormat']
            );
        }

        /** Cleanup. */
        unset($CIDRAM['Intersection'], $CIDRAM['Aggregator']);
    }

    /** Calculate page load time (useful for debugging). */
    $CIDRAM['FE']['ProcessTime'] = microtime(true) - $_SERVER['REQUEST_TIME_FLOAT'];
    $CIDRAM['FE']['state_msg'] .= sprintf(
        $CIDRAM['L10N']->getPlural($CIDRAM['FE']['ProcessTime'], 'state_loadtime'),
        '<span class="txtRd">' . $CIDRAM['NumberFormatter']->format($CIDRAM['FE']['ProcessTime'], 3) . '</span>'
    );

    /** Parse output. */
    $CIDRAM['FE']['FE_Content'] = $CIDRAM['ParseVars'](
        $CIDRAM['L10N']->Data + $CIDRAM['FE'],
        $CIDRAM['ReadFile']($CIDRAM['GetAssetPath']('_range_intersector.html'))
    );

    /** Strip output row if input doesn't exist. */
    if ($CIDRAM['FE']['Intersector_AB'] !== '') {
        $CIDRAM['FE']['FE_Content'] = str_replace(['<!-- Output Begin -->', '<!-- Output End -->'], '', $CIDRAM['FE']['FE_Content']);
    } else {
        $CIDRAM['FE']['FE_Content'] =
            substr($CIDRAM['FE']['FE_Content'], 0, strpos($CIDRAM['FE']['FE_Content'], '<!-- Output Begin -->')) .
            substr($CIDRAM['FE']['FE_Content'], strpos($CIDRAM['FE']['FE_Content'], '<!-- Output End -->') + 19);
    }

    /** Send output. */
    echo $CIDRAM['SendOutput']();
}

/** Range Subtractor. */
elseif ($CIDRAM['QueryVars']['cidram-page'] === 'range-subtractor' && $CIDRAM['FE']['Permissions'] === 1) {
    /** Page initial prepwork. */
    $CIDRAM['InitialPrepwork']($CIDRAM['L10N']->getString('link_range_subtractor'), $CIDRAM['L10N']->getString('tip_range_subtractor'));

    /** Output format. */
    $CIDRAM['OutputFormat'] = (isset($_POST['format']) && $_POST['format'] === 'Netmask') ? 1 : 0;

    /** Output format menu. */
    $CIDRAM['FE']['OutputFormat'] = sprintf(
        '%1$sCIDR" value="CIDR"%2$s%6$sformatCIDR">%3$s</label><br />%1$sNetmask" value="Netmask"%4$s%6$sformatNetmask">%5$s</label>',
        '<input type="radio" class="auto" name="format" id="format',
        $CIDRAM['OutputFormat'] !== 1 ? ' checked' : '',
        $CIDRAM['L10N']->getString('field_cidr'),
        $CIDRAM['OutputFormat'] === 1 ? ' checked' : '',
        $CIDRAM['L10N']->getString('field_netmask'),
        ' /><label class="s" for="'
    );

    /** Default values for inputs. */
    $CIDRAM['FE']['Subtractor_A'] = isset($_POST['A']) ? $_POST['A'] : '';
    $CIDRAM['FE']['Subtractor_B'] = isset($_POST['B']) ? $_POST['B'] : '';

    /** Default value for output. */
    $CIDRAM['FE']['Subtractor_AB'] = '';

    /** Data was submitted for subtraction. */
    if (isset($_POST['A'], $_POST['B'])) {
        $CIDRAM['Subtraction'] = [
            'A' => str_replace("\r", '', trim($_POST['A'])),
            'B' => str_replace("\r", '', trim($_POST['B']))
        ];

        /**
         * We'll aggregate B prior to subtraction for better optimisation.
         */
        $CIDRAM['Aggregator'] = new \CIDRAM\Aggregator\Aggregator($CIDRAM);
        if ($CIDRAM['Subtraction']['B']) {
            $CIDRAM['Subtraction']['B'] = $CIDRAM['Aggregator']->aggregate(
                $CIDRAM['Subtraction']['B']
            ) . "\n";
        }

        /** Beginning subtraction process here. */
        if ($CIDRAM['Subtraction']['A'] && $CIDRAM['Subtraction']['B']) {
            $CIDRAM['FE']['Subtractor_AB'] = $CIDRAM['SubtractCIDR'](
                $CIDRAM['Subtraction']['A'],
                $CIDRAM['Subtraction']['B'],
                $CIDRAM['OutputFormat']
            );
        }

        /** Cleanup. */
        unset($CIDRAM['Subtraction'], $CIDRAM['Aggregator']);
    }

    /** Calculate page load time (useful for debugging). */
    $CIDRAM['FE']['ProcessTime'] = microtime(true) - $_SERVER['REQUEST_TIME_FLOAT'];
    $CIDRAM['FE']['state_msg'] .= sprintf(
        $CIDRAM['L10N']->getPlural($CIDRAM['FE']['ProcessTime'], 'state_loadtime'),
        '<span class="txtRd">' . $CIDRAM['NumberFormatter']->format($CIDRAM['FE']['ProcessTime'], 3) . '</span>'
    );

    /** Parse output. */
    $CIDRAM['FE']['FE_Content'] = $CIDRAM['ParseVars'](
        $CIDRAM['L10N']->Data + $CIDRAM['FE'],
        $CIDRAM['ReadFile']($CIDRAM['GetAssetPath']('_range_subtractor.html'))
    );

    /** Strip output row if input doesn't exist. */
    if ($CIDRAM['FE']['Subtractor_AB'] !== '') {
        $CIDRAM['FE']['FE_Content'] = str_replace(['<!-- Output Begin -->', '<!-- Output End -->'], '', $CIDRAM['FE']['FE_Content']);
    } else {
        $CIDRAM['FE']['FE_Content'] =
            substr($CIDRAM['FE']['FE_Content'], 0, strpos($CIDRAM['FE']['FE_Content'], '<!-- Output Begin -->')) .
            substr($CIDRAM['FE']['FE_Content'], strpos($CIDRAM['FE']['FE_Content'], '<!-- Output End -->') + 19);
    }

    /** Send output. */
    echo $CIDRAM['SendOutput']();
}

/** IP Aggregator. */
elseif ($CIDRAM['QueryVars']['cidram-page'] === 'ip-aggregator' && $CIDRAM['FE']['Permissions'] === 1) {
    /** Page initial prepwork. */
    $CIDRAM['InitialPrepwork']($CIDRAM['L10N']->getString('link_ip_aggregator'), $CIDRAM['L10N']->getString('tip_ip_aggregator'));

    /** Output format. */
    $CIDRAM['OutputFormat'] = (isset($_POST['format']) && $_POST['format'] === 'Netmask') ? 1 : 0;

    /** Whether to preserve tags and comments. */
    $CIDRAM['Preserve'] = (isset($_POST['preserve']) && $_POST['preserve'] === 'on') ? 1 : 0;

    /** Output format menu. */
    $CIDRAM['FE']['OutputFormat'] = sprintf(
        '%1$sCIDR" value="CIDR"%2$s%6$sformatCIDR">%3$s</label><br />%1$sNetmask" value="Netmask"%4$s%6$sformatNetmask">%5$s</label><br /><input type="checkbox" class="auto" name="preserve" id="preserve"%7$s%6$spreserve">%8$s</label>',
        '<input type="radio" class="auto" name="format" id="format',
        $CIDRAM['OutputFormat'] !== 1 ? ' checked' : '',
        $CIDRAM['L10N']->getString('field_cidr'),
        $CIDRAM['OutputFormat'] === 1 ? ' checked' : '',
        $CIDRAM['L10N']->getString('field_netmask'),
        ' /><label class="s" for="',
        $CIDRAM['Preserve'] === 1 ? ' checked' : '',
        $CIDRAM['L10N']->getString('field_preserve')
    );

    /** Data was submitted for aggregation. */
    if (!empty($_POST['input'])) {
        $CIDRAM['FE']['input'] = str_replace("\r", '', trim($_POST['input']));
        $CIDRAM['Aggregator'] = new \CIDRAM\Aggregator\Aggregator($CIDRAM, $CIDRAM['OutputFormat']);
        if ($CIDRAM['Preserve']) {
            $CIDRAM['NetResults'] = ['In' => 0, 'Rejected' => 0, 'Accepted' => 0, 'Merged' => 0, 'Out' => 0];
            $CIDRAM['StrObject'] = new \Maikuolan\Common\ComplexStringHandler(
                "\n" . $CIDRAM['FE']['input'] . "\n",
                $CIDRAM['RegExTags'],
                function ($Data) use (&$CIDRAM) {
                    if (!$Data = trim($Data)) {
                        return '';
                    }
                    $CIDRAM['Results'] = ['In' => 0, 'Rejected' => 0, 'Accepted' => 0, 'Merged' => 0, 'Out' => 0];
                    $Data = $CIDRAM['Aggregator']->aggregate($Data);
                    $CIDRAM['NetResults']['In'] += $CIDRAM['Results']['In'];
                    $CIDRAM['NetResults']['Rejected'] += $CIDRAM['Results']['Rejected'];
                    $CIDRAM['NetResults']['Accepted'] += $CIDRAM['Results']['Accepted'];
                    $CIDRAM['NetResults']['Merged'] += $CIDRAM['Results']['Merged'];
                    $CIDRAM['NetResults']['Out'] += $CIDRAM['Results']['Out'];
                    return $Data;
                }
            );
            $CIDRAM['StrObject']->iterateClosure(function ($Data) {
                return "\n" . $Data;
            }, true);
            $CIDRAM['FE']['output'] = trim($CIDRAM['StrObject']->recompile());
            $CIDRAM['Results'] = $CIDRAM['NetResults'];
            unset($CIDRAM['StrObject'], $CIDRAM['NetResults']);
        } else {
            $CIDRAM['Results'] = ['In' => 0, 'Rejected' => 0, 'Accepted' => 0, 'Merged' => 0, 'Out' => 0];
            $CIDRAM['FE']['output'] = $CIDRAM['Aggregator']->aggregate($CIDRAM['FE']['input']);
        }
        unset($CIDRAM['Aggregator']);
        $CIDRAM['FE']['ResultLine'] = sprintf(
            $CIDRAM['L10N']->getString('label_results'),
            '<span class="txtRd">' . $CIDRAM['NumberFormatter']->format($CIDRAM['Results']['In']) . '</span>',
            '<span class="txtRd">' . $CIDRAM['NumberFormatter']->format($CIDRAM['Results']['Rejected']) . '</span>',
            '<span class="txtRd">' . $CIDRAM['NumberFormatter']->format($CIDRAM['Results']['Accepted']) . '</span>',
            '<span class="txtRd">' . $CIDRAM['NumberFormatter']->format($CIDRAM['Results']['Merged']) . '</span>',
            '<span class="txtRd">' . $CIDRAM['NumberFormatter']->format($CIDRAM['Results']['Out']) . '</span>'
        );
    } else {
        $CIDRAM['FE']['output'] = $CIDRAM['FE']['input'] = '';
    }

    /** Calculate page load time (useful for debugging). */
    $CIDRAM['FE']['ProcessTime'] = microtime(true) - $_SERVER['REQUEST_TIME_FLOAT'];
    $CIDRAM['FE']['state_msg'] .= sprintf(
        $CIDRAM['L10N']->getPlural($CIDRAM['FE']['ProcessTime'], 'state_loadtime'),
        '<span class="txtRd">' . $CIDRAM['NumberFormatter']->format($CIDRAM['FE']['ProcessTime'], 3) . '</span>'
    );

    /** Parse output. */
    $CIDRAM['FE']['FE_Content'] = $CIDRAM['ParseVars'](
        $CIDRAM['L10N']->Data + $CIDRAM['FE'],
        $CIDRAM['ReadFile']($CIDRAM['GetAssetPath']('_ip_aggregator.html'))
    );

    /** Strip output row if input doesn't exist. */
    if ($CIDRAM['FE']['input']) {
        $CIDRAM['FE']['FE_Content'] = str_replace(['<!-- Output Begin -->', '<!-- Output End -->'], '', $CIDRAM['FE']['FE_Content']);
    } else {
        $CIDRAM['FE']['FE_Content'] =
            substr($CIDRAM['FE']['FE_Content'], 0, strpos($CIDRAM['FE']['FE_Content'], '<!-- Output Begin -->')) .
            substr($CIDRAM['FE']['FE_Content'], strpos($CIDRAM['FE']['FE_Content'], '<!-- Output End -->') + 19);
    }

    /** Send output. */
    echo $CIDRAM['SendOutput']();
}

/** IP Test. */
elseif ($CIDRAM['QueryVars']['cidram-page'] === 'ip-test' && $CIDRAM['FE']['Permissions'] === 1) {
    /** Page initial prepwork. */
    $CIDRAM['InitialPrepwork']($CIDRAM['L10N']->getString('link_ip_test'), $CIDRAM['L10N']->getString('tip_ip_test'));

    /** Add flags CSS. */
    if ($CIDRAM['FE']['Flags'] = file_exists($CIDRAM['Vault'] . 'fe_assets/flags.css')) {
        $CIDRAM['FE']['OtherHead'] .= "\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"?cidram-page=flags\" />";
    }

    /** Template for result rows. */
    $CIDRAM['FE']['IPTestRow'] = $CIDRAM['ReadFile']($CIDRAM['GetAssetPath']('_ip_test_row.html'));

    /** Initialise results data. */
    $CIDRAM['FE']['IPTestResults'] = '';

    /** Module switch for SimulateBlockEvent closure. */
    $CIDRAM['ModuleSwitch'] = !empty($_POST['ModuleSwitch']);

    /** Auxiliary switch for SimulateBlockEvent closure. */
    $CIDRAM['AuxSwitch'] = !empty($_POST['AuxSwitch']);

    /** Verification switch for SimulateBlockEvent closure. */
    $CIDRAM['VerificationSwitch'] = !empty($_POST['VerificationSwitch']);

    /** Module switch for HTML. */
    $CIDRAM['FE']['ModuleSwitch'] = $CIDRAM['ModuleSwitch'] ? ' checked' : '';

    /** Auxiliary switch for HTML. */
    $CIDRAM['FE']['AuxSwitch'] = $CIDRAM['AuxSwitch'] ? ' checked' : '';

    /** Verification switch for HTML. */
    $CIDRAM['FE']['VerificationSwitch'] = $CIDRAM['VerificationSwitch'] ? ' checked' : '';

    /** Fetch custom fields if specified. */
    foreach (['custom-query', 'custom-referrer', 'custom-ua'] as $CIDRAM['ThisField']) {
        $CIDRAM['FE'][$CIDRAM['ThisField']] = empty($_POST[$CIDRAM['ThisField']]) ? '' : $_POST[$CIDRAM['ThisField']];
    }
    unset($CIDRAM['ThisField']);

    /** Set field label. */
    if (!empty($_POST['ip-addr']) || empty($_POST['custom-ua'])) {
        $CIDRAM['FE']['TestItemLabel'] = $CIDRAM['L10N']->getString('field_ipaddr');
        $CIDRAM['FE']['TestMode'] = 1;
    } else {
        $CIDRAM['FE']['TestItemLabel'] = $CIDRAM['L10N']->getString('field_ua');
        $CIDRAM['FE']['TestMode'] = 2;
    }
    $CIDRAM['FE']['TestItemLabel'] = preg_replace($CIDRAM['RegExLabels'], '', $CIDRAM['FE']['TestItemLabel']);

    /** IPs were submitted for testing. */
    if (isset($_POST['ip-addr'])) {
        $CIDRAM['FE']['ip-addr'] = $_POST['ip-addr'];
        $_POST['ip-addr'] = array_unique(array_map(function ($IP) {
            return preg_replace('~[^\da-f:./]~i', '', $IP);
        }, explode("\n", $_POST['ip-addr'])));
        natsort($_POST['ip-addr']);
        $CIDRAM['ThisIP'] = [];
        foreach ($_POST['ip-addr'] as $CIDRAM['ThisIP']['IPAddress']) {
            if ($CIDRAM['FE']['TestMode'] === 1) {
                if (!strlen($CIDRAM['ThisIP']['IPAddress'])) {
                    continue;
                }
                $CIDRAM['SimulateBlockEvent']($CIDRAM['ThisIP']['IPAddress'], $CIDRAM['ModuleSwitch'], $CIDRAM['AuxSwitch'], $CIDRAM['VerificationSwitch']);
            } elseif ($CIDRAM['FE']['TestMode'] === 2) {
                $CIDRAM['SimulateBlockEvent']('', $CIDRAM['ModuleSwitch'], $CIDRAM['AuxSwitch'], $CIDRAM['VerificationSwitch']);
                $CIDRAM['ThisIP']['IPAddress'] = $CIDRAM['FE']['custom-ua'];
            }
            if (
                !empty($CIDRAM['Caught']) ||
                ($CIDRAM['FE']['TestMode'] === 1 && (empty($CIDRAM['LastTestIP']) || empty($CIDRAM['TestResults']))) ||
                !empty($CIDRAM['RunErrors']) ||
                !empty($CIDRAM['ModuleErrors']) ||
                !empty($CIDRAM['AuxErrors'])
            ) {
                $CIDRAM['ThisIP']['YesNo'] = $CIDRAM['L10N']->getString('response_error');
                $CIDRAM['ThisIP']['StatClass'] = 'txtOe';
                if (!empty($CIDRAM['AuxErrors'])) {
                    $CIDRAM['AuxErrorCounts'] = [];
                    foreach ($CIDRAM['AuxErrors'] as $CIDRAM['AuxError']) {
                        $CIDRAM['AuxError'][2] = 'auxiliary.yaml';
                        if (!empty($CIDRAM['AuxError'][4])) {
                            $CIDRAM['AuxError'][2] .= ':' . $CIDRAM['AuxError'][4];
                        }
                        if (isset($CIDRAM['AuxErrorCounts'][$CIDRAM['AuxError'][2]])) {
                            $CIDRAM['AuxErrorCounts'][$CIDRAM['AuxError'][2]]++;
                        } else {
                            $CIDRAM['AuxErrorCounts'][$CIDRAM['AuxError'][2]] = 1;
                        }
                    }
                    arsort($CIDRAM['AuxErrorCounts']);
                    foreach ($CIDRAM['AuxErrorCounts'] as $CIDRAM['AuxName'] => $CIDRAM['AuxError']) {
                        $CIDRAM['ThisIP']['YesNo'] .= sprintf(
                            ' – %s (%s)',
                            $CIDRAM['AuxName'],
                            $CIDRAM['NumberFormatter']->format($CIDRAM['AuxError'])
                        );
                    }
                    unset($CIDRAM['AuxName'], $CIDRAM['AuxError'], $CIDRAM['AuxErrorCounts'], $CIDRAM['AuxErrors']);
                }
                if (!empty($CIDRAM['ModuleErrors'])) {
                    $CIDRAM['ModuleErrorCounts'] = [];
                    foreach ($CIDRAM['ModuleErrors'] as $CIDRAM['ModuleError']) {
                        if (isset($CIDRAM['ModuleErrorCounts'][$CIDRAM['ModuleError'][2]])) {
                            $CIDRAM['ModuleErrorCounts'][$CIDRAM['ModuleError'][2]]++;
                        } else {
                            $CIDRAM['ModuleErrorCounts'][$CIDRAM['ModuleError'][2]] = 1;
                        }
                    }
                    arsort($CIDRAM['ModuleErrorCounts']);
                    foreach ($CIDRAM['ModuleErrorCounts'] as $CIDRAM['ModuleName'] => $CIDRAM['ModuleError']) {
                        $CIDRAM['ThisIP']['YesNo'] .= sprintf(
                            ' – %s (%s)',
                            $CIDRAM['ModuleName'],
                            $CIDRAM['NumberFormatter']->format($CIDRAM['ModuleError'])
                        );
                    }
                    unset($CIDRAM['ModuleName'], $CIDRAM['ModuleError'], $CIDRAM['ModuleErrorCounts'], $CIDRAM['ModuleErrors']);
                }
                if (!empty($CIDRAM['RunErrors'])) {
                    $CIDRAM['RunErrorCounts'] = [];
                    foreach ($CIDRAM['RunErrors'] as $CIDRAM['RunError']) {
                        if ($CIDRAM['RunError'][2] === 'functions.php' && !empty($CIDRAM['RunError'][4])) {
                            $CIDRAM['RunError'][2] = $CIDRAM['RunError'][4];
                        }
                        if (isset($CIDRAM['RunErrorCounts'][$CIDRAM['RunError'][2]])) {
                            $CIDRAM['RunErrorCounts'][$CIDRAM['RunError'][2]]++;
                        } else {
                            $CIDRAM['RunErrorCounts'][$CIDRAM['RunError'][2]] = 1;
                        }
                    }
                    arsort($CIDRAM['RunErrorCounts']);
                    foreach ($CIDRAM['RunErrorCounts'] as $CIDRAM['RunName'] => $CIDRAM['RunError']) {
                        $CIDRAM['ThisIP']['YesNo'] .= sprintf(
                            ' – %s (%s)',
                            $CIDRAM['RunName'],
                            $CIDRAM['NumberFormatter']->format($CIDRAM['RunError'])
                        );
                    }
                    unset($CIDRAM['RunName'], $CIDRAM['RunError'], $CIDRAM['RunErrorCounts'], $CIDRAM['RunErrors']);
                }
            } elseif ($CIDRAM['BlockInfo']['SignatureCount']) {
                $CIDRAM['BlockInfo']['WhyReason'] = preg_replace('~(?<=</span>\),|]\),)( )(?=[\dA-Za-z])~', '<br />', $CIDRAM['BlockInfo']['WhyReason']);
                $CIDRAM['ThisIP']['YesNo'] = $CIDRAM['L10N']->getString('response_yes') . ' – ' . $CIDRAM['BlockInfo']['WhyReason'];
                $CIDRAM['ThisIP']['StatClass'] = 'txtRd';
                if (
                    $CIDRAM['FE']['Flags'] &&
                    preg_match_all('~\[([A-Z]{2})\]~', $CIDRAM['ThisIP']['YesNo'], $CIDRAM['ThisIP']['Matches']) &&
                    !empty($CIDRAM['ThisIP']['Matches'][1])
                ) {
                    foreach ($CIDRAM['ThisIP']['Matches'][1] as $CIDRAM['ThisIP']['ThisMatch']) {
                        $CIDRAM['ThisIP']['YesNo'] = str_replace(
                            '[' . $CIDRAM['ThisIP']['ThisMatch'] . ']',
                            '<span class="flag ' . $CIDRAM['ThisIP']['ThisMatch'] . '"><span></span></span>',
                            $CIDRAM['ThisIP']['YesNo']
                        );
                    }
                }
                if ($CIDRAM['BlockInfo']['Ignored']) {
                    $CIDRAM['ThisIP']['YesNo'] .= sprintf(
                        ', +%s (%s)',
                        $CIDRAM['L10N']->getString('state_ignored'),
                        $CIDRAM['BlockInfo']['Ignored']
                    );
                }
            } elseif ($CIDRAM['BlockInfo']['Ignored']) {
                $CIDRAM['ThisIP']['YesNo'] = sprintf(
                    '%s (%s) – %s',
                    $CIDRAM['L10N']->getString('response_no'),
                    $CIDRAM['L10N']->getString('state_ignored'),
                    $CIDRAM['BlockInfo']['Ignored']
                );
                $CIDRAM['ThisIP']['StatClass'] = 'txtOe';
            } else {
                $CIDRAM['ThisIP']['YesNo'] = $CIDRAM['L10N']->getString('response_no');
                $CIDRAM['ThisIP']['StatClass'] = 'txtGn';
            }
            if ($CIDRAM['Aux Redirect'] && $CIDRAM['Aux Status Code']) {
                if ($CIDRAM['ThisIP']['StatClass'] === 'txtGn') {
                    $CIDRAM['ThisIP']['StatClass'] = 'txtOe';
                }
                $CIDRAM['ThisIP']['YesNo'] .= ' ' . $CIDRAM['LTRinRTF'](sprintf(
                    '%1$s <%2$d> ➡ %3$s',
                    '<br /><span style="text-transform:capitalize">++' . $CIDRAM['L10N']->getString('label_aux_actRdr') . '</span>',
                    $CIDRAM['Aux Status Code'],
                    '<code>' . $CIDRAM['Aux Redirect'] . '</code>'
                ));
            }
            if (!empty($CIDRAM['Flag Don\'t Log'])) {
                $CIDRAM['ThisIP']['YesNo'] .= '<br /><span style="text-transform:capitalize">++' . $CIDRAM['L10N']->getString('label_aux_actLog') . '</span>';
            }
            if (!empty($CIDRAM['Config']['recaptcha']['enabled'])) {
                $CIDRAM['ThisIP']['YesNo'] .= '<br />++' . $CIDRAM['L10N']->getString('label_aux_special_recaptcha_mark');
            }
            if (!empty($CIDRAM['Config']['hcaptcha']['enabled'])) {
                $CIDRAM['ThisIP']['YesNo'] .= '<br />++' . $CIDRAM['L10N']->getString('label_aux_special_hcaptcha_mark');
            }
            if (!empty($CIDRAM['Suppress output template'])) {
                $CIDRAM['ThisIP']['YesNo'] .= '<br />++' . $CIDRAM['L10N']->getString('label_aux_special_suppress');
            }
            if (!empty($CIDRAM['Tracking options override'])) {
                $CIDRAM['ThisIP']['YesNo'] .= '<br />++' . $CIDRAM['L10N']->getString('label_aux_special_tracking_extended');
            }
            if (isset($CIDRAM['Profile']) && is_array($CIDRAM['Profile']) && count($CIDRAM['Profile'])) {
                foreach ($CIDRAM['Profile'] as $CIDRAM['ThisProfile']) {
                    $CIDRAM['ThisIP']['YesNo'] .= '<br />++&lt;' . $CIDRAM['ThisProfile'] . '&gt;';
                }
            }
            $CIDRAM['ThisIP']['ID'] = preg_replace('~[^\dA-Za-z]~', '_', $CIDRAM['ThisIP']['IPAddress']);
            $CIDRAM['ThisIP']['IPAddressLink'] = (!empty($CIDRAM['FE']['CachedLogsLink']) && strpos($CIDRAM['FE']['CachedLogsLink'], 'logfile=') !== false) ? sprintf(
                '<a href="%s&search=%s">%s</a>',
                $CIDRAM['FE']['CachedLogsLink'],
                str_replace('=', '_', base64_encode($CIDRAM['ThisIP']['IPAddress'])),
                $CIDRAM['ThisIP']['IPAddress']
            ) : $CIDRAM['ThisIP']['IPAddress'];
            $CIDRAM['FE']['IPTestResults'] .= $CIDRAM['ParseVars'](
                $CIDRAM['L10N']->Data + $CIDRAM['ThisIP'],
                $CIDRAM['FE']['IPTestRow']
            );
        }
        unset($CIDRAM['ThisIP']);
    } else {
        $CIDRAM['FE']['ip-addr'] = '';
    }

    /** Calculate page load time (useful for debugging). */
    $CIDRAM['FE']['ProcessTime'] = microtime(true) - $_SERVER['REQUEST_TIME_FLOAT'];
    $CIDRAM['FE']['state_msg'] .= sprintf(
        $CIDRAM['L10N']->getPlural($CIDRAM['FE']['ProcessTime'], 'state_loadtime'),
        '<span class="txtRd">' . $CIDRAM['NumberFormatter']->format($CIDRAM['FE']['ProcessTime'], 3) . '</span>'
    );

    /** Parse output. */
    $CIDRAM['FE']['FE_Content'] = $CIDRAM['ParseVars'](
        $CIDRAM['L10N']->Data + $CIDRAM['FE'],
        $CIDRAM['ReadFile']($CIDRAM['GetAssetPath']('_ip_test.html'))
    );

    /** Send output. */
    echo $CIDRAM['SendOutput']();
}

/** IP Tracking. */
elseif ($CIDRAM['QueryVars']['cidram-page'] === 'ip-tracking' && $CIDRAM['FE']['Permissions'] === 1) {
    $CIDRAM['FE']['TrackingFilter'] = 'cidram-page=ip-tracking';
    $CIDRAM['FE']['TrackingFilterControls'] = '';
    $CIDRAM['FE']['TestItemLabel'] = preg_replace($CIDRAM['RegExLabels'], '', $CIDRAM['L10N']->getString('field_ipaddr'));
    $CIDRAM['StateModified'] = false;
    $CIDRAM['FilterSwitch'](
        ['tracking-blocked-already', 'tracking-aux', 'tracking-hide-banned-blocked'],
        isset($_POST['FilterSelector']) ? $_POST['FilterSelector'] : '',
        $CIDRAM['StateModified'],
        $CIDRAM['FE']['TrackingFilter'],
        $CIDRAM['FE']['TrackingFilterControls']
    );
    if ($CIDRAM['StateModified']) {
        header('Location: ?' . $CIDRAM['FE']['TrackingFilter']);
        die;
    }
    unset($CIDRAM['StateModified']);

    /** Temporarily mute signature files if "tracking-blocked-already" is false. */
    if (!$CIDRAM['FE']['tracking-blocked-already']) {
        $CIDRAM['TempMuted'] = [
            'IPv4' => $CIDRAM['Config']['signatures']['ipv4'],
            'IPv6' => $CIDRAM['Config']['signatures']['ipv6']
        ];
        $CIDRAM['Config']['signatures']['ipv4'] = '';
        $CIDRAM['Config']['signatures']['ipv6'] = '';
    }

    if (!$CIDRAM['FE']['ASYNC']) {
        /** Page initial prepwork. */
        $CIDRAM['InitialPrepwork']($CIDRAM['L10N']->getString('link_ip_tracking'), $CIDRAM['L10N']->getString('tip_ip_tracking'));

        /** Add flags CSS. */
        if ($CIDRAM['FE']['Flags'] = file_exists($CIDRAM['Vault'] . 'fe_assets/flags.css')) {
            $CIDRAM['FE']['OtherHead'] .= "\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"?cidram-page=flags\" />";
        }

        /** Template for result rows. */
        $CIDRAM['FE']['TrackingRow'] = $CIDRAM['ReadFile']($CIDRAM['GetAssetPath']('_ip_tracking_row.html'));
    }

    /** Initialise variables. */
    $CIDRAM['FE']['TrackingData'] = '';
    $CIDRAM['FE']['TrackingCount'] = '';
    $CIDRAM['FE']['NormalExpiryValue'] = $CIDRAM['Now'] + $CIDRAM['Config']['signatures']['default_tracktime'];
    $CIDRAM['FE']['NormalExpiry'] = $CIDRAM['RelativeTime']($CIDRAM['FE']['NormalExpiryValue']);
    $CIDRAM['FE']['ExtendedExpiryValue'] = $CIDRAM['Now'] + floor($CIDRAM['Config']['signatures']['default_tracktime'] * 52.1428571428571);
    $CIDRAM['FE']['ExtendedExpiry'] = $CIDRAM['RelativeTime']($CIDRAM['FE']['ExtendedExpiryValue']);
    $CIDRAM['FE']['1HourLabel'] = $CIDRAM['RelativeTime']($CIDRAM['Now'] + 3600);
    $CIDRAM['FE']['1DayLabel'] = $CIDRAM['RelativeTime']($CIDRAM['Now'] + 86400);
    $CIDRAM['FE']['1WeekLabel'] = $CIDRAM['RelativeTime']($CIDRAM['Now'] + 604800);
    $CIDRAM['FE']['1MonthLabel'] = $CIDRAM['RelativeTime']($CIDRAM['Now'] + 2592000);
    $CIDRAM['FE']['1YearLabel'] = $CIDRAM['RelativeTime']($CIDRAM['Now'] + 31557600);

    /** Generate confirm button. */
    $CIDRAM['FE']['Confirm-ClearAll'] = $CIDRAM['GenerateConfirm']($CIDRAM['L10N']->getString('field_clear_all'), 'trackForm');

    /** Clear, or remove an IP address from tracking. */
    if (isset($_POST['IPAddr'])) {
        if ($_POST['IPAddr'] === '*') {
            $CIDRAM['Tracking'] = [];
            $CIDRAM['Tracking-Modified'] = true;
            $CIDRAM['FE']['state_msg'] = $CIDRAM['L10N']->getString('response_tracking_cleared');
        } elseif (isset($CIDRAM['Tracking'][$_POST['IPAddr']])) {
            unset($CIDRAM['Tracking'][$_POST['IPAddr']]);
            $CIDRAM['Tracking-Modified'] = true;
            $CIDRAM['FE']['state_msg'] = sprintf($CIDRAM['L10N']->getString('response_tracking_removed'), $_POST['IPAddr']);
        }
    }

    /** Add an IP address to tracking. */
    if (isset($_POST['addNewAddress'], $_POST['addNewInfractions'], $_POST['addNewExpiryMenu'])) {
        if ($CIDRAM['FE']['state_msg']) {
            $CIDRAM['FE']['state_msg'] .= "<br />\n";
        }
        if ($CIDRAM['ExpandIPv4']($_POST['addNewAddress'], true) || $CIDRAM['ExpandIPv6']($_POST['addNewAddress'], true)) {
            $CIDRAM['Tracking'][$_POST['addNewAddress']] = [];
            if ($_POST['addNewExpiryMenu'] === 'Extended') {
                $CIDRAM['Tracking'][$_POST['addNewAddress']]['Time'] = floor($CIDRAM['Config']['signatures']['default_tracktime'] * 52.1428571428571);
            } elseif ($_POST['addNewExpiryMenu'] === 'Other' && isset($_POST['addNewExpiryOther'])) {
                $CIDRAM['Tracking'][$_POST['addNewAddress']]['Time'] = $_POST['addNewExpiryOther'];
            } else {
                $CIDRAM['Tracking'][$_POST['addNewAddress']]['Time'] = $CIDRAM['Config']['signatures']['default_tracktime'];
            }
            $CIDRAM['Tracking'][$_POST['addNewAddress']]['Time'] += $CIDRAM['Now'];
            $CIDRAM['Tracking'][$_POST['addNewAddress']]['Count'] = $_POST['addNewInfractions'];
            $CIDRAM['Tracking-Modified'] = true;
            $CIDRAM['FE']['state_msg'] .= sprintf($CIDRAM['L10N']->getString('response_tracking_added'), $_POST['addNewAddress']);
        } else {
            $CIDRAM['FE']['state_msg'] .= $CIDRAM['L10N']->getString('Short_BadIP') . '!';
        }
    }

    /** Count currently tracked IPs. */
    $CIDRAM['FE']['TrackingCount'] = count($CIDRAM['Tracking']);
    $CIDRAM['FE']['TrackingCount'] = sprintf(
        $CIDRAM['L10N']->getPlural($CIDRAM['FE']['TrackingCount'], 'state_tracking'),
        '<span class="txtRd">' . $CIDRAM['NumberFormatter']->format($CIDRAM['FE']['TrackingCount']) . '</span>'
    );

    if (!$CIDRAM['FE']['ASYNC']) {
        uasort($CIDRAM['Tracking'], function ($A, $B) {
            if (empty($A['Time']) || empty($B['Time']) || $A['Time'] === $B['Time']) {
                return 0;
            }
            return ($A['Time'] < $B['Time']) ? -1 : 1;
        });

        $CIDRAM['ThisTracking'] = [];
        foreach ($CIDRAM['Tracking'] as $CIDRAM['ThisTracking']['IPAddr'] => $CIDRAM['ThisTrackingArr']) {
            if (!isset($CIDRAM['ThisTrackingArr']['Time'], $CIDRAM['ThisTrackingArr']['Count'])) {
                continue;
            }

            /** Check whether normally blocked by signature files and/or auxiliary rules. */
            if ($CIDRAM['FE']['tracking-blocked-already'] || $CIDRAM['FE']['tracking-aux']) {
                $CIDRAM['SimulateBlockEvent']($CIDRAM['ThisTracking']['IPAddr'], false, $CIDRAM['FE']['tracking-aux'], false);
                $CIDRAM['ThisTracking']['Blocked'] = ($CIDRAM['Caught'] || $CIDRAM['BlockInfo']['SignatureCount']);
            } else {
                $CIDRAM['ThisTracking']['Blocked'] = false;
            }

            /** Hide banned/blocked IPs. */
            if ($CIDRAM['FE']['tracking-hide-banned-blocked'] && (
                $CIDRAM['ThisTracking']['Blocked'] || $CIDRAM['ThisTrackingArr']['Count'] >= $CIDRAM['Config']['signatures']['infraction_limit']
            )) {
                continue;
            }
            $CIDRAM['ThisTracking']['IPID'] = bin2hex($CIDRAM['ThisTracking']['IPAddr']);

            /** Set clearing option. */
            $CIDRAM['ThisTracking']['Options'] = (
                $CIDRAM['ThisTrackingArr']['Count'] > 0
            ) ?
                '<input type="button" class="auto" onclick="javascript:{window[\'IPAddr\']=\'' .
                $CIDRAM['ThisTracking']['IPAddr'] .
                '\';$(\'POST\',\'\',[\'IPAddr\'],function(){w(\'stateMsg\',\'' .
                $CIDRAM['L10N']->getString('state_loading') . '\')},function(e){w(\'stateMsg\',e);hideid(\'' .
                $CIDRAM['ThisTracking']['IPID'] . '\')},function(e){w(\'stateMsg\',e)})}" value="' .
                $CIDRAM['L10N']->getString('field_clear') . '" />'
            : '';

            /** When the entry expires. */
            $CIDRAM['ThisTracking']['Expiry'] = $CIDRAM['TimeFormat'](
                $CIDRAM['ThisTrackingArr']['Time'],
                $CIDRAM['Config']['general']['timeFormat']
            ) . '<br />(' . $CIDRAM['RelativeTime']($CIDRAM['ThisTrackingArr']['Time']) . ')';

            if ($CIDRAM['ThisTrackingArr']['Count'] >= $CIDRAM['Config']['signatures']['infraction_limit']) {
                $CIDRAM['ThisTracking']['StatClass'] = 'txtRd';
                $CIDRAM['ThisTracking']['Status'] = $CIDRAM['L10N']->getString('field_banned');
            } elseif ($CIDRAM['ThisTrackingArr']['Count'] >= ($CIDRAM['Config']['signatures']['infraction_limit'] / 2)) {
                $CIDRAM['ThisTracking']['StatClass'] = 'txtOe';
                $CIDRAM['ThisTracking']['Status'] = $CIDRAM['L10N']->getString('field_tracking');
            } else {
                $CIDRAM['ThisTracking']['StatClass'] = 's';
                $CIDRAM['ThisTracking']['Status'] = $CIDRAM['L10N']->getString('field_tracking');
            }
            if ($CIDRAM['ThisTracking']['Blocked']) {
                $CIDRAM['ThisTracking']['StatClass'] = 'txtRd';
                $CIDRAM['ThisTracking']['Status'] .= '/' . $CIDRAM['L10N']->getString('field_blocked');
            }
            $CIDRAM['ThisTracking']['Status'] .= ' – ' . $CIDRAM['NumberFormatter']->format($CIDRAM['ThisTrackingArr']['Count'], 0);
            $CIDRAM['ThisTracking']['TrackingFilter'] = $CIDRAM['FE']['TrackingFilter'];
            $CIDRAM['ThisTracking']['IPAddrLink'] = (!empty($CIDRAM['FE']['CachedLogsLink']) && strpos($CIDRAM['FE']['CachedLogsLink'], 'logfile=') !== false) ? sprintf(
                '<a href="%s&search=%s">%s</a>',
                $CIDRAM['FE']['CachedLogsLink'],
                str_replace('=', '_', base64_encode($CIDRAM['ThisTracking']['IPAddr'])),
                $CIDRAM['ThisTracking']['IPAddr']
            ) : $CIDRAM['ThisTracking']['IPAddr'];
            if (
                isset($CIDRAM['BlockInfo']['SignatureCount'], $CIDRAM['BlockInfo']['WhyReason']) &&
                strlen($CIDRAM['BlockInfo']['WhyReason'])
            ) {
                $CIDRAM['ThisTracking']['Status'] .= '<hr /><em>' . $CIDRAM['BlockInfo']['WhyReason'] . '</em>';
                if (
                    $CIDRAM['FE']['Flags'] &&
                    preg_match_all('~\[([A-Z]{2})\]~', $CIDRAM['ThisTracking']['Status'], $CIDRAM['ThisTracking']['Matches']) &&
                    !empty($CIDRAM['ThisTracking']['Matches'][1])
                ) {
                    foreach ($CIDRAM['ThisTracking']['Matches'][1] as $CIDRAM['ThisTracking']['ThisMatch']) {
                        $CIDRAM['ThisTracking']['Status'] = str_replace(
                            '[' . $CIDRAM['ThisTracking']['ThisMatch'] . ']',
                            '<span class="flag ' . $CIDRAM['ThisTracking']['ThisMatch'] . '"><span></span></span>',
                            $CIDRAM['ThisTracking']['Status']
                        );
                    }
                }
                unset($CIDRAM['ThisTracking']['Matches'], $CIDRAM['ThisTracking']['ThisMatch']);
            }
            $CIDRAM['ThisTracking']['ID'] = preg_replace('~[^\dA-Za-z]~', '_', $CIDRAM['ThisTracking']['IPAddr']);
            $CIDRAM['FE']['TrackingData'] .= $CIDRAM['ParseVars'](
                $CIDRAM['L10N']->Data + $CIDRAM['ThisTracking'],
                $CIDRAM['FE']['TrackingRow']
            );
        }
        unset($CIDRAM['ThisTrackingArr'], $CIDRAM['ThisTracking']);
    }

    /** Restore muted values. */
    if (isset($CIDRAM['TempMuted']['IPv4'], $CIDRAM['TempMuted']['IPv6'])) {
        $CIDRAM['Config']['signatures']['ipv4'] = $CIDRAM['TempMuted']['IPv4'];
        $CIDRAM['Config']['signatures']['ipv6'] = $CIDRAM['TempMuted']['IPv6'];
        unset($CIDRAM['TempMuted']);
    }

    /** Fix status display. */
    if ($CIDRAM['FE']['state_msg']) {
        $CIDRAM['FE']['state_msg'] .= '<br />';
    }

    if ($CIDRAM['FE']['TrackingCount']) {
        $CIDRAM['FE']['TrackingCount'] .= ' ';
    }

    /** Calculate page load time (useful for debugging). */
    $CIDRAM['FE']['ProcessTime'] = microtime(true) - $_SERVER['REQUEST_TIME_FLOAT'];
    $CIDRAM['FE']['TrackingCount'] .= sprintf(
        $CIDRAM['L10N']->getPlural($CIDRAM['FE']['ProcessTime'], 'state_loadtime'),
        '<span class="txtRd">' . $CIDRAM['NumberFormatter']->format($CIDRAM['FE']['ProcessTime'], 3) . '</span>'
    );

    if ($CIDRAM['FE']['ASYNC']) {
        /** Send output (async). */
        echo $CIDRAM['FE']['state_msg'] . $CIDRAM['FE']['TrackingCount'];
    } else {
        /** Parse output. */
        $CIDRAM['FE']['FE_Content'] = $CIDRAM['ParseVars'](
            $CIDRAM['L10N']->Data + $CIDRAM['FE'],
            $CIDRAM['ReadFile']($CIDRAM['GetAssetPath']('_ip_tracking.html'))
        );

        /** Send output. */
        echo $CIDRAM['SendOutput']();
    }
}

/** CIDR Calculator. */
elseif ($CIDRAM['QueryVars']['cidram-page'] === 'cidr-calc' && $CIDRAM['FE']['Permissions'] === 1) {
    /** Page initial prepwork. */
    $CIDRAM['InitialPrepwork']($CIDRAM['L10N']->getString('link_cidr_calc'), $CIDRAM['L10N']->getString('tip_cidr_calc'));

    /** Template for result rows. */
    $CIDRAM['FE']['CalcRow'] = $CIDRAM['ReadFile']($CIDRAM['GetAssetPath']('_cidr_calc_row.html'));

    /** Initialise results data. */
    $CIDRAM['FE']['Ranges'] = '';

    /** IPs were submitted for testing. */
    if (isset($_POST['cidr'])) {
        $CIDRAM['FE']['cidr'] = $_POST['cidr'];
        if ($_POST['cidr'] = preg_replace('~[^\da-f:./]~i', '', $_POST['cidr'])) {
            if (!$CIDRAM['CIDRs'] = $CIDRAM['ExpandIPv4']($_POST['cidr'])) {
                $CIDRAM['CIDRs'] = $CIDRAM['ExpandIPv6']($_POST['cidr']);
            }
        }
    } else {
        $CIDRAM['FE']['cidr'] = '';
    }

    /** Process CIDRs. */
    if (!empty($CIDRAM['CIDRs'])) {
        $CIDRAM['Factors'] = count($CIDRAM['CIDRs']);
        array_walk($CIDRAM['CIDRs'], function ($CIDR, $Key) use (&$CIDRAM) {
            $First = substr($CIDR, 0, strlen($CIDR) - strlen($Key + 1) - 1);
            if ($CIDRAM['Factors'] === 32) {
                $Last = $CIDRAM['IPv4GetLast']($First, $Key + 1);
            } elseif ($CIDRAM['Factors'] === 128) {
                $Last = $CIDRAM['IPv6GetLast']($First, $Key + 1);
            } else {
                $Last = $CIDRAM['L10N']->getString('response_error');
            }
            $Arr = ['CIDR' => $CIDR, 'ID' => preg_replace('~[^\dA-fa-f]~', '_', $CIDR), 'Range' => $First . ' – ' . $Last];
            $CIDRAM['FE']['Ranges'] .= $CIDRAM['ParseVars']($Arr, $CIDRAM['FE']['CalcRow']);
        });
    }

    /** Parse output. */
    $CIDRAM['FE']['FE_Content'] = $CIDRAM['ParseVars']($CIDRAM['L10N']->Data, $CIDRAM['ParseVars'](
        $CIDRAM['FE'],
        $CIDRAM['ReadFile']($CIDRAM['GetAssetPath']('_cidr_calc.html'))
    ));

    /** Send output. */
    echo $CIDRAM['SendOutput']();
}

/** Statistics. */
elseif ($CIDRAM['QueryVars']['cidram-page'] === 'statistics' && $CIDRAM['FE']['Permissions'] === 1) {
    /** Page initial prepwork. */
    $CIDRAM['InitialPrepwork']($CIDRAM['L10N']->getString('link_statistics'), $CIDRAM['L10N']->getString('tip_statistics'), false);

    /** Display how to enable statistics if currently disabled. */
    if ($CIDRAM['Config']['general']['statistics'] === false) {
        $CIDRAM['FE']['state_msg'] .= '<span class="txtRd">' . $CIDRAM['L10N']->getString('tip_statistics_disabled') . '</span><br />';
    }

    /** Generate confirm button. */
    $CIDRAM['FE']['Confirm-ClearAll'] = $CIDRAM['GenerateConfirm']($CIDRAM['L10N']->getString('field_clear_all'), 'statForm');

    /** Clear statistics. */
    if (!empty($_POST['ClearStats'])) {
        $CIDRAM['Cache']->deleteEntry('Statistics');
        $CIDRAM['FE']['state_msg'] .= $CIDRAM['L10N']->getString('response_statistics_cleared') . '<br />';
    } elseif ($CIDRAM['Config']['general']['statistics']) {
        /** Initialise statistics. */
        $CIDRAM['InitialiseCacheSection']('Statistics');
    }

    /** Statistics have been counted since... */
    $CIDRAM['FE']['Other-Since'] = empty($CIDRAM['Statistics']['Other-Since']) ? '-' : $CIDRAM['TimeFormat'](
        $CIDRAM['Statistics']['Other-Since'],
        $CIDRAM['Config']['general']['timeFormat']
    );

    /** Fetch and process various statistics. */
    foreach ([
        ['Blocked-IPv4', 'Blocked-Total', true],
        ['Blocked-IPv6', 'Blocked-Total', true],
        ['Blocked-Other', 'Blocked-Total', true],
        ['Banned-IPv4', 'Banned-Total', true],
        ['Banned-IPv6', 'Banned-Total', true],
        ['Passed-IPv4', 'Passed-Total', false],
        ['Passed-IPv6', 'Passed-Total', false],
        ['Passed-Other', 'Passed-Total', false],
        ['CAPTCHAs-Failed', 'CAPTCHAs-Total', true],
        ['CAPTCHAs-Passed', 'CAPTCHAs-Total', true]
    ] as $CIDRAM['TheseStats']) {
        if ($CIDRAM['TheseStats'][2] === false) {
            $CIDRAM['FE'][$CIDRAM['TheseStats'][0]] = $CIDRAM['L10N']->getString('field_not_tracking');
            $CIDRAM['FE'][$CIDRAM['TheseStats'][1]] = $CIDRAM['FE'][$CIDRAM['TheseStats'][0]];
            continue;
        }
        if (!isset($CIDRAM['FE'][$CIDRAM['TheseStats'][1]])) {
            $CIDRAM['FE'][$CIDRAM['TheseStats'][1]] = 0;
        }
        if (empty($CIDRAM['Statistics'][$CIDRAM['TheseStats'][0]])) {
            if ($CIDRAM['Config']['general']['statistics'] === false) {
                $CIDRAM['FE'][$CIDRAM['TheseStats'][0]] = $CIDRAM['L10N']->getString('field_not_tracking');
                continue;
            }
            $CIDRAM['FE'][$CIDRAM['TheseStats'][0]] = $CIDRAM['NumberFormatter']->format(0);
        } else {
            $CIDRAM['FE'][$CIDRAM['TheseStats'][1]] += $CIDRAM['Statistics'][$CIDRAM['TheseStats'][0]];
            $CIDRAM['FE'][$CIDRAM['TheseStats'][0]] = $CIDRAM['NumberFormatter']->format($CIDRAM['Statistics'][$CIDRAM['TheseStats'][0]]);
        }
    }

    /** Fetch and process totals. */
    foreach (['Blocked-Total', 'Banned-Total', 'Passed-Total', 'CAPTCHAs-Total'] as $CIDRAM['TheseStats']) {
        if (!isset($CIDRAM['FE'][$CIDRAM['TheseStats']]) || !is_int($CIDRAM['FE'][$CIDRAM['TheseStats']]) || (
            $CIDRAM['FE'][$CIDRAM['TheseStats']] === 0 && $CIDRAM['Config']['general']['statistics'] === false
        )) {
            $CIDRAM['FE'][$CIDRAM['TheseStats']] = $CIDRAM['L10N']->getString('field_not_tracking');
        } else {
            $CIDRAM['FE'][$CIDRAM['TheseStats']] = $CIDRAM['NumberFormatter']->format($CIDRAM['FE'][$CIDRAM['TheseStats']]);
        }
    }

    /** Active signature files. */
    foreach ([
        ['ipv4', 'Other-ActiveIPv4', 'ClassActiveIPv4'],
        ['ipv6', 'Other-ActiveIPv6', 'ClassActiveIPv6'],
        ['modules', 'Other-ActiveModules', 'ClassActiveModules']
    ] as $CIDRAM['TheseStats']) {
        if (empty($CIDRAM['Config']['signatures'][$CIDRAM['TheseStats'][0]])) {
            $CIDRAM['FE'][$CIDRAM['TheseStats'][1]] = $CIDRAM['NumberFormatter']->format(0);
            $CIDRAM['FE'][$CIDRAM['TheseStats'][2]] = 'txtRd';
        } else {
            $CIDRAM['FE'][$CIDRAM['TheseStats'][1]] = 0;
            foreach (explode(',', $CIDRAM['Config']['signatures'][$CIDRAM['TheseStats'][0]]) as $CIDRAM['StatWorking']) {
                if (strlen($CIDRAM['StatWorking']) && is_readable($CIDRAM['Vault'] . $CIDRAM['StatWorking'])) {
                    $CIDRAM['FE'][$CIDRAM['TheseStats'][1]]++;
                }
            }
            $CIDRAM['FE'][$CIDRAM['TheseStats'][1]] = $CIDRAM['NumberFormatter']->format(
                $CIDRAM['FE'][$CIDRAM['TheseStats'][1]]
            );
            $CIDRAM['FE'][$CIDRAM['TheseStats'][2]] = $CIDRAM['FE'][$CIDRAM['TheseStats'][1]] ? 'txtGn' : 'txtRd';
        }
    }

    /** Parse output. */
    $CIDRAM['FE']['FE_Content'] = $CIDRAM['ParseVars'](
        $CIDRAM['L10N']->Data + $CIDRAM['FE'],
        $CIDRAM['ReadFile']($CIDRAM['GetAssetPath']('_statistics.html'))
    );

    /** Send output. */
    echo $CIDRAM['SendOutput']();

    /** Cleanup. */
    unset($CIDRAM['StatWorking'], $CIDRAM['TheseStats']);
}

/** Auxiliary rules (view mode). */
elseif ($CIDRAM['QueryVars']['cidram-page'] === 'aux' && $CIDRAM['FE']['Permissions'] === 1) {
    /** Attempt to parse the auxiliary rules file. */
    if (!isset($CIDRAM['AuxData'])) {
        $CIDRAM['AuxData'] = [];
        $CIDRAM['YAML']->process($CIDRAM['ReadFile']($CIDRAM['Vault'] . 'auxiliary.yaml'), $CIDRAM['AuxData']);
    }

    /** Create new auxiliary rule. */
    if (isset($_POST['ruleName'], $_POST['conSourceType'], $_POST['conIfOrNot'], $_POST['conSourceValue'], $_POST['act'], $_POST['mtd'], $_POST['logic']) && $_POST['ruleName']) {
        /** Construct new rule array. */
        $CIDRAM['AuxData'][$_POST['ruleName']] = [];

        /** Construct new rule method. */
        if ($_POST['mtd'] === 'mtdReg') {
            $CIDRAM['AuxData'][$_POST['ruleName']]['Method'] = 'RegEx';
        } elseif ($_POST['mtd'] === 'mtdWin') {
            $CIDRAM['AuxData'][$_POST['ruleName']]['Method'] = 'WinEx';
        }

        /** Construct new rule notes. */
        if (isset($_POST['Notes']) && strlen($_POST['Notes'])) {
            $CIDRAM['AuxData'][$_POST['ruleName']]['Notes'] = $_POST['Notes'];
        }

        /** Construct other basic rule fields (e.g., match logic, block reason, etc). */
        foreach ([
            ['Logic', 'logic'],
            ['Reason', 'ruleReason'],
            ['Target', 'ruleTarget'],
            ['From', 'from'],
            ['Expiry', 'expiry'],
            ['Status Code', 'statusCode'],
            ['Webhooks', 'webhooks']
        ] as $CIDRAM['AuxTmp']) {
            if (!empty($_POST[$CIDRAM['AuxTmp'][1]])) {
                $CIDRAM['AuxData'][$_POST['ruleName']][$CIDRAM['AuxTmp'][0]] = $_POST[$CIDRAM['AuxTmp'][1]];
            }
        }
        unset($CIDRAM['AuxTmp']);

        /** Process webhooks. */
        if (!empty($CIDRAM['AuxData'][$_POST['ruleName']]['Webhooks'])) {
            $CIDRAM['Arrayify']($CIDRAM['AuxData'][$_POST['ruleName']]['Webhooks']);
            $CIDRAM['AuxData'][$_POST['ruleName']]['Webhooks'] = array_unique(
                array_filter($CIDRAM['AuxData'][$_POST['ruleName']]['Webhooks'])
            );
            if (!count($CIDRAM['AuxData'][$_POST['ruleName']]['Webhooks'])) {
                unset($CIDRAM['AuxData'][$_POST['ruleName']]['Webhooks']);
            }
        }

        /** Process other options and special flags. */
        foreach ($CIDRAM['Config']['Provide']['Auxiliary Rules']['Flags'] as $CIDRAM['FlagSetName'] => $CIDRAM['FlagSet']) {
            $CIDRAM['FlagSetKey'] = preg_replace('~[^A-Za-z]~', '', $CIDRAM['FlagSetName']);
            if (!isset($_POST[$CIDRAM['FlagSetKey']])) {
                continue;
            }
            foreach ($CIDRAM['FlagSet'] as $CIDRAM['FlagName'] => $CIDRAM['FlagData']) {
                if ($_POST[$CIDRAM['FlagSetKey']] === $CIDRAM['FlagName']) {
                    $CIDRAM['AuxData'][$_POST['ruleName']][$CIDRAM['FlagName']] = true;
                }
            }
        }
        unset($CIDRAM['FlagData'], $CIDRAM['FlagName'], $CIDRAM['FlagSetKey'], $CIDRAM['FlagSet'], $CIDRAM['FlagSetName']);

        /** Possible actions (other than block). */
        $CIDRAM['Actions'] = [
            'actWhl' => 'Whitelist',
            'actGrl' => 'Greylist',
            'actByp' => 'Bypass',
            'actLog' => 'Don\'t log',
            'actRdr' => 'Redirect',
            'actRun' => 'Run',
            'actPro' => 'Profile'
        ];

        /** Determine appropriate action for new rule. */
        $CIDRAM['Action'] = isset($CIDRAM['Actions'][$_POST['act']]) ? $CIDRAM['Actions'][$_POST['act']] : 'Block';

        /** Construct new rule action array. */
        if ($CIDRAM['Action'] === 'Run' && isset($_POST['ruleRun'])) {
            $CIDRAM['AuxData'][$_POST['ruleName']][$CIDRAM['Action']] = ['File' => $_POST['ruleRun'], 'If matches' => [], 'But not if matches' => []];
        } else {
            $CIDRAM['AuxData'][$_POST['ruleName']][$CIDRAM['Action']] = ['If matches' => [], 'But not if matches' => []];
        }

        /** Determine number of new rule conditions to construct. */
        $CIDRAM['AuxConditions'] = count($_POST['conSourceType']);

        /** Construct new rule conditions. */
        for ($CIDRAM['Iteration'] = 0; $CIDRAM['Iteration'] < $CIDRAM['AuxConditions']; $CIDRAM['Iteration']++) {
            /** Skip if something went wrong during form submission, or if the fields are empty. */
            if (
                empty($_POST['conSourceType'][$CIDRAM['Iteration']]) ||
                empty($_POST['conIfOrNot'][$CIDRAM['Iteration']]) ||
                empty($_POST['conSourceValue'][$CIDRAM['Iteration']])
            ) {
                continue;
            }

            /** Where to construct into. */
            $CIDRAM['ConstructInto'] = (
                $_POST['conIfOrNot'][$CIDRAM['Iteration']] === 'If'
            ) ? 'If matches' : 'But not if matches';

            /** Set source sub in rule if it doesn't already exist. */
            if (!isset($CIDRAM['AuxData'][$_POST['ruleName']][$CIDRAM['Action']][$CIDRAM['ConstructInto']][
                $_POST['conSourceType'][$CIDRAM['Iteration']]
            ])) {
                $CIDRAM['AuxData'][$_POST['ruleName']][$CIDRAM['Action']][$CIDRAM['ConstructInto']][
                    $_POST['conSourceType'][$CIDRAM['Iteration']]
                ] = [];
            }

            /** Construct expected condition values. */
            $CIDRAM['AuxData'][$_POST['ruleName']][$CIDRAM['Action']][$CIDRAM['ConstructInto']][
                $_POST['conSourceType'][$CIDRAM['Iteration']]
            ][] = $_POST['conSourceValue'][$CIDRAM['Iteration']];
        }

        /** Remove possible empty array. */
        if (empty($CIDRAM['AuxData'][$_POST['ruleName']][$CIDRAM['Action']]['If matches'])) {
            unset($CIDRAM['AuxData'][$_POST['ruleName']][$CIDRAM['Action']]['If matches']);
        }

        /** Remove possible empty array. */
        if (empty($CIDRAM['AuxData'][$_POST['ruleName']][$CIDRAM['Action']]['But not if matches'])) {
            unset($CIDRAM['AuxData'][$_POST['ruleName']][$CIDRAM['Action']]['But not if matches']);
        }

        /** Reconstruct and update auxiliary rules data. */
        if ($CIDRAM['NewAuxData'] = $CIDRAM['YAML']->reconstruct($CIDRAM['AuxData'])) {
            $CIDRAM['Handle'] = fopen($CIDRAM['Vault'] . 'auxiliary.yaml', 'wb');
            fwrite($CIDRAM['Handle'], $CIDRAM['NewAuxData']);
            fclose($CIDRAM['Handle']);
        }

        /** Cleanup. */
        unset($CIDRAM['NewAuxData'], $CIDRAM['ConstructInto'], $CIDRAM['Iteration'], $CIDRAM['AuxConditions'], $CIDRAM['Action']);

        /** Update state message. */
        $CIDRAM['FE']['state_msg'] = sprintf(
            $CIDRAM['L10N']->getString('response_aux_rule_created_successfully'),
            $_POST['ruleName']
        ) . '<br />';
    }

    /** Prepare data for display. */
    if (!$CIDRAM['FE']['ASYNC']) {
        /** Page initial prepwork. */
        $CIDRAM['InitialPrepwork']($CIDRAM['L10N']->getString('link_aux'), $CIDRAM['L10N']->getString('tip_aux'));

        /** Populate methods and actions. */
        $CIDRAM['PopulateMethodsActions']();

        /** Process auxiliary rules. */
        $CIDRAM['FE']['Data'] = '      ' . (
            file_exists($CIDRAM['Vault'] . 'auxiliary.yaml') ?
            $CIDRAM['AuxGenerateFEData']() :
            '<span class="s">' . $CIDRAM['L10N']->getString('response_aux_none') . '<br /><br /></span>'
        );

        /** Priority information about auxiliary rules. */
        $CIDRAM['FE']['Priority_Aux'] = sprintf(
            '%2$s%1$s%8$s%1$s(%9$s🔄%3$s🔄%4$s🔄%5$s🔄%6$s)%1$s%7$s',
            $CIDRAM['L10N']->Data['Text Direction'] !== 'rtl' ? '➡' : '⬅',
            $CIDRAM['L10N']->getString('label_aux_actWhl'),
            $CIDRAM['L10N']->getString('label_aux_actGrl'),
            $CIDRAM['L10N']->getString('label_aux_actBlk'),
            $CIDRAM['L10N']->getString('label_aux_actByp'),
            $CIDRAM['L10N']->getString('label_aux_actLog'),
            $CIDRAM['L10N']->getString('label_aux_actRdr'),
            $CIDRAM['L10N']->getString('label_aux_actRun') . '…',
            $CIDRAM['L10N']->getString('label_aux_actPro')
        );

        /** Priority information about status codes. */
        $CIDRAM['FE']['Priority_Status_Codes'] = sprintf(
            '%2$s%1$s%3$s%1$s%4$s%1$s%5$s%1$s%6$s%1$s%7$s%1$s%8$s',
            $CIDRAM['L10N']->Data['Text Direction'] !== 'rtl' ? '➡' : '⬅',
            '<code dir="ltr">ban_override(4xx🔄5xx)</code>',
            '<code dir="ltr">rate_limiting(429)</code>',
            '<code dir="ltr">silent_mode(301)</code>',
            $CIDRAM['L10N']->getString('link_aux') . '<code dir="ltr">(4xx🔄5xx)</code>',
            '<code dir="ltr">forbid_on_block(xxx)</code>',
            $CIDRAM['L10N']->getString('link_aux') . '<code dir="ltr">(30x)</code>',
            $CIDRAM['L10N']->getString('label_other')
        );

        /** Provides the "other options and special flags" to the default view mode new rule creation. */
        $CIDRAM['FE']['AuxFlagsProvides'] = '';
        foreach ($CIDRAM['Config']['Provide']['Auxiliary Rules']['Flags'] as $CIDRAM['FlagSetName'] => $CIDRAM['FlagSet']) {
            $CIDRAM['FlagKey'] = preg_replace('~[^A-Za-z]~', '', $CIDRAM['FlagSetName']);
            $CIDRAM['Options'] = sprintf('<select name="%s" class="auto"><option value="Default State" selected>%s</option>', $CIDRAM['FlagKey'], $CIDRAM['L10N']->getString('label_aux_special_default_state'));
            foreach ($CIDRAM['FlagSet'] as $CIDRAM['FlagName'] => $CIDRAM['FlagData']) {
                $CIDRAM['Options'] .= sprintf(
                    '<option value="%s">%s</option>',
                    $CIDRAM['FlagName'],
                    isset($CIDRAM['FlagData']['Label']) ? ($CIDRAM['L10N']->getString($CIDRAM['FlagData']['Label']) ?: $CIDRAM['FlagName']) : $CIDRAM['FlagName']
                );
            }
            $CIDRAM['Options'] .= '</select><br /><br />';
            $CIDRAM['FE']['AuxFlagsProvides'] .= sprintf(
                '<div class="iLabl s"><label for="%s">%s</label></div><div class="iCntn">%s</div>',
                $CIDRAM['FlagKey'],
                $CIDRAM['FlagSetName'] . $CIDRAM['L10N']->getString('pair_separator'),
                $CIDRAM['Options']
            );
        }
        unset($CIDRAM['FlagData'], $CIDRAM['FlagName'], $CIDRAM['Options'], $CIDRAM['FlagKey'], $CIDRAM['FlagSet'], $CIDRAM['FlagSetName']);

        /** Calculate page load time (useful for debugging). */
        $CIDRAM['FE']['ProcessTime'] = microtime(true) - $_SERVER['REQUEST_TIME_FLOAT'];
        $CIDRAM['FE']['state_msg'] .= sprintf(
            $CIDRAM['L10N']->getPlural($CIDRAM['FE']['ProcessTime'], 'state_loadtime'),
            '<span class="txtRd">' . $CIDRAM['NumberFormatter']->format($CIDRAM['FE']['ProcessTime'], 3) . '</span>'
        );

        /** Parse output. */
        $CIDRAM['FE']['FE_Content'] = $CIDRAM['ParseVars'](
            $CIDRAM['L10N']->Data + $CIDRAM['FE'],
            $CIDRAM['ReadFile']($CIDRAM['GetAssetPath']('_aux.html'))
        ) . $CIDRAM['MenuToggle'];

        /** Send output. */
        echo $CIDRAM['SendOutput']();
    } elseif (isset($_POST['auxD'], $CIDRAM['AuxData'][$_POST['auxD']])) {
        /** Delete an auxiliary rule. */
        unset($CIDRAM['AuxData'][$_POST['auxD']]);

        /** Reconstruct and update auxiliary rules data. */
        if (!$CIDRAM['ReconstructUpdateAuxData']() && file_exists($CIDRAM['Vault'] . 'auxiliary.yaml')) {
            /** If auxiliary rules data reconstruction fails, or if it's empty, delete the file. */
            unlink($CIDRAM['Vault'] . 'auxiliary.yaml');
        }

        /** Confirm successful deletion. */
        echo sprintf($CIDRAM['L10N']->getString('response_aux_rule_deleted_successfully'), $_POST['auxD']);
    } elseif (isset($_POST['auxT'])) {
        /** Move an auxiliary rule to the top of the list. */
        $CIDRAM['AuxData'] = $CIDRAM['SwapAssocArrayElementTopBottom']($CIDRAM['AuxData'], $_POST['auxT'], false);
        $CIDRAM['ReconstructUpdateAuxData']();
    } elseif (isset($_POST['auxB'])) {
        /** Move an auxiliary rule to the bottom of the list. */
        $CIDRAM['AuxData'] = $CIDRAM['SwapAssocArrayElementTopBottom']($CIDRAM['AuxData'], $_POST['auxB'], true);
        $CIDRAM['ReconstructUpdateAuxData']();
    } elseif (isset($_POST['auxMU'])) {
        /** Move an auxiliary rule up one position. */
        $CIDRAM['AuxData'] = $CIDRAM['SwapAssocArrayElementUpDown']($CIDRAM['AuxData'], $_POST['auxMU'], false);
        $CIDRAM['ReconstructUpdateAuxData']();
    } elseif (isset($_POST['auxMD'])) {
        /** Move an auxiliary rule down one position. */
        $CIDRAM['AuxData'] = $CIDRAM['SwapAssocArrayElementUpDown']($CIDRAM['AuxData'], $_POST['auxMD'], true);
        $CIDRAM['ReconstructUpdateAuxData']();
    } elseif (isset($_POST['auxDR'], $CIDRAM['AuxData'][$_POST['auxDR']])) {
        /** Disable an auxiliary rule. */
        $CIDRAM['AuxData'][$_POST['auxDR']]['Disable this rule'] = true;
        $CIDRAM['ReconstructUpdateAuxData']();
    } elseif (isset($_POST['auxER'], $CIDRAM['AuxData'][$_POST['auxER']])) {
        /** Enable an auxiliary rule. */
        unset($CIDRAM['AuxData'][$_POST['auxER']]['Disable this rule']);
        $CIDRAM['ReconstructUpdateAuxData']();
    }
}

/** Auxiliary rules (edit mode). */
elseif ($CIDRAM['QueryVars']['cidram-page'] === 'aux-edit' && $CIDRAM['FE']['Permissions'] === 1) {
    /** Page initial prepwork. */
    $CIDRAM['InitialPrepwork']($CIDRAM['L10N']->getString('link_aux'), $CIDRAM['L10N']->getString('tip_aux'));

    /** Populate methods and actions. */
    $CIDRAM['PopulateMethodsActions']();

    /** Avoid max_input_vars limitations. */
    $CIDRAM['ProcessMinifiedFormData']('minifiedFormData');

    /** Update auxiliary rules. */
    if (isset($_POST['rulePriority']) && is_array($_POST['rulePriority'])) {
        $CIDRAM['NewAuxArr'] = [];
        foreach ($_POST['rulePriority'] as $CIDRAM['Iterant'] => $CIDRAM['Priority']) {
            if (
                !isset($_POST['ruleName'][$CIDRAM['Iterant']]) ||
                !strlen($_POST['ruleName'][$CIDRAM['Iterant']]) ||
                $_POST['ruleName'][$CIDRAM['Iterant']] === ' '
            ) {
                continue;
            }
            $CIDRAM['NewAuxArr'][$_POST['ruleName'][$CIDRAM['Iterant']]] = ['Priority' => $CIDRAM['Priority']];
            if (!empty($_POST['mtd'][$CIDRAM['Iterant']])) {
                if ($_POST['mtd'][$CIDRAM['Iterant']] === 'mtdReg') {
                    $CIDRAM['NewAuxArr'][$_POST['ruleName'][$CIDRAM['Iterant']]]['Method'] = 'RegEx';
                } elseif ($_POST['mtd'][$CIDRAM['Iterant']] === 'mtdWin') {
                    $CIDRAM['NewAuxArr'][$_POST['ruleName'][$CIDRAM['Iterant']]]['Method'] = 'WinEx';
                }
            }
            if (!empty($_POST['Notes'][$CIDRAM['Iterant']])) {
                $CIDRAM['NewAuxArr'][$_POST['ruleName'][$CIDRAM['Iterant']]]['Notes'] = $_POST['Notes'][$CIDRAM['Iterant']];
            }
            if (!empty($_POST['logic'][$CIDRAM['Iterant']])) {
                $CIDRAM['NewAuxArr'][$_POST['ruleName'][$CIDRAM['Iterant']]]['Logic'] = $_POST['logic'][$CIDRAM['Iterant']];
            }
            if (!empty($_POST['ruleReason'][$CIDRAM['Iterant']])) {
                $CIDRAM['NewAuxArr'][$_POST['ruleName'][$CIDRAM['Iterant']]]['Reason'] = $_POST['ruleReason'][$CIDRAM['Iterant']];
            }
            if (!empty($_POST['ruleTarget'][$CIDRAM['Iterant']])) {
                $CIDRAM['NewAuxArr'][$_POST['ruleName'][$CIDRAM['Iterant']]]['Target'] = $_POST['ruleTarget'][$CIDRAM['Iterant']];
            }
            if (!empty($_POST['ruleRun'][$CIDRAM['Iterant']])) {
                $CIDRAM['NewAuxArr'][$_POST['ruleName'][$CIDRAM['Iterant']]]['Run'] = ['File' => $_POST['ruleRun'][$CIDRAM['Iterant']]];
            }
            if (!empty($_POST['from'][$CIDRAM['Iterant']])) {
                $CIDRAM['NewAuxArr'][$_POST['ruleName'][$CIDRAM['Iterant']]]['From'] = $_POST['from'][$CIDRAM['Iterant']];
            }
            if (!empty($_POST['expiry'][$CIDRAM['Iterant']])) {
                $CIDRAM['NewAuxArr'][$_POST['ruleName'][$CIDRAM['Iterant']]]['Expiry'] = $_POST['expiry'][$CIDRAM['Iterant']];
            }
            if (!empty($_POST['statusCode'][$CIDRAM['Iterant']])) {
                $CIDRAM['NewAuxArr'][$_POST['ruleName'][$CIDRAM['Iterant']]]['Status Code'] = $_POST['statusCode'][$CIDRAM['Iterant']];
            }
            $CIDRAM['NewAuxArr'][$_POST['ruleName'][$CIDRAM['Iterant']]]['Action'] = isset($_POST['act'][$CIDRAM['Iterant']]) ? $_POST['act'][$CIDRAM['Iterant']] : '';
            if ($CIDRAM['NewAuxArr'][$_POST['ruleName'][$CIDRAM['Iterant']]]['Action'] !== 'actRun') {
                unset($CIDRAM['NewAuxArr'][$_POST['ruleName'][$CIDRAM['Iterant']]]['Run']);
            }
            $CIDRAM['NewAuxArr'][$_POST['ruleName'][$CIDRAM['Iterant']]]['SourceType'] = isset($_POST['conSourceType'][$CIDRAM['Iterant']]) ? $_POST['conSourceType'][$CIDRAM['Iterant']] : '';
            $CIDRAM['NewAuxArr'][$_POST['ruleName'][$CIDRAM['Iterant']]]['IfOrNot'] = isset($_POST['conIfOrNot'][$CIDRAM['Iterant']]) ? $_POST['conIfOrNot'][$CIDRAM['Iterant']] : '';
            $CIDRAM['NewAuxArr'][$_POST['ruleName'][$CIDRAM['Iterant']]]['SourceValue'] = isset($_POST['conSourceValue'][$CIDRAM['Iterant']]) ? $_POST['conSourceValue'][$CIDRAM['Iterant']] : '';
            foreach ($CIDRAM['Config']['Provide']['Auxiliary Rules']['Flags'] as $CIDRAM['FlagSetName'] => $CIDRAM['FlagSet']) {
                $CIDRAM['FlagSetKey'] = preg_replace('~[^A-Za-z]~', '', $CIDRAM['FlagSetName']);
                if (!empty($_POST[$CIDRAM['FlagSetKey']][$CIDRAM['Iterant']])) {
                    foreach ($CIDRAM['FlagSet'] as $CIDRAM['FlagName'] => $CIDRAM['FlagData']) {
                        if ($_POST[$CIDRAM['FlagSetKey']][$CIDRAM['Iterant']] === $CIDRAM['FlagName']) {
                            $CIDRAM['NewAuxArr'][$_POST['ruleName'][$CIDRAM['Iterant']]][$CIDRAM['FlagName']] = true;
                        }
                    }
                }
            }
        }
        unset($CIDRAM['FlagData'], $CIDRAM['FlagName'], $CIDRAM['FlagSetKey'], $CIDRAM['FlagSetName'], $CIDRAM['FlagSet']);
        uasort($CIDRAM['NewAuxArr'], function ($A, $B) {
            if ($A['Priority'] === $B['Priority']) {
                return 0;
            }
            if (!strlen($A['Priority'])) {
                return strlen($B['Priority']) ? -1 : 0;
            }
            if (!strlen($B['Priority'])) {
                return strlen($A['Priority']) ? 1 : 0;
            }
            return $A['Priority'] < $B['Priority'] ? -1 : 1;
        });
        foreach ($CIDRAM['NewAuxArr'] as $CIDRAM['Iterant'] => &$CIDRAM['Data']) {
            if ($CIDRAM['Data']['Action'] === 'actWhl') {
                $CIDRAM['Data']['Action'] = 'Whitelist';
            } elseif ($CIDRAM['Data']['Action'] === 'actGrl') {
                $CIDRAM['Data']['Action'] = 'Greylist';
            } elseif ($CIDRAM['Data']['Action'] === 'actBlk') {
                $CIDRAM['Data']['Action'] = 'Block';
            } elseif ($CIDRAM['Data']['Action'] === 'actByp') {
                $CIDRAM['Data']['Action'] = 'Bypass';
            } elseif ($CIDRAM['Data']['Action'] === 'actLog') {
                $CIDRAM['Data']['Action'] = 'Don\'t log';
            } elseif ($CIDRAM['Data']['Action'] === 'actRdr') {
                $CIDRAM['Data']['Action'] = 'Redirect';
            } elseif ($CIDRAM['Data']['Action'] === 'actRun') {
                $CIDRAM['Data']['Action'] = 'Run';
            } elseif ($CIDRAM['Data']['Action'] === 'actPro') {
                $CIDRAM['Data']['Action'] = 'Profile';
            }
            if (is_array($CIDRAM['Data']['SourceType'])) {
                foreach ($CIDRAM['Data']['SourceType'] as $CIDRAM['IterantInner'] => $CIDRAM['DataInner']) {
                    if (!isset(
                        $CIDRAM['Data']['IfOrNot'][$CIDRAM['IterantInner']],
                        $CIDRAM['Data']['SourceValue'][$CIDRAM['IterantInner']]
                    ) || $CIDRAM['Data']['SourceValue'][$CIDRAM['IterantInner']] === '') {
                        continue;
                    }
                    if (!isset($CIDRAM['Data'][$CIDRAM['Data']['Action']])) {
                        $CIDRAM['Data'][$CIDRAM['Data']['Action']] = [];
                    }
                    if ($CIDRAM['Data']['IfOrNot'][$CIDRAM['IterantInner']] === 'If') {
                        if (!isset($CIDRAM['Data'][$CIDRAM['Data']['Action']]['If matches'])) {
                            $CIDRAM['Data'][$CIDRAM['Data']['Action']]['If matches'] = [];
                        }
                        if (!isset($CIDRAM['Data'][$CIDRAM['Data']['Action']]['If matches'][$CIDRAM['DataInner']])) {
                            $CIDRAM['Data'][$CIDRAM['Data']['Action']]['If matches'][$CIDRAM['DataInner']] = [];
                        }
                        $CIDRAM['Data'][$CIDRAM['Data']['Action']]['If matches'][$CIDRAM['DataInner']][] = $CIDRAM['Data']['SourceValue'][$CIDRAM['IterantInner']];
                    } elseif ($CIDRAM['Data']['IfOrNot'][$CIDRAM['IterantInner']] === 'Not') {
                        if (!isset($CIDRAM['Data'][$CIDRAM['Data']['Action']]['But not if matches'])) {
                            $CIDRAM['Data'][$CIDRAM['Data']['Action']]['But not if matches'] = [];
                        }
                        if (!isset($CIDRAM['Data'][$CIDRAM['Data']['Action']]['But not if matches'][$CIDRAM['DataInner']])) {
                            $CIDRAM['Data'][$CIDRAM['Data']['Action']]['But not if matches'][$CIDRAM['DataInner']] = [];
                        }
                        $CIDRAM['Data'][$CIDRAM['Data']['Action']]['But not if matches'][$CIDRAM['DataInner']][] = $CIDRAM['Data']['SourceValue'][$CIDRAM['IterantInner']];
                    }
                }
            }
            unset($CIDRAM['Data']['Priority'], $CIDRAM['Data']['SourceType'], $CIDRAM['Data']['IfOrNot'], $CIDRAM['Data']['SourceValue'], $CIDRAM['Data']['Action']);
        }

        /** Reconstruct and update auxiliary rules data. */
        if ($CIDRAM['NewAuxArr'] = $CIDRAM['YAML']->reconstruct($CIDRAM['NewAuxArr'])) {
            $CIDRAM['Handle'] = fopen($CIDRAM['Vault'] . 'auxiliary.yaml', 'wb');
            fwrite($CIDRAM['Handle'], $CIDRAM['NewAuxArr']);
            fclose($CIDRAM['Handle']);
            $CIDRAM['FE']['state_msg'] = $CIDRAM['L10N']->getString('response_aux_updated') . '<br />';
        }
        unset($CIDRAM['IterantInner'], $CIDRAM['DataInner'], $CIDRAM['Iterant']);
    }

    /** Process auxiliary rules. */
    $CIDRAM['FE']['Data'] = '      ' . $CIDRAM['AuxGenerateFEData'](true);

    /** Calculate page load time (useful for debugging). */
    $CIDRAM['FE']['ProcessTime'] = microtime(true) - $_SERVER['REQUEST_TIME_FLOAT'];
    $CIDRAM['FE']['state_msg'] .= sprintf(
        $CIDRAM['L10N']->getPlural($CIDRAM['FE']['ProcessTime'], 'state_loadtime'),
        '<span class="txtRd">' . $CIDRAM['NumberFormatter']->format($CIDRAM['FE']['ProcessTime'], 3) . '</span>'
    );

    /** Parse output. */
    $CIDRAM['FE']['FE_Content'] = $CIDRAM['ParseVars'](
        $CIDRAM['L10N']->Data + $CIDRAM['FE'],
        $CIDRAM['ReadFile']($CIDRAM['GetAssetPath']('_aux_edit.html'))
    ) . $CIDRAM['MenuToggle'];

    /** Send output. */
    echo $CIDRAM['SendOutput']();
}

/** Logs. */
elseif ($CIDRAM['QueryVars']['cidram-page'] === 'logs' && $CIDRAM['FE']['Permissions'] > 0) {
    /** Page initial prepwork. */
    $CIDRAM['InitialPrepwork']($CIDRAM['L10N']->getString('link_logs'), $CIDRAM['L10N']->getString('tip_logs'), false);

    /** Parse output. */
    $CIDRAM['FE']['FE_Content'] = $CIDRAM['ParseVars'](
        $CIDRAM['L10N']->Data + $CIDRAM['FE'],
        $CIDRAM['ReadFile']($CIDRAM['GetAssetPath']('_logs.html'))
    );

    /** Sort order */
    $CIDRAM['FE']['SortOrder'] = (empty($CIDRAM['QueryVars']['sortOrder']) || $CIDRAM['QueryVars']['sortOrder'] === 'ascending') ? 'ascending' : 'descending';

    /** Initialise array for fetching logs data. */
    $CIDRAM['FE']['LogFiles'] = ['Files' => $CIDRAM['Logs-RecursiveList']($CIDRAM['Vault'], $CIDRAM['FE']['SortOrder']), 'Out' => ''];

    $CIDRAM['FE']['SearchInfo'] = '';
    $CIDRAM['FE']['SearchQuery'] = '';

    /** Default field separator. */
    $CIDRAM['FE']['FieldSeparator'] = ': ';

    /** Add flags CSS. */
    if ($CIDRAM['FE']['Flags'] = file_exists($CIDRAM['Vault'] . 'fe_assets/flags.css')) {
        $CIDRAM['FE']['OtherHead'] .= "\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"?cidram-page=flags\" />";
    }

    /** How to display the log data? */
    if (!isset($CIDRAM['QueryVars']['textMode'])) {
        $CIDRAM['FE']['TextModeLinks'] = 'simple';
    } elseif ($CIDRAM['QueryVars']['textMode'] === 'fancy') {
        $CIDRAM['FE']['TextModeLinks'] = 'fancy';
    } elseif ($CIDRAM['QueryVars']['textMode'] === 'tally') {
        $CIDRAM['FE']['TextModeLinks'] = 'tally';
    } else {
        $CIDRAM['FE']['TextModeLinks'] = 'simple';
    }

    /** Remember display preferences? */
    $CIDRAM['FE']['Remember'] = isset($CIDRAM['QueryVars']['remember']) && $CIDRAM['QueryVars']['remember'] === 'on';

    /** Paginate entries? */
    $CIDRAM['FE']['Paginate'] = isset($CIDRAM['QueryVars']['paginate']) && $CIDRAM['QueryVars']['paginate'] === 'on';

    /** Entries per page. */
    $CIDRAM['FE']['PerPage'] = ($CIDRAM['FE']['Paginate'] && isset($CIDRAM['QueryVars']['perpage'])) ? (int)$CIDRAM['QueryVars']['perpage'] : 20;

    /** Which entry to start from. */
    $CIDRAM['FE']['From'] = ($CIDRAM['FE']['Paginate'] && isset($CIDRAM['QueryVars']['from'])) ? $CIDRAM['QueryVars']['from'] : '';

    /** The first entry for the next pagination page. */
    $CIDRAM['FE']['Next'] = '';

    /** The first entry for the previous pagination page. */
    $CIDRAM['FE']['Previous'] = '';

    /** Define query for search filters. */
    $CIDRAM['FE']['BlockLink'] = sprintf(
        '?cidram-page=logs&textMode=%s&sortOrder=%s%s%s%s%s%s',
        $CIDRAM['FE']['TextModeLinks'],
        $CIDRAM['FE']['SortOrder'],
        $CIDRAM['FE']['Remember'] ? '&remember=on' : '',
        $CIDRAM['FE']['Paginate'] ? '&paginate=on' : '',
        $CIDRAM['FE']['PerPage'] > 0 && $CIDRAM['FE']['PerPage'] !== 20 ? '&perpage=' . $CIDRAM['FE']['PerPage'] : '',
        $CIDRAM['FE']['From'] ? '&from=' . $CIDRAM['FE']['From'] : '',
        empty($CIDRAM['QueryVars']['logfile']) ? '' : '&logfile=' . $CIDRAM['QueryVars']['logfile']
    );

    /** Remember search filters. */
    if ($CIDRAM['FE']['Remember'] && $CIDRAM['FE']['BlockLink'] !== $CIDRAM['FE']['CachedLogsLink']) {
        $CIDRAM['FECacheAdd'](
            $CIDRAM['FE']['Cache'],
            $CIDRAM['FE']['Rebuild'],
            'CachedLogsLink-' . $CIDRAM['FE']['UserRaw'],
            $CIDRAM['FE']['BlockLink'],
            $CIDRAM['Now'] + 31536000
        );
        $CIDRAM['FE']['FE_Content'] = str_replace(
            ' href="' . $CIDRAM['FE']['CachedLogsLink'] . '">',
            ' href="' . $CIDRAM['FE']['BlockLink'] . '">',
            $CIDRAM['FE']['FE_Content']
        );
    }

    /** Define log data. */
    if (empty($CIDRAM['QueryVars']['logfile'])) {
        $CIDRAM['FE']['logfileData'] = $CIDRAM['L10N']->getString('logs_no_logfile_selected');
    } elseif (empty($CIDRAM['FE']['LogFiles']['Files'][$CIDRAM['QueryVars']['logfile']])) {
        $CIDRAM['FE']['logfileData'] = $CIDRAM['L10N']->getString('logs_logfile_doesnt_exist');
    } else {
        if (strtolower(substr($CIDRAM['QueryVars']['logfile'], -3)) === '.gz') {
            $CIDRAM['GZLogHandler'] = gzopen($CIDRAM['Vault'] . $CIDRAM['QueryVars']['logfile'], 'rb');
            $CIDRAM['FE']['logfileData'] = '';
            if (is_resource($CIDRAM['GZLogHandler'])) {
                while (!gzeof($CIDRAM['GZLogHandler'])) {
                    $CIDRAM['FE']['logfileData'] .= gzread($CIDRAM['GZLogHandler'], 131072);
                }
                gzclose($CIDRAM['GZLogHandler']);
            }
            unset($CIDRAM['GZLogHandler']);
        } else {
            $CIDRAM['FE']['logfileData'] = $CIDRAM['ReadFile']($CIDRAM['Vault'] . $CIDRAM['QueryVars']['logfile']);
        }
        if (strpos($CIDRAM['FE']['logfileData'], '：') !== false) {
            $CIDRAM['FE']['FieldSeparator'] = '：';
        }

        $CIDRAM['FE']['BlockSeparator'] = (strpos($CIDRAM['FE']['logfileData'], "\n\n") !== false) ? "\n\n" : "\n";
        $CIDRAM['FE']['BlockSepLen'] = strlen($CIDRAM['FE']['BlockSeparator']);

        /** Strip PHP header. */
        if (substr($CIDRAM['FE']['logfileData'], 0, 15) === "\x3C\x3Fphp die; \x3F\x3E\n\n") {
            $CIDRAM['FE']['logfileData'] = substr($CIDRAM['FE']['logfileData'], 15);
        }

        /** Reverse entries order for viewing descending entries. */
        if ($CIDRAM['FE']['SortOrder'] === 'descending') {
            $CIDRAM['FE']['logfileData'] = explode($CIDRAM['FE']['BlockSeparator'], $CIDRAM['FE']['logfileData']);
            $CIDRAM['FE']['logfileData'] = implode($CIDRAM['FE']['BlockSeparator'], array_reverse($CIDRAM['FE']['logfileData']));
            if (substr($CIDRAM['FE']['logfileData'], 0, $CIDRAM['FE']['BlockSepLen']) === $CIDRAM['FE']['BlockSeparator']) {
                $CIDRAM['FE']['logfileData'] = substr($CIDRAM['FE']['logfileData'], $CIDRAM['FE']['BlockSepLen']) . $CIDRAM['FE']['BlockSeparator'];
            }
        }

        /** Determine entries count before and search query. */
        if (empty($CIDRAM['QueryVars']['search'])) {
            $CIDRAM['FE']['SearchQuery'] = '';
            $CIDRAM['FE']['EntryCountBefore'] = !str_replace("\n", '', $CIDRAM['FE']['logfileData']) ? 0 : (
                substr_count($CIDRAM['FE']['logfileData'], "\n\n") ?: substr_count($CIDRAM['FE']['logfileData'], "\n")
            );
        } else {
            $CIDRAM['FE']['SearchQuery'] = base64_decode(str_replace('_', '=', $CIDRAM['QueryVars']['search']));
            $CIDRAM['FE']['EntryCountBefore'] = 0;
        }

        /** Handle pagination lower boundary. */
        if ($CIDRAM['FE']['Paginate']) {
            $CIDRAM['FE']['logfileData'] = $CIDRAM['SplitBeforeLine']($CIDRAM['FE']['logfileData'], $CIDRAM['FE']['From']);
            $CIDRAM['FE']['EstAft'] = substr_count($CIDRAM['FE']['logfileData'][0], $CIDRAM['FE']['BlockSeparator']);
            $CIDRAM['FE']['EstFore'] = substr_count($CIDRAM['FE']['logfileData'][1], $CIDRAM['FE']['BlockSeparator']);
            $CIDRAM['FE']['Needle'] = strlen($CIDRAM['FE']['logfileData'][0]);
            $CIDRAM['Iterations'] = 1;
            while ($CIDRAM['StepBlock']($CIDRAM['FE']['logfileData'][0], $CIDRAM['FE']['Needle'], 0, $CIDRAM['FE']['SearchQuery'], '<')) {
                if (strlen($CIDRAM['FE']['SearchQuery'])) {
                    $CIDRAM['StepBlock']($CIDRAM['FE']['logfileData'][0], $CIDRAM['FE']['Needle'], 0, '', '<');
                }
                $CIDRAM['Iterations']++;
                if (!empty($CIDRAM['QueryVars']['search'])) {
                    $CIDRAM['FE']['EntryCountBefore']++;
                }
                if (($CIDRAM['Iterations'] > $CIDRAM['FE']['PerPage']) && !$CIDRAM['FE']['Previous']) {
                    $CIDRAM['FE']['Previous'] = $CIDRAM['IsolateFirstFieldEntry'](
                        substr($CIDRAM['FE']['logfileData'][0], $CIDRAM['FE']['Needle'] + $CIDRAM['FE']['BlockSepLen']),
                        $CIDRAM['FE']['FieldSeparator']
                    );
                }
            }
            if (!$CIDRAM['FE']['Previous']) {
                $CIDRAM['FE']['Previous'] = $CIDRAM['IsolateFirstFieldEntry'](
                    $CIDRAM['FE']['logfileData'][0],
                    $CIDRAM['FE']['FieldSeparator']
                );
            }
            if (!$CIDRAM['FE']['From']) {
                $CIDRAM['FE']['From'] = $CIDRAM['IsolateFirstFieldEntry'](
                    $CIDRAM['FE']['logfileData'][1],
                    $CIDRAM['FE']['FieldSeparator']
                );
            }
            if ($CIDRAM['FE']['Previous'] === $CIDRAM['FE']['From']) {
                $CIDRAM['FE']['Previous'] = '';
            }
            $CIDRAM['FE']['logfileData'] = $CIDRAM['FE']['logfileData'][1];
            unset($CIDRAM['Iterations']);
        }

        /** Pagination counter. */
        $CIDRAM['FE']['Paginated'] = 1;

        /** Handle block filtering. */
        if (!empty($CIDRAM['FE']['logfileData']) && !empty($CIDRAM['QueryVars']['search'])) {
            $CIDRAM['FE']['NewLogFileData'] = '';
            $CIDRAM['FE']['Needle'] = 0;
            $CIDRAM['FE']['BlockEnd'] = 0;
            $CIDRAM['FE']['EntryCountPaginated'] = 0;
            while ($CIDRAM['StepBlock'](
                $CIDRAM['FE']['logfileData'],
                $CIDRAM['FE']['Needle'],
                $CIDRAM['FE']['BlockEnd'],
                $CIDRAM['FE']['SearchQuery']
            )) {
                $CIDRAM['FE']['EntryCountBefore']++;
                $CIDRAM['FE']['BlockStart'] = strrpos(substr($CIDRAM['FE']['logfileData'], 0, $CIDRAM['FE']['Needle']), $CIDRAM['FE']['BlockSeparator'], $CIDRAM['FE']['BlockEnd']);
                $CIDRAM['FE']['BlockEnd'] = strpos($CIDRAM['FE']['logfileData'], $CIDRAM['FE']['BlockSeparator'], $CIDRAM['FE']['Needle']);
                if ($CIDRAM['FE']['Paginate']) {
                    if (!$CIDRAM['FE']['From']) {
                        $CIDRAM['FE']['From'] = $CIDRAM['IsolateFirstFieldEntry'](
                            substr($CIDRAM['FE']['logfileData'], $CIDRAM['FE']['BlockStart'], $CIDRAM['FE']['BlockEnd'] - $CIDRAM['FE']['BlockStart']),
                            $CIDRAM['FE']['FieldSeparator']
                        );
                    }
                    $CIDRAM['FE']['Paginated']++;
                    if ($CIDRAM['FE']['Paginated'] > ($CIDRAM['FE']['PerPage'] + 1)) {
                        if (!$CIDRAM['FE']['Next']) {
                            $CIDRAM['FE']['Next'] = $CIDRAM['IsolateFirstFieldEntry'](
                                substr($CIDRAM['FE']['logfileData'], $CIDRAM['FE']['BlockStart'], $CIDRAM['FE']['BlockEnd'] - $CIDRAM['FE']['BlockStart']),
                                $CIDRAM['FE']['FieldSeparator']
                            );
                        }
                        continue;
                    }
                    $CIDRAM['FE']['EntryCountPaginated']++;
                    $CIDRAM['FE']['NewLogFileData'] .= substr($CIDRAM['FE']['logfileData'], $CIDRAM['FE']['BlockStart'], $CIDRAM['FE']['BlockEnd'] - $CIDRAM['FE']['BlockStart']);
                } else {
                    $CIDRAM['FE']['NewLogFileData'] .= substr($CIDRAM['FE']['logfileData'], $CIDRAM['FE']['BlockStart'], $CIDRAM['FE']['BlockEnd'] - $CIDRAM['FE']['BlockStart']);
                }
            }
            $CIDRAM['FE']['logfileData'] = rtrim($CIDRAM['FE']['NewLogFileData']) . $CIDRAM['FE']['BlockSeparator'];
            unset($CIDRAM['FE']['Needle'], $CIDRAM['FE']['BlockSeparator'], $CIDRAM['FE']['BlockEnd'], $CIDRAM['FE']['BlockStart'], $CIDRAM['FE']['NewLogFileData']);
            $CIDRAM['FE']['SearchInfoRender'] = (
                $CIDRAM['FE']['Flags'] && preg_match('~^[A-Z]{2}$~', $CIDRAM['FE']['SearchQuery'])
            ) ? '<span class="flag ' . $CIDRAM['FE']['SearchQuery'] . '"><span></span></span>' : '<code>' . $CIDRAM['FE']['SearchQuery'] . '</code>';
            if ($CIDRAM['FE']['Paginate']) {
                $CIDRAM['FE']['SearchInfo'] = '<br />' . sprintf(
                    $CIDRAM['L10N']->getPlural($CIDRAM['FE']['EntryCountBefore'], 'label_displaying_that_cite'),
                    '<span class="txtRd">' . $CIDRAM['NumberFormatter']->format($CIDRAM['FE']['EntryCountPaginated']) . '</span>' .
                    '<span class="txtBl">/</span>' .
                    '<span class="txtRd">' . $CIDRAM['NumberFormatter']->format($CIDRAM['FE']['EntryCountBefore']) . '</span>',
                    $CIDRAM['FE']['SearchInfoRender']
                );
                if ($CIDRAM['FE']['From']) {
                    $CIDRAM['FE']['SearchInfo'] .= '<br />' . sprintf(
                        $CIDRAM['L10N']->getString('label_starting_from'),
                        '<span class="txtRd">' . $CIDRAM['FE']['From'] . '</span>'
                    );
                    if ($CIDRAM['FE']['Previous']) {
                        $CIDRAM['PaginationFromLink']('label_previous', $CIDRAM['FE']['Previous']);
                    }
                    if ($CIDRAM['FE']['Next']) {
                        $CIDRAM['PaginationFromLink']('label_next', $CIDRAM['FE']['Next']);
                    }
                    if (isset($CIDRAM['FE']['EstAft'])) {
                        $CIDRAM['FE']['EstAft'] = floor(($CIDRAM['FE']['EstAft'] / (($CIDRAM['FE']['EstAft'] + $CIDRAM['FE']['EstFore']) ?: 1)) * 100);
                        if ($CIDRAM['FE']['EstFore'] <= $CIDRAM['FE']['PerPage']) {
                            $CIDRAM['FE']['EstWidth'] = 100 - $CIDRAM['FE']['EstAft'];
                        } else {
                            $CIDRAM['FE']['EstWidth'] = floor(($CIDRAM['FE']['EntryCountPaginated'] / ($CIDRAM['FE']['EntryCountBefore'] ?: $CIDRAM['FE']['EntryCount'])) * 100);
                        }
                        $CIDRAM['FE']['SearchInfo'] .= sprintf(
                            '<br /><div style="width:100%%;height:2px;overflow:visible;background-color:rgba(0,192,0,.4);margin:1px 0 1px 0">' .
                            '<div style="position:relative;%s:%d%%;top:-1px;width:%d%%;height:4px;overflow:visible;background-color:rgba(192,0,0,.5);margin:0"></div></div>',
                            $CIDRAM['FE']['FE_Align'],
                            $CIDRAM['FE']['EstAft'],
                            $CIDRAM['FE']['EstWidth']
                        );
                    }
                }
            } else {
                $CIDRAM['FE']['SearchInfo'] = '<br />' . sprintf(
                    $CIDRAM['L10N']->getPlural($CIDRAM['FE']['EntryCountBefore'], 'label_displaying_that_cite'),
                    '<span class="txtRd">' . $CIDRAM['NumberFormatter']->format($CIDRAM['FE']['EntryCountBefore']) . '</span>',
                    $CIDRAM['FE']['SearchInfoRender']
                );
            }
        } else {
            if ($CIDRAM['FE']['Paginate']) {
                $CIDRAM['FE']['NewLogFileData'] = '';
                $CIDRAM['FE']['OriginalLogDataLen'] = strlen($CIDRAM['FE']['logfileData']);
                $CIDRAM['FE']['BlockStart'] = 0;
                $CIDRAM['FE']['BlockEnd'] = 0;
                if (!$CIDRAM['FE']['From']) {
                    $CIDRAM['FE']['From'] = $CIDRAM['IsolateFirstFieldEntry'](
                        $CIDRAM['FE']['logfileData'],
                        $CIDRAM['FE']['FieldSeparator']
                    );
                }
                while (true) {
                    $CIDRAM['FE']['BlockOffset'] = $CIDRAM['FE']['BlockStart'] + $CIDRAM['FE']['BlockSepLen'];
                    if ($CIDRAM['FE']['BlockOffset'] >= $CIDRAM['FE']['OriginalLogDataLen']) {
                        break;
                    }
                    $CIDRAM['FE']['BlockEnd'] = strpos($CIDRAM['FE']['logfileData'], $CIDRAM['FE']['BlockSeparator'], $CIDRAM['FE']['BlockStart']);
                    if ($CIDRAM['FE']['BlockEnd'] === false) {
                        break;
                    }
                    $CIDRAM['FE']['NewLogFileData'] .= substr($CIDRAM['FE']['logfileData'], $CIDRAM['FE']['BlockStart'], ($CIDRAM['FE']['BlockEnd'] - $CIDRAM['FE']['BlockStart']) + $CIDRAM['FE']['BlockSepLen']);
                    $CIDRAM['FE']['Paginated']++;
                    if ($CIDRAM['FE']['Paginated'] > $CIDRAM['FE']['PerPage']) {
                        if (!$CIDRAM['FE']['Next']) {
                            $CIDRAM['FE']['Next'] = $CIDRAM['IsolateFirstFieldEntry'](
                                substr($CIDRAM['FE']['logfileData'], $CIDRAM['FE']['BlockEnd'] + $CIDRAM['FE']['BlockSepLen']),
                                $CIDRAM['FE']['FieldSeparator']
                            );
                        }
                        break;
                    }
                    $CIDRAM['FE']['BlockStart'] = $CIDRAM['FE']['BlockEnd'] + $CIDRAM['FE']['BlockSepLen'];
                }
                $CIDRAM['FE']['logfileData'] = $CIDRAM['FE']['NewLogFileData'];
                unset(
                    $CIDRAM['FE']['BlockOffset'],
                    $CIDRAM['FE']['BlockSepLen'],
                    $CIDRAM['FE']['BlockSeparator'],
                    $CIDRAM['FE']['BlockEnd'],
                    $CIDRAM['FE']['BlockStart'],
                    $CIDRAM['FE']['OriginalLogDataLen'],
                    $CIDRAM['FE']['NewLogFileData']
                );
            }
            $CIDRAM['FE']['EntryCount'] = !str_replace("\n", '', $CIDRAM['FE']['logfileData']) ? 0 : (
                substr_count($CIDRAM['FE']['logfileData'], "\n\n") ?: substr_count($CIDRAM['FE']['logfileData'], "\n")
            );
            if ($CIDRAM['FE']['Paginate']) {
                $CIDRAM['FE']['SearchInfo'] = '<br />' . sprintf(
                    $CIDRAM['L10N']->getPlural($CIDRAM['FE']['EntryCountBefore'], 'label_displaying'),
                    '<span class="txtRd">' . $CIDRAM['NumberFormatter']->format($CIDRAM['FE']['EntryCount']) . '</span>' .
                    '<span class="txtBl">/</span>' .
                    '<span class="txtRd">' . $CIDRAM['NumberFormatter']->format($CIDRAM['FE']['EntryCountBefore']) . '</span>'
                );
                if ($CIDRAM['FE']['From']) {
                    $CIDRAM['FE']['SearchInfo'] .= '<br />' . sprintf(
                        $CIDRAM['L10N']->getString('label_starting_from'),
                        '<span class="txtRd">' . $CIDRAM['FE']['From'] . '</span>'
                    );
                    if ($CIDRAM['FE']['Previous']) {
                        $CIDRAM['PaginationFromLink']('label_previous', $CIDRAM['FE']['Previous']);
                    }
                    if ($CIDRAM['FE']['Next']) {
                        $CIDRAM['PaginationFromLink']('label_next', $CIDRAM['FE']['Next']);
                    }
                    if (isset($CIDRAM['FE']['EstAft'])) {
                        $CIDRAM['FE']['EstAft'] = floor(($CIDRAM['FE']['EstAft'] / (($CIDRAM['FE']['EstAft'] + $CIDRAM['FE']['EstFore']) ?: 1)) * 100);
                        if ($CIDRAM['FE']['EstFore'] <= $CIDRAM['FE']['PerPage']) {
                            $CIDRAM['FE']['EstWidth'] = 100 - $CIDRAM['FE']['EstAft'];
                        } else {
                            $CIDRAM['FE']['EstWidth'] = floor(($CIDRAM['FE']['EntryCount'] / ($CIDRAM['FE']['EntryCountBefore'] ?: $CIDRAM['FE']['EntryCount'])) * 100);
                        }
                        $CIDRAM['FE']['SearchInfo'] .= sprintf(
                            '<br /><div style="width:100%%;height:2px;overflow:visible;background-color:rgba(0,192,0,.4);margin:1px 0 1px 0">' .
                            '<div style="position:relative;%s:%d%%;top:-1px;width:%d%%;height:4px;overflow:visible;background-color:rgba(192,0,0,.5);margin:0"></div></div>',
                            $CIDRAM['FE']['FE_Align'],
                            $CIDRAM['FE']['EstAft'],
                            $CIDRAM['FE']['EstWidth']
                        );
                    }
                }
            } else {
                $CIDRAM['FE']['SearchInfo'] = '<br />' . sprintf(
                    $CIDRAM['L10N']->getPlural($CIDRAM['FE']['EntryCount'], 'label_displaying'),
                    '<span class="txtRd">' . $CIDRAM['NumberFormatter']->format($CIDRAM['FE']['EntryCount']) . '</span>'
                );
            }
        }

        $CIDRAM['FE']['logfileData'] = $CIDRAM['FE']['TextModeLinks'] === 'fancy' ? str_replace(
            ['<', '>', "\r", "\n"],
            ['&lt;', '&gt;', '', "<br />\n"],
            $CIDRAM['FE']['logfileData']
        ) : str_replace(
            ['<', '>', "\r"],
            ['&lt;', '&gt;', ''],
            $CIDRAM['FE']['logfileData']
        );
        $CIDRAM['FE']['mod_class_nav'] = ' big';
        $CIDRAM['FE']['mod_class_right'] = ' extend';
    }
    if (empty($CIDRAM['FE']['mod_class_nav'])) {
        $CIDRAM['FE']['mod_class_nav'] = ' extend';
        $CIDRAM['FE']['mod_class_right'] = ' big';
    }

    /** Logs control form. */
    $CIDRAM['FE']['TextModeSwitchLink'] = sprintf(
        '<td class="h4"><span class="s"><label for="textMode">%1$s</label><br /><select name="textMode" class="auto" title="%1$s">' .
        '<option value="simple"%2$s>%3$s</option>' .
        '<option value="fancy"%4$s>%5$s</option>' .
        '<option value="tally"%6$s>%7$s</option>' .
        '</select></span></td><td class="h4f"><span class="s">' .
        '<input type="radio" class="auto" name="sortOrder" value="ascending" id="sOa"%8$s /><label for="sOa">%9$s</label><br />' .
        '<input type="radio" class="auto" name="sortOrder" value="descending" id="sOd"%10$s /><label for="sOd">%11$s</label>' .
        '</span></td></tr><tr><td class="h4"><span class="s">' .
        '<input type="checkbox" name="paginate" class="auto" id="paginate"%16$s /><label for="paginate">%17$s</label><br />' .
        '<label for="perpage">%18$s</label><br /><input type="number" name="perpage" class="auto" id="perpage" value="%19$d" />' .
        '</span></td><td class="h4f"><span class="s">' .
        '<input type="checkbox" name="remember" class="auto" id="remember"%12$s /><label for="remember">%13$s</label><br />' .
        '<input type="hidden" name="logfile" value="%14$s" /><input type="submit" value="%15$s" />' .
        '</span></td>',
        $CIDRAM['L10N']->getString('label_textmode'),
        $CIDRAM['FE']['TextModeLinks'] === 'simple' ? ' selected' : '',
        $CIDRAM['L10N']->getString('label_textmode_simple'),
        $CIDRAM['FE']['TextModeLinks'] === 'fancy' ? ' selected' : '',
        $CIDRAM['L10N']->getString('label_textmode_fancy'),
        $CIDRAM['FE']['TextModeLinks'] === 'tally' ? ' selected' : '',
        $CIDRAM['L10N']->getString('label_textmode_tally'),
        $CIDRAM['FE']['SortOrder'] === 'ascending' ? ' checked' : '',
        $CIDRAM['L10N']->getString('switch-descending-order-set-false'),
        $CIDRAM['FE']['SortOrder'] === 'descending' ? ' checked' : '',
        $CIDRAM['L10N']->getString('switch-descending-order-set-true'),
        $CIDRAM['FE']['Remember'] ? ' checked' : '',
        $CIDRAM['L10N']->getString('label_remember'),
        isset($CIDRAM['QueryVars']['logfile']) ? $CIDRAM['QueryVars']['logfile'] : '',
        $CIDRAM['L10N']->getString('field_ok'),
        $CIDRAM['FE']['Paginate'] ? ' checked' : '',
        $CIDRAM['L10N']->getString('label_paginate'),
        $CIDRAM['L10N']->getString('label_entries_per_page'),
        $CIDRAM['FE']['PerPage']
    );

    /** Prepare log data formatting. */
    if ($CIDRAM['FE']['TextModeLinks'] === 'fancy') {
        $CIDRAM['Formatter']($CIDRAM['FE']['logfileData'], $CIDRAM['FE']['BlockLink'], $CIDRAM['FE']['SearchQuery'], $CIDRAM['FE']['FieldSeparator'], $CIDRAM['FE']['Flags']);
    } elseif ($CIDRAM['FE']['TextModeLinks'] === 'tally') {
        $CIDRAM['FE']['logfileData'] = $CIDRAM['Tally'](
            $CIDRAM['FE']['logfileData'],
            $CIDRAM['FE']['BlockLink'],
            [$CIDRAM['L10N']->getString('field_id'), $CIDRAM['L10N']->getString('field_datetime')]
        );
    } else {
        $CIDRAM['FE']['logfileData'] = '<textarea id="logsTA" readonly>' . trim($CIDRAM['FE']['logfileData']) . '</textarea>';
    }

    /** Generate a list of the logs. */
    foreach ($CIDRAM['FE']['LogFiles']['Files'] as $CIDRAM['FE']['LogFiles']['ThisLogFile']) {
        $CIDRAM['FE']['LogFiles']['Out'] .= sprintf(
            '      <a href="?cidram-page=logs&textMode=%1$s&sortOrder=%2$s%3$s&logfile=%4$s">%4$s</a> – %5$s<br />',
            $CIDRAM['FE']['TextModeLinks'],
            $CIDRAM['FE']['SortOrder'],
            $CIDRAM['FE']['Remember'] ? '&remember=on' : '',
            $CIDRAM['FE']['LogFiles']['ThisLogFile']['Filename'],
            $CIDRAM['FE']['LogFiles']['ThisLogFile']['Filesize']
        ) . "\n";
    }

    /** Calculate page load time (useful for debugging). */
    $CIDRAM['FE']['ProcessTime'] = microtime(true) - $_SERVER['REQUEST_TIME_FLOAT'];
    $CIDRAM['FE']['SearchInfo'] = '<td colspan="2" class="spanner">' . sprintf(
        $CIDRAM['L10N']->getPlural($CIDRAM['FE']['ProcessTime'], 'state_loadtime'),
        '<span class="txtRd">' . $CIDRAM['NumberFormatter']->format($CIDRAM['FE']['ProcessTime'], 3) . '</span>'
    ) . $CIDRAM['FE']['SearchInfo'] . '</td>';

    /** Set logfile list or no logfiles available message. */
    $CIDRAM['FE']['LogFiles'] = $CIDRAM['FE']['LogFiles']['Out'] ?: $CIDRAM['L10N']->getString('logs_no_logfiles_available');

    /** Send output. */
    echo $CIDRAM['SendOutput']();
}

/** Rebuild cache. */
if ($CIDRAM['FE']['Rebuild']) {
    $CIDRAM['FE']['FrontEndData'] =
        "USERS\n-----" . $CIDRAM['FE']['UserList'] .
        "\nSESSIONS\n--------" . $CIDRAM['FE']['SessionList'] .
        "\nCACHE\n-----" . $CIDRAM['FE']['Cache'];
    $CIDRAM['Handle'] = fopen($CIDRAM['Vault'] . 'fe_assets/frontend.dat', 'wb');
    fwrite($CIDRAM['Handle'], $CIDRAM['FE']['FrontEndData']);
    fclose($CIDRAM['Handle']);
}

/** Destroy cache object and some related values. */
$CIDRAM['DestroyCacheObject']();

/** Print Cronable failure state messages here. */
if ($CIDRAM['FE']['CronMode'] !== '' && $CIDRAM['FE']['state_msg'] !== '' && $CIDRAM['FE']['UserState'] !== 1) {
    if ($CIDRAM['FE']['CronType'] === 'localUpdate') {
        $Results = ['state_msg' => $CIDRAM['FE']['state_msg']];
    } else {
        echo json_encode(['state_msg' => $CIDRAM['FE']['state_msg']]);
    }
}

/** Exit front-end. */
if (empty($CIDRAM['Alternate']) && $CIDRAM['FE']['CronType'] !== 'localUpdate') {
    die;
}
