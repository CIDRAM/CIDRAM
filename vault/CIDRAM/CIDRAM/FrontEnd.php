<?php
/**
 * This file is an optional extension of the CIDRAM package.
 * Homepage: https://cidram.github.io/
 *
 * CIDRAM COPYRIGHT 2016 and beyond by Caleb Mazalevskis (Maikuolan).
 *
 * License: GNU/GPLv2
 * @see LICENSE.txt
 *
 * This file: The CIDRAM front-end (last modified: 2022.06.21).
 */

namespace CIDRAM\CIDRAM;

class FrontEnd extends Core
{
    use AuxiliaryRules;
    use CLI;
    use Configuration;
    use FrontEndMethods;
    use Logs;
    use RangeTables;
    use SimulateBlockEvent;
    use Updater;

    /**
     * @var array For any front-end working data without dedicated properties.
     */
    private $FE = [];

    /**
     * @var array Used by the updater and file manager to store and work with
     *      local data about components.
     */
    private $Components = [];

    /**
     * @var string Whether we're calling CIDRAM through an alternative pathway.
     */
    private $Alternate = false;

    /**
     * View the front-end.
     *
     * @return void
     */
    public function view(): void
    {
        /** Checks whether we're calling CIDRAM through an alternative pathway (e.g., Cronable). */
        $this->Alternate = class_exists('\Maikuolan\Cronable\Cronable');

        /** Load CIDRAM front-end L10N data. */
        $this->loadL10N($this->Vault . 'l10n' . DIRECTORY_SEPARATOR . 'frontend' . DIRECTORY_SEPARATOR);

        /** Initialise stages. */
        if ($this->Stages === []) {
            $this->Stages = array_flip(explode("\n", $this->Configuration['general']['stages']));
        }

        /** Set page selector if not already set. */
        if (empty($this->CIDRAM['QueryVars']['cidram-page'])) {
            $this->CIDRAM['QueryVars']['cidram-page'] = '';
        }

        /** Populate common front-end variables. */
        $this->FE = [
            /** "Generated by ..." line. */
            'GeneratedBy' => sprintf(
                $this->L10N->getString('generated_by'),
                '<div class="txtRd" dir="ltr">' . $this->ScriptIdent . '</div>'
            ),

            /** Main front-end HTML template file. */
            'Template' => $this->readFile($this->getAssetPath('frontend.html')),

            /** Populated by front-end JavaScript data as per needed. */
            'JS' => '',

            /** Populated by any other header data required for the request (usually nothing). */
            'OtherHead' => '',

            /** Default password hash ("password"). */
            'DefaultPassword' => '$2y$10$FPF5Im9MELEvF5AYuuRMSO.QKoYVpsiu1YU9aDClgrU57XtLof/dK',

            /** Current default language. */
            'FE_Lang' => $this->Configuration['general']['lang'],

            /** Font magnification. */
            'magnification' => $this->Configuration['frontend']['magnification'],

            /** Define active configuration file. */
            'ActiveConfigFile' => !empty($this->CIDRAM['Overrides']) ? $this->CIDRAM['Domain'] . '.config.yml' : 'config.yml',

            /** Current time and date. */
            'DateTime' => $this->timeFormat($this->Now, $this->Configuration['general']['time_format']),

            /** How the script identifies itself. */
            'ScriptIdent' => $this->ScriptIdent,

            /** Current default theme. */
            'theme' => $this->Configuration['frontend']['theme'],

            /**
             * The current user state.
             * -1 = Attempted and failed to log in.
             * 0 = Not logged in.
             * 1 = Logged in.
             * 2 = Logged in, but awaiting two-factor authentication.
             */
            'UserState' => 0,

            /** The currently logged in user. */
            'User' => '',

            /**
             * User permissions.
             * 0 = Not logged in, or awaiting two-factor authentication.
             * 1 = Complete access.
             * 2 = Logs access only.
             * 3 = Cronable.
             */
            'Permissions' => 0,

            /** Will be populated by messages reflecting the current request state. */
            'state_msg' => '',

            /** Will be populated by the current session data. */
            'ThisSession' => '',

            /** Used to log out. */
            'LogoutButton' => sprintf(
                '<form action="?cidram-page=logout" method="POST" style="display:inline">%s%s<input type="submit" id="logoutbutton" value="%s" class="auto" /></form>',
                '<input name="hostname" id="hostnameoverride" type="hidden" value="" />',
                '<script type="text/javascript">document.getElementById(\'hostnameoverride\').value=window.location.hostname;</script>',
                $this->L10N->getString('link_log_out')
            ),

            /** Used to return home. */
            'HomeButton' => sprintf(
                '<form action="?" method="GET" style="display:inline"><input type="submit" id="homebutton" value="%s" class="auto" /></form>',
                $this->L10N->getString('link_home')
            ),

            /** State reflecting whether the current request is cronable. */
            'CronMode' => $_POST['CronMode'] ?? '',

            /** The user agent of the current request. */
            'UA' => $_SERVER['HTTP_USER_AGENT'] ?? '',

            /** The IP address of the current request. */
            'YourIP' => $this->ipAddr,

            /** Asynchronous mode. */
            'ASYNC' => !empty($_POST['ASYNC']),

            /** Will be populated by the page title. */
            'FE_Title' => '',

            /** Used by the auxiliary rules from and expiry fields. */
            'Y-m-d' => date('Y-m-d', $this->Now),

            /** Make some of the link references available to the main front-end array. */
            'Links.Discussions' => $this->CIDRAM['Links']['Discussions'],
            'Links.Documentation' => $this->CIDRAM['Links']['Documentation'],
            'Links.Website' => $this->CIDRAM['Links']['Website']
        ];

        /** CIDRAM front-end favicon. */
        [$this->FE['favicon'], $this->FE['favicon_extension']] = $this->fetchFavicon($this->Configuration['frontend']['theme']);

        /** Trace to determine the type of cron operation. */
        if ($this->FE['CronMode'] !== '') {
            $this->FE['CronType'] = 'update';
            $this->CIDRAM['CronDebug'] = debug_backtrace(DEBUG_BACKTRACE_PROVIDE_OBJECT | DEBUG_BACKTRACE_IGNORE_ARGS, 4);
            foreach ($this->CIDRAM['CronDebug'] as $this->CIDRAM['ThisCronDebug']) {
                if (
                    isset($this->CIDRAM['ThisCronDebug']['function'], $this->CIDRAM['ThisCronDebug']['class']) &&
                    $this->CIDRAM['ThisCronDebug']['function'] === 'localUpdate' &&
                    $this->CIDRAM['ThisCronDebug']['class'] === 'Maikuolan\Cronable\Cronable'
                ) {
                    $this->FE['CronType'] = 'localUpdate';
                }
            }
            unset($this->CIDRAM['CronDebug'], $this->CIDRAM['ThisCronDebug']);
        } else {
            $this->FE['CronType'] = '';
        }

        /** Regular expression used to separate signature sections and tags. */
        $this->CIDRAM['RegExTags'] = '~(?<=\n)(?:\n|Expires: \d{4}\.\d\d\.\d\d|Origin: [A-Z]{2}|(?:\#|Tag: |Profile: |Defers to: )[^\n]+| *\/\*\*(?:\n *\*[^\n]*)*\/| *\/\*\*? [^\n*]+\*\/|---\n(?:[^\n:]+:(?:\n +[^\n:]+: [^\n]+)+)+)+\n~';

        /** Populated by [Home | Log Out] by default; Replaced by [Log Out] for some specific pages (e.g., the homepage). */
        $this->FE['bNav'] = $this->FE['HomeButton'] . $this->FE['LogoutButton'];

        /** To be populated by warnings. */
        $this->CIDRAM['Warnings'] = [];

        /** Modes for disabled termination. */
        if (!isset($this->Stages['Terminate:Enable'])) {
            if (isset(
                $this->Stages['Tests:Enable'],
                $this->Stages['Modules:Enable'],
                $this->Stages['SearchEngineVerification:Enable'],
                $this->Stages['SocialMediaVerification:Enable'],
                $this->Stages['OtherVerification:Enable'],
                $this->Stages['Aux:Enable'],
                $this->Stages['PrepareFields:Enable'],
                $this->Stages['WriteLogs:Enable']
            )) {
                /** Dry run mode. */
                $this->CIDRAM['Warnings'][] = $this->L10N->getString('warning_dry_run_mode');
            } elseif (
                !isset($this->Stages['Tests:Enable']) &&
                !isset($this->Stages['Modules:Enable']) &&
                !isset($this->Stages['SearchEngineVerification:Enable']) &&
                !isset($this->Stages['SocialMediaVerification:Enable']) &&
                !isset($this->Stages['OtherVerification:Enable']) &&
                !isset($this->Stages['Aux:Enable']) &&
                !isset($this->Stages['Reporting:Enable']) &&
                !isset($this->Stages['Tracking:Enable']) &&
                !isset($this->Stages['RL:Enable']) &&
                !isset($this->Stages['CAPTCHA:Enable']) &&
                !isset($this->Stages['Statistics:Enable']) &&
                !isset($this->Stages['Webhooks:Enable']) &&
                !isset($this->Stages['PrepareFields:Enable']) &&
                !isset($this->Stages['Output:Enable']) &&
                !isset($this->Stages['WriteLogs:Enable']) &&
                !isset($this->Stages['AuxRedirect:Enable']) &&
                !isset($this->Stages['NonBlockedCAPTCHA:Enable'])
            ) {
                /** Maintenance mode. */
                $this->CIDRAM['Warnings'][] = $this->L10N->getString('warning_maintenance_mode');
            } else {
                /** Termination disabled. */
                $this->CIDRAM['Warnings'][] = $this->L10N->getString('warning_termination_disabled');
            }
        } else {
            if (isset($this->Stages['Tests:Enable'])) {
                if (
                    $this->Configuration['components']['ipv4'] === '' &&
                    $this->Configuration['components']['ipv6'] === ''
                ) {
                    /** No active signature files. */
                    $this->CIDRAM['Warnings'][] = $this->L10N->getString('warning_no_active_signature_files');
                }
            } elseif (
                $this->Configuration['components']['ipv4'] === '' &&
                $this->Configuration['components']['ipv6'] === ''
            ) {
                /** IP tests disabled. */
                $this->CIDRAM['Warnings'][] = $this->L10N->getString('warning_ip_tests_disabled');
            }
            if (isset($this->Stages['Modules:Enable'])) {
                if ($this->Configuration['components']['modules'] === '') {
                    /** No active modules. */
                    $this->CIDRAM['Warnings'][] = $this->L10N->getString('warning_no_active_modules');
                }
            } elseif ($this->Configuration['components']['modules'] === '') {
                /** Modules disabled. */
                $this->CIDRAM['Warnings'][] = $this->L10N->getString('warning_modules_disabled');
            }
        }

        /** Alpha state warning. */
        $this->CIDRAM['Warnings'][] = 'Warning: Currently running an unreleased alpha! Breakage is anticipated!';

        /** Prepare warnings. */
        $this->FE['Warnings'] = count($this->CIDRAM['Warnings']) ? "\n<div class=\"center\"><div class=\"warning\">" . implode(
            "</div>\n<div class=\"warning\">",
            $this->CIDRAM['Warnings']
        ) . '</div></div><hr />' : '';

        /** Cleanup. */
        unset($this->CIDRAM['Warnings']);

        /** Menu toggle JavaScript, needed by some front-end pages. */
        $this->CIDRAM['MenuToggle'] = '<script type="text/javascript">' .
            'var i,toggler=document.getElementsByClassName("comCat");for(i=0;i<toggl' .
            'er.length;i++)toggler[i].addEventListener("click",function(){this.paren' .
            'tElement.querySelector(".comSub").classList.toggle("active"),!this.clas' .
            'sList.toggle("caret-down")&&this.classList.toggle("caret-up")&&setTimeo' .
            'ut(function(t){t.classList.toggle("caret-up")},200,this)});</script>';

        /** Fetch pips data. */
        if ($this->CIDRAM['Pips_Path'] = $this->getAssetPath('pips.yml', true)) {
            $this->YAML->process($this->readFile($this->CIDRAM['Pips_Path']), $this->FE);
        }

        /** A fix for correctly displaying LTR/RTL text. */
        if (empty($this->L10N->Data['Text Direction']) || $this->L10N->Data['Text Direction'] !== 'rtl') {
            $this->L10N->Data['Text Direction'] = 'ltr';
            $this->FE['FE_Align'] = 'left';
            $this->FE['FE_Align_Reverse'] = 'right';
            $this->FE['FE_Align_Mode'] = 'lr';
            $this->FE['PIP_Input'] = $this->FE['PIP_Right'];
            $this->FE['PIP_Input_Valid'] = $this->FE['PIP_Right_Valid'];
            $this->FE['PIP_Input_Invalid'] = $this->FE['PIP_Right_Invalid'];
            $this->FE['Half_Border'] = 'solid solid none none';
            $this->FE['45deg'] = '45deg';
            $this->FE['90deg'] = '90deg';
            $this->FE['Empty'] = 'background:linear-gradient(90deg,rgba(128,128,255,0.5),rgba(0,0,64,0));';
        } else {
            $this->FE['FE_Align'] = 'right';
            $this->FE['FE_Align_Reverse'] = 'left';
            $this->FE['FE_Align_Mode'] = 'rl';
            $this->FE['PIP_Input'] = $this->FE['PIP_Left'];
            $this->FE['PIP_Input_Valid'] = $this->FE['PIP_Left_Valid'];
            $this->FE['PIP_Input_Invalid'] = $this->FE['PIP_Left_Invalid'];
            $this->FE['Half_Border'] = 'solid none none solid';
            $this->FE['45deg'] = '-45deg';
            $this->FE['90deg'] = '270deg';
            $this->FE['Empty'] = 'background:linear-gradient(90deg,rgba(0,0,64,0),rgba(128,128,255,0.5));';
        }

        /** A simple passthru for non-private theme images and related data. */
        if (!empty($this->CIDRAM['QueryVars']['cidram-asset'])) {
            $Success = false;
            if (
                $this->pathSecurityCheck($this->CIDRAM['QueryVars']['cidram-asset']) &&
                !preg_match('~[^\da-z._]~i', $this->CIDRAM['QueryVars']['cidram-asset'])
            ) {
                $ThisAsset = $this->getAssetPath($this->CIDRAM['QueryVars']['cidram-asset'], true);
                if (
                    strlen($ThisAsset) &&
                    is_readable($ThisAsset) &&
                    ($ThisAssetDel = strrpos($ThisAsset, '.')) !== false
                ) {
                    $ThisAssetType = strtolower(substr($ThisAsset, $ThisAssetDel + 1));
                    if ($ThisAssetType === 'jpeg') {
                        $ThisAssetType = 'jpg';
                    }
                    if (preg_match('/^(?:gif|jpg|png|webp)$/', $ThisAssetType)) {
                        /** Set asset mime-type (images). */
                        header('Content-Type: image/' . $ThisAssetType);
                        $Success = true;
                    } elseif ($ThisAssetType === 'js') {
                        /** Set asset mime-type (JavaScript). */
                        header('Content-Type: text/javascript');
                        $Success = true;
                    }
                    if ($Success) {
                        if (!empty($this->CIDRAM['QueryVars']['theme'])) {
                            /** Prevents needlessly reloading static assets. */
                            header('Last-Modified: ' . gmdate('D, d M Y H:i:s T', filemtime($ThisAsset)));
                        }
                        /** Send asset data. */
                        echo $this->readFile($ThisAsset);
                    }
                }
            }

            if ($Success) {
                die;
            }

            /** Cleanup. */
            unset($ThisAssetType, $ThisAssetDel, $ThisAsset, $Success);
        }

        /** A simple passthru for the front-end CSS. */
        if ($this->CIDRAM['QueryVars']['cidram-page'] === 'css') {
            $this->CIDRAM['AssetPath'] = $this->getAssetPath('frontend.css');
            header('Content-Type: text/css');
            if (!empty($this->CIDRAM['QueryVars']['theme'])) {
                /** Prevents needlessly reloading static assets. */
                header('Last-Modified: ' . gmdate('D, d M Y H:i:s T', filemtime($this->CIDRAM['AssetPath'])));
            }
            /** Send asset data. */
            echo $this->parseVars($this->L10N->Data + $this->FE, $this->readFile($this->CIDRAM['AssetPath']));
            die;
        }

        /** A simple passthru for the favicon. */
        if ($this->CIDRAM['QueryVars']['cidram-page'] === 'favicon') {
            header('Content-Type: image/' . $this->FE['favicon_extension']);
            echo base64_decode($this->FE['favicon']);
            die;
        }

        /** Set the current request's form target. */
        $this->FE['FormTarget'] = $_POST['cidram-form-target'] ?? '';

        /** Initialise cache. */
        $this->initialiseCache();

        /** Initialise statistics tracked. */
        $this->StatisticsTracked = array_flip(explode("\n", $this->Configuration['general']['statistics']));

        /** Brute-force security check. */
        if (
            ($this->CIDRAM['LoginAttempts'] = (int)$this->Cache->getEntry('LoginAttempts' . $this->ipAddr)) &&
            ($this->CIDRAM['LoginAttempts'] >= $this->Configuration['frontend']['max_login_attempts'])
        ) {
            header('Content-Type: text/plain');
            die('[CIDRAM] ' . $this->L10N->getString('max_login_attempts_exceeded'));
        }

        /** Brute-force security check (2FA). */
        if (
            ($this->CIDRAM['Failed2FA'] = (int)$this->Cache->getEntry('Failed2FA' . $this->ipAddr)) &&
            ($this->CIDRAM['Failed2FA'] >= $this->Configuration['frontend']['max_login_attempts'])
        ) {
            header('Content-Type: text/plain');
            die('[CIDRAM] ' . $this->L10N->getString('max_login_attempts_exceeded'));
        }

        /** Attempt to log in the user. */
        if ($this->FE['FormTarget'] === 'login' || $this->FE['CronMode'] !== '') {
            if (!empty($_POST['username']) && empty($_POST['password'])) {
                $this->FE['UserState'] = -1;
                $this->FE['state_msg'] = $this->L10N->getString('response_login_password_field_empty');
            } elseif (empty($_POST['username']) && !empty($_POST['password'])) {
                $this->FE['UserState'] = -1;
                $this->FE['state_msg'] = $this->L10N->getString('response_login_username_field_empty');
            } elseif (!empty($_POST['username']) && !empty($_POST['password'])) {
                $this->FE['UserState'] = -1;
                $this->FE['LP'] = ['ConfigUserPath' => 'user.' . $_POST['username']];
                if (isset(
                    $this->Configuration[$this->FE['LP']['ConfigUserPath']],
                    $this->Configuration[$this->FE['LP']['ConfigUserPath']]['password'],
                    $this->Configuration[$this->FE['LP']['ConfigUserPath']]['permissions']
                ) &&
                    !empty($this->Configuration[$this->FE['LP']['ConfigUserPath']]['password']) &&
                    !empty($this->Configuration[$this->FE['LP']['ConfigUserPath']]['permissions'])
                ) {
                    if (password_verify($_POST['password'], $this->Configuration[$this->FE['LP']['ConfigUserPath']]['password'])) {
                        $this->Cache->deleteEntry('LoginAttempts' . $this->ipAddr);
                        $this->FE['Permissions'] = $this->Configuration[$this->FE['LP']['ConfigUserPath']]['permissions'];
                        if (($this->FE['Permissions'] === 3 && (
                            $this->FE['CronMode'] === '' || substr($this->FE['UA'], 0, 10) !== 'Cronable v'
                        )) || !($this->FE['Permissions'] > 0 && $this->FE['Permissions'] <= 3)) {
                            $this->FE['Permissions'] = 0;
                            $this->FE['state_msg'] = $this->L10N->getString('response_login_wrong_endpoint');
                        } else {
                            $this->FE['User'] = $_POST['username'];
                            if ($this->FE['CronMode'] === '') {
                                $this->FE['SessionKey'] = hash('sha256', $this->generateSalt());
                                $this->FE['Cookie'] = $_POST['username'] . $this->FE['SessionKey'];
                                setcookie('CIDRAM-ADMIN', $this->FE['Cookie'], $this->Now + 604800, '/', $this->CIDRAM['HostnameOverride'] ?: $this->CIDRAM['HTTP_HOST'], false, true);
                                $this->FE['ThisSession'] = $_POST['username'] . ',' . password_hash($this->FE['SessionKey'], $this->DefaultAlgo);

                                /** Prepare 2FA email. */
                                if (
                                    $this->Configuration['frontend']['enable_two_factor'] &&
                                    preg_match('~^.+@.+$~', $_POST['username']) &&
                                    ($this->FE['LP']['TwoFactorMessage'] = $this->L10N->getString('msg_template_2fa')) &&
                                    ($this->FE['LP']['TwoFactorSubject'] = $this->L10N->getString('msg_subject_2fa'))
                                ) {
                                    $this->FE['LP']['TwoFactorState'] = ['Number' => $this->twoFactorNumber()];
                                    $this->FE['LP']['TwoFactorState']['Hash'] = password_hash($this->FE['LP']['TwoFactorState']['Number'], $this->DefaultAlgo);
                                    $this->Cache->setEntry('TwoFactorState:' . $this->FE['Cookie'], '0' . $this->FE['LP']['TwoFactorState']['Hash'], 600);
                                    $this->FE['LP']['TwoFactorState']['Template'] = sprintf(
                                        $this->FE['LP']['TwoFactorMessage'],
                                        $_POST['username'],
                                        $this->FE['LP']['TwoFactorState']['Number']
                                    );
                                    if (preg_match('~^[^<>]+<[^<>]+>$~', $_POST['username'])) {
                                        $this->FE['LP']['TwoFactorState']['Name'] = trim(preg_replace('~^([^<>]+)<[^<>]+>$~', '\1', $_POST['username']));
                                        $this->FE['LP']['TwoFactorState']['Address'] = trim(preg_replace('~^[^<>]+<([^<>]+)>$~', '\1', $_POST['username']));
                                    } else {
                                        $this->FE['LP']['TwoFactorState']['Name'] = trim($_POST['username']);
                                        $this->FE['LP']['TwoFactorState']['Address'] = $this->FE['LP']['TwoFactorState']['Name'];
                                    }
                                    $this->Events->fireEvent(
                                        'sendEmail',
                                        '',
                                        [[
                                            'Name' => $this->FE['LP']['TwoFactorState']['Name'],
                                            'Address' => $this->FE['LP']['TwoFactorState']['Address']
                                        ]],
                                        $this->FE['LP']['TwoFactorSubject'],
                                        $this->FE['LP']['TwoFactorState']['Template'],
                                        strip_tags($this->FE['LP']['TwoFactorState']['Template'])
                                    );
                                    $this->FE['UserState'] = 2;
                                } else {
                                    $this->FE['UserState'] = 1;
                                }

                                /** Need to set a cache item to correspond with the cookie value. */
                                if ($this->FE['UserState'] === 1) {
                                    $this->Cache->setEntry($this->FE['Cookie'], $this->FE['ThisSession'], 604800);
                                } else {
                                    $this->FE['Permissions'] = 0;
                                }
                            } else {
                                $this->FE['UserState'] = 1;
                            }
                        }
                    } else {
                        $this->FE['Permissions'] = 0;
                        $this->FE['state_msg'] = $this->L10N->getString('response_login_invalid_password');
                    }
                } else {
                    $this->FE['state_msg'] = $this->L10N->getString('response_login_invalid_username');
                }

                /** Cleanup. */
                unset($this->FE['LP']);
            }

            if ($this->FE['state_msg']) {
                $this->CIDRAM['LoginAttempts']++;
                $this->CIDRAM['TimeToAdd'] = ($this->CIDRAM['LoginAttempts'] > 4) ? ($this->CIDRAM['LoginAttempts'] - 4) * 86400 : 86400;
                $this->Cache->setEntry('LoginAttempts' . $this->ipAddr, $this->CIDRAM['LoginAttempts'], $this->CIDRAM['TimeToAdd']);
                if ($this->Configuration['frontend']['frontend_log']) {
                    $LoggerMessage = $this->FE['state_msg'];
                }
                if ($this->FE['CronMode'] === '') {
                    $this->FE['state_msg'] = '<div class="txtRd">' . $this->FE['state_msg'] . '<br /><br /></div>';
                }
            } elseif ($this->Configuration['frontend']['frontend_log']) {
                $LoggerMessage = $this->L10N->getString((
                    $this->Configuration['frontend']['enable_two_factor'] &&
                    $this->FE['Permissions'] === 0
                ) ? 'state_logged_in_2fa_pending' : 'state_logged_in');
            }

            /** Safer for the front-end logger. */
            $NameToLog = preg_replace('~[\x00-\x1F]~', '', $_POST['username'] ?? '');

            /** Handle front-end logging. */
            $this->frontendLogger($this->ipAddr, $NameToLog, $LoggerMessage ?? '');

            /** Cleanup. */
            unset($NameToLog, $LoggerMessage);
        }

        /** Determine whether the user has logged in. */
        elseif (!empty($_COOKIE['CIDRAM-ADMIN'])) {
            $this->FE['UserState'] = -1;
            $this->FE['LP'] = [];
            if (
                ($this->FE['LP']['TrySession'] = $this->Cache->getEntry($_COOKIE['CIDRAM-ADMIN'])) &&
                ($this->FE['LP']['SessionDel'] = strpos($this->FE['LP']['TrySession'], ',')) !== false
            ) {
                $this->FE['LP']['SessionHash'] = substr($this->FE['LP']['TrySession'], $this->FE['LP']['SessionDel'] + 1);
                $this->FE['LP']['SessionUser'] = substr($this->FE['LP']['TrySession'], 0, $this->FE['LP']['SessionDel']);
            }
            if (!empty($this->FE['LP']['SessionHash']) && !empty($this->FE['LP']['SessionUser'])) {
                $this->FE['LP']['SessionUserLen'] = strlen($this->FE['LP']['SessionUser']);
                $this->FE['LP']['SessionKey'] = substr($_COOKIE['CIDRAM-ADMIN'], $this->FE['LP']['SessionUserLen']);
                $this->FE['LP']['CookieUser'] = substr($_COOKIE['CIDRAM-ADMIN'], 0, $this->FE['LP']['SessionUserLen']);
                $this->FE['LP']['ConfigUserPath'] = 'user.' . $this->FE['LP']['CookieUser'];
                if (
                    $this->FE['LP']['CookieUser'] === $this->FE['LP']['SessionUser'] &&
                    password_verify($this->FE['LP']['SessionKey'], $this->FE['LP']['SessionHash']) &&
                    isset(
                        $this->Configuration[$this->FE['LP']['ConfigUserPath']],
                        $this->Configuration[$this->FE['LP']['ConfigUserPath']]['permissions']
                    )
                ) {
                    $this->FE['Permissions'] = $this->Configuration[$this->FE['LP']['ConfigUserPath']]['permissions'];
                    $this->FE['User'] = $this->FE['LP']['SessionUser'];

                    /** Handle 2FA stuff here. */
                    if ($this->Configuration['frontend']['enable_two_factor'] && preg_match('~^.+@.+$~', $this->FE['LP']['SessionUser'])) {
                        $this->FE['LP']['TwoFactorState'] = $this->Cache->getEntry('TwoFactorState:' . $_COOKIE['CIDRAM-ADMIN']);
                        $this->FE['LP']['Try'] = (int)substr($this->FE['LP']['TwoFactorState'], 0, 1);
                        $this->FE['UserState'] = ((int)$this->FE['LP']['TwoFactorState'] === 1) ? 1 : 2;
                        if ($this->FE['UserState'] === 2 && $this->FE['FormTarget'] === '2fa' && !empty($_POST['2fa'])) {
                            /** User has submitted a 2FA code. Attempt to verify it. */
                            if (password_verify($_POST['2fa'], substr($this->FE['LP']['TwoFactorState'], 1))) {
                                $this->Cache->setEntry('TwoFactorState:' . $_COOKIE['CIDRAM-ADMIN'], '1', 604800);
                                $this->FE['UserState'] = 1;
                            }
                        }
                        unset($this->FE['LP']['TwoFactorState']);
                    } else {
                        $this->FE['UserState'] = 1;
                    }

                    /** Revert permissions if not authenticated. */
                    if ($this->FE['UserState'] !== 1) {
                        $this->FE['Permissions'] = 0;
                    }
                }
            }

            /** In case of 2FA form submission. */
            if ($this->FE['FormTarget'] === '2fa' && !empty($_POST['2fa'])) {
                if ($this->FE['UserState'] === 2) {
                    $this->CIDRAM['Failed2FA']++;
                    $this->CIDRAM['TimeToAdd'] = ($this->CIDRAM['Failed2FA'] > 4) ? ($this->CIDRAM['Failed2FA'] - 4) * 86400 : 86400;
                    $this->Cache->setEntry('Failed2FA' . $this->ipAddr, $this->CIDRAM['Failed2FA'], $this->CIDRAM['TimeToAdd']);
                    if ($this->Configuration['frontend']['frontend_log']) {
                        $this->frontendLogger($this->ipAddr, $this->FE['User'], $this->L10N->getString('response_2fa_invalid'));
                    }
                    $this->FE['state_msg'] = '<div class="txtRd">' . $this->L10N->getString('response_2fa_invalid') . '<br /><br /></div>';
                } else {
                    $this->Cache->deleteEntry('Failed2FA' . $this->ipAddr);
                    if ($this->Configuration['frontend']['frontend_log']) {
                        $this->frontendLogger($this->ipAddr, $this->FE['User'], $this->L10N->getString('response_2fa_valid'));
                    }
                }
            }

            /** Cleanup. */
            unset($this->FE['LP']);
        }

        /** The user is attempting an asynchronous request without adequate permissions. */
        if ($this->FE['UserState'] !== 1 && $this->FE['ASYNC']) {
            header('HTTP/1.0 403 Forbidden');
            header('HTTP/1.1 403 Forbidden');
            header('Status: 403 Forbidden');
            die($this->L10N->getString('state_async_deny'));
        }

        /** Major version notice. */
        $this->CIDRAM['MajorVersionNotice'] = '';

        /** Executed only for users that are logged in or awaiting two-factor authentication. */
        if (($this->FE['UserState'] === 1 || $this->FE['UserState'] === 2) && $this->FE['CronMode'] === '') {
            /** Log the user out. */
            if ($this->CIDRAM['QueryVars']['cidram-page'] === 'logout') {
                $this->Cache->deleteEntry($_COOKIE['CIDRAM-ADMIN']);
                $this->Cache->deleteEntry('TwoFactorState:' . $_COOKIE['CIDRAM-ADMIN']);
                $this->FE['ThisSession'] = '';
                $this->FE['UserState'] = 0;
                $this->FE['Permissions'] = 0;
                setcookie('CIDRAM-ADMIN', '', -1, '/', $this->CIDRAM['HostnameOverride'] ?: $this->CIDRAM['HTTP_HOST'], false, true);
                $this->frontendLogger($this->ipAddr, $this->FE['User'], $this->L10N->getString('state_logged_out'));
                $this->FE['User'] = '';
            }

            if ($this->FE['Permissions'] === 1) {
                /** If the user has complete access. */
                $this->FE['nav'] = $this->parseVars(
                    $this->L10N->Data + $this->FE,
                    $this->readFile($this->getAssetPath('_nav_complete_access.html'))
                );
            } elseif ($this->FE['Permissions'] === 2) {
                /** If the user has logs access only. */
                $this->FE['nav'] = $this->parseVars(
                    $this->L10N->Data + $this->FE,
                    $this->readFile($this->getAssetPath('_nav_logs_access_only.html'))
                );
            } else {
                /** No valid navigation state. */
                $this->FE['nav'] = '';
            }
        }

        /** Only execute this code block for already logged in users. */
        if ($this->FE['UserState'] === 1) {
            /** Where to find remote version information? */
            $this->CIDRAM['RemoteVerPath'] = 'https://raw.githubusercontent.com/Maikuolan/Compatibility-Charts/gh-pages/';

            /** Fetch remote CIDRAM version information and cache it if necessary. */
            if (($this->CIDRAM['Remote-YAML-CIDRAM'] = $this->Cache->getEntry('cidram-ver.yaml')) === false) {
                $this->CIDRAM['Remote-YAML-CIDRAM'] = $this->Request->request($this->CIDRAM['RemoteVerPath'] . 'cidram-ver.yaml', [], 8);
                $this->Cache->setEntry('cidram-ver.yaml', $this->CIDRAM['Remote-YAML-CIDRAM'] ?: '-', 86400);
            }

            /** Process remote CIDRAM version information. */
            if (empty($this->CIDRAM['Remote-YAML-CIDRAM'])) {
                /** CIDRAM latest stable. */
                $this->FE['info_cidram_stable'] = $this->L10N->getString('response_error');

                /** CIDRAM latest unstable. */
                $this->FE['info_cidram_unstable'] = $this->L10N->getString('response_error');

                /** CIDRAM branch latest stable. */
                $this->FE['info_cidram_branch'] = $this->L10N->getString('response_error');
            } else {
                $this->CIDRAM['Remote-YAML-CIDRAM-Array'] = [];
                $this->YAML->process($this->CIDRAM['Remote-YAML-CIDRAM'], $this->CIDRAM['Remote-YAML-CIDRAM-Array']);

                /** CIDRAM latest stable. */
                if (empty($this->CIDRAM['Remote-YAML-CIDRAM-Array']['Stable'])) {
                    $this->FE['info_cidram_stable'] = $this->L10N->getString('response_error');
                } else {
                    $this->FE['MajorVersionCurrent'] = (int)substr(
                        $this->ScriptVersion,
                        0,
                        strpos($this->ScriptVersion, '.') ?: strlen($this->ScriptVersion)
                    );
                    $this->FE['MajorVersionLatest'] = (int)substr(
                        $this->CIDRAM['Remote-YAML-CIDRAM-Array']['Stable'],
                        0,
                        strpos($this->CIDRAM['Remote-YAML-CIDRAM-Array']['Stable'], '.') ?: strlen($this->CIDRAM['Remote-YAML-CIDRAM-Array']['Stable'])
                    );
                    if (
                        $this->FE['MajorVersionCurrent'] < $this->FE['MajorVersionLatest'] &&
                        !empty($this->CIDRAM['Remote-YAML-CIDRAM-Array']['Stable Minimum PHP Required']) &&
                        is_string($this->CIDRAM['Remote-YAML-CIDRAM-Array']['Stable Minimum PHP Required']) &&
                        version_compare(PHP_VERSION, $this->CIDRAM['Remote-YAML-CIDRAM-Array']['Stable Minimum PHP Required'], '>=')
                    ) {
                        $this->CIDRAM['MajorVersionNotice'] = sprintf(
                            $this->L10N->getString('notice_new_major_version'),
                            'CIDRAM v' . $this->CIDRAM['Remote-YAML-CIDRAM-Array']['Stable'],
                            $this->ScriptIdent
                        );
                    }
                    $this->FE['info_cidram_stable'] = $this->CIDRAM['Remote-YAML-CIDRAM-Array']['Stable'];
                }

                /** CIDRAM latest unstable. */
                $this->FE['info_cidram_unstable'] = empty($this->CIDRAM['Remote-YAML-CIDRAM-Array']['Unstable']) ?
                    $this->L10N->getString('response_error') : $this->CIDRAM['Remote-YAML-CIDRAM-Array']['Unstable'];

                /** CIDRAM branch latest stable. */
                if ($this->CIDRAM['ThisBranch'] = substr($this->ScriptVersion, 0, strpos($this->ScriptVersion, '.') ?: 1)) {
                    $this->CIDRAM['ThisBranch'] = 'v' . ($this->CIDRAM['ThisBranch'] ?: 1);
                    if (empty($this->CIDRAM['Remote-YAML-CIDRAM-Array']['Branch'][$this->CIDRAM['ThisBranch']]['Latest'])) {
                        $this->FE['info_cidram_branch'] = $this->L10N->getString('response_error');
                    } else {
                        $this->FE['info_cidram_branch'] = $this->CIDRAM['Remote-YAML-CIDRAM-Array']['Branch'][$this->CIDRAM['ThisBranch']]['Latest'];
                    }
                } else {
                    $this->FE['info_php_branch'] = $this->L10N->getString('response_error');
                }
            }

            /** Cleanup. */
            unset($this->CIDRAM['Remote-YAML-CIDRAM-Array'], $this->CIDRAM['Remote-YAML-CIDRAM']);

            /** Fetch remote PHP version information and cache it if necessary. */
            if (($this->CIDRAM['Remote-YAML-PHP'] = $this->Cache->getEntry('php-ver.yaml')) === false) {
                $this->CIDRAM['Remote-YAML-PHP'] = $this->Request->request($this->CIDRAM['RemoteVerPath'] . 'php-ver.yaml', [], 8);
                $this->Cache->setEntry('php-ver.yaml', $this->CIDRAM['Remote-YAML-PHP'] ?: '-', 86400);
            }

            /** Process remote PHP version information. */
            if (empty($this->CIDRAM['Remote-YAML-PHP'])) {
                /** PHP latest stable. */
                $this->FE['info_php_stable'] = $this->L10N->getString('response_error');

                /** PHP latest unstable. */
                $this->FE['info_php_unstable'] = $this->L10N->getString('response_error');

                /** PHP branch latest stable. */
                $this->FE['info_php_branch'] = $this->L10N->getString('response_error');
            } else {
                $this->CIDRAM['Remote-YAML-PHP-Array'] = [];
                $this->YAML->process($this->CIDRAM['Remote-YAML-PHP'], $this->CIDRAM['Remote-YAML-PHP-Array']);

                /** PHP latest stable. */
                $this->FE['info_php_stable'] = empty($this->CIDRAM['Remote-YAML-PHP-Array']['Stable']) ?
                    $this->L10N->getString('response_error') : $this->CIDRAM['Remote-YAML-PHP-Array']['Stable'];

                /** PHP latest unstable. */
                $this->FE['info_php_unstable'] = empty($this->CIDRAM['Remote-YAML-PHP-Array']['Unstable']) ?
                    $this->L10N->getString('response_error') : $this->CIDRAM['Remote-YAML-PHP-Array']['Unstable'];

                /** PHP branch latest stable. */
                if ($this->CIDRAM['ThisBranch'] = substr(PHP_VERSION, 0, strpos(PHP_VERSION, '.') ?: 0)) {
                    $this->CIDRAM['ThisBranch'] .= substr(PHP_VERSION, strlen($this->CIDRAM['ThisBranch']) + 1, strpos(PHP_VERSION, '.', strlen($this->CIDRAM['ThisBranch'])) ?: 0);
                    $this->CIDRAM['ThisBranch'] = 'php' . $this->CIDRAM['ThisBranch'];
                    $this->FE['info_php_branch'] = empty($this->CIDRAM['Remote-YAML-PHP-Array']['Branch'][$this->CIDRAM['ThisBranch']]['Latest']) ?
                        $this->L10N->getString('response_error') : $this->CIDRAM['Remote-YAML-PHP-Array']['Branch'][$this->CIDRAM['ThisBranch']]['Latest'];
                } else {
                    $this->FE['info_php_branch'] = $this->L10N->getString('response_error');
                }
            }

            /** Get cached logs link. */
            $this->FE['CachedLogsLink'] = $this->Cache->getEntry('CachedLogsLink-' . $this->FE['User']) ?: '?cidram-page=logs';

            /** Cleanup. */
            unset($this->CIDRAM['Remote-YAML-PHP-Array'], $this->CIDRAM['Remote-YAML-PHP'], $this->CIDRAM['ThisBranch'], $this->CIDRAM['RemoteVerPath']);
        }

        /** Useful for avoiding excessive IO operations when dealing with components. */
        $this->CIDRAM['Updater-IO'] = new \Maikuolan\Common\DelayedIO();

        /** The user hasn't logged in, or hasn't authenticated yet. */
        if ($this->FE['UserState'] !== 1 && $this->FE['CronMode'] === '') {
            /** Page initial prepwork. */
            $this->initialPrepwork($this->L10N->getString('title_login'), '', false);

            /** Hide warnings from non-logged in users. */
            $this->FE['Warnings'] = '';

            if ($this->FE['UserState'] === 2) {
                /** Provide the option to log out (omit home link). */
                $this->FE['bNav'] = $this->FE['LogoutButton'];

                /** Aesthetic spacer. */
                $this->FE['2fa_status_spacer'] = empty($this->FE['state_msg']) ? '' : '<br /><br />';

                /** Show them the two-factor authentication page. */
                $this->FE['FE_Content'] = $this->parseVars(
                    $this->L10N->Data + $this->FE,
                    $this->readFile($this->getAssetPath('_2fa.html'))
                );
            } else {
                /** Omit the log out and home links. */
                $this->FE['bNav'] = '';

                /** Show them the login page. */
                $this->FE['FE_Content'] = $this->parseVars(
                    $this->L10N->Data + $this->FE,
                    $this->readFile($this->getAssetPath('_login.html'))
                );
            }

            /** Send output. */
            echo $this->sendOutput();
        }

        /**
         * The user has logged in, but hasn't selected anything to view. Show them the
         * front-end home page.
         */
        elseif ($this->CIDRAM['QueryVars']['cidram-page'] === '' && $this->FE['CronMode'] === '') {
            /** Page initial prepwork. */
            $this->initialPrepwork($this->L10N->getString('link_home'), $this->L10N->getString('tip_home'), false);

            /** CIDRAM version used. */
            $this->FE['ScriptVersion'] = $this->ScriptVersion;

            /** PHP version used. */
            $this->FE['info_php'] = PHP_VERSION;

            /** SAPI used. */
            $this->FE['info_sapi'] = php_sapi_name();

            /** Operating system used. */
            $this->FE['info_os'] = php_uname();

            /** Provide the option to log out (omit home link). */
            $this->FE['bNav'] = $this->FE['LogoutButton'];

            /** Build repository backup locations information. */
            $this->FE['BackupLocations'] = implode(' | ', [
                '<a href="https://bitbucket.org/Maikuolan/cidram" hreflang="en-US" target="_blank" rel="noopener external">CIDRAM@Bitbucket</a>',
                '<a href="https://sourceforge.net/projects/cidram/" hreflang="en-US" target="_blank" rel="noopener external">CIDRAM@SourceForge</a>'
            ]);

            /** Extension availability. */
            $this->FE['Extensions'] = [];
            $ExtensionsCopyData = '';
            foreach ([
                ['Lib' => 'pcre', 'Name' => 'PCRE'],
                ['Lib' => 'curl', 'Name' => 'cURL'],
                ['Lib' => 'apcu', 'Name' => 'APCu'],
                ['Lib' => 'memcached', 'Name' => 'Memcached'],
                ['Lib' => 'redis', 'Name' => 'Redis'],
                ['Lib' => 'pdo', 'Name' => 'PDO', 'Drivers' => (class_exists('\PDO') ? \PDO::getAvailableDrivers() : [])]
            ] as $this->CIDRAM['ThisExtension']) {
                if (extension_loaded($this->CIDRAM['ThisExtension']['Lib'])) {
                    $this->CIDRAM['ExtVer'] = (new \ReflectionExtension($this->CIDRAM['ThisExtension']['Lib']))->getVersion();
                    $this->CIDRAM['ThisResponse'] = $this->L10N->getString('response_yes') . ' (' . $this->CIDRAM['ExtVer'] . ')';
                    if (!empty($this->CIDRAM['ThisExtension']['Drivers'])) {
                        $this->CIDRAM['ThisResponse'] .= ', {' . implode(', ', $this->CIDRAM['ThisExtension']['Drivers']) . '}';
                    }
                    $ExtensionsCopyData .= $this->ltrInRtf(
                        sprintf('- %s➡%s\n', $this->CIDRAM['ThisExtension']['Name'], $this->CIDRAM['ThisResponse'])
                    );
                    $this->CIDRAM['ThisResponse'] = '<span class="txtGn">' . $this->CIDRAM['ThisResponse'] . '</span>';
                } else {
                    $ExtensionsCopyData .= $this->ltrInRtf(
                        sprintf('- %s➡%s\n', $this->CIDRAM['ThisExtension']['Name'], $this->L10N->getString('response_no'))
                    );
                    $this->CIDRAM['ThisResponse'] = '<span class="txtRd">' . $this->L10N->getString('response_no') . '</span>';
                }
                $this->FE['Extensions'][] = '    <li><small>' . $this->ltrInRtf(sprintf(
                    '%s➡%s',
                    $this->CIDRAM['ThisExtension']['Name'],
                    $this->CIDRAM['ThisResponse']
                )) . '</small></li>';
            }
            $this->FE['Extensions'] = implode("\n", $this->FE['Extensions']);
            $this->FE['ExtensionIsAvailable'] = $this->ltrInRtf(
                $this->L10N->getString('label_extension') . '➡' . $this->L10N->getString('label_installed_available')
            );
            unset($this->CIDRAM['ExtVer'], $this->CIDRAM['ThisResponse'], $this->CIDRAM['ThisExtension']);

            /** Build clipboard data. */
            $this->FE['HomeCopyData'] = sprintf(
                '%1$s\n\n- %2$s %3$s\n- %4$s %5$s\n- %6$s %7$s\n- %8$s %9$s\n\n- %10$s %11$s\n- %4$s %12$s\n- %6$s %13$s\n- %8$s %14$s\n- %15$s %16$s\n\n%17$s\n%18$s',
                $this->L10N->getString('label_sysinfo'),
                $this->L10N->getString('label_cidram'),
                $this->FE['ScriptVersion'],
                $this->L10N->getString('label_branch'),
                $this->FE['info_cidram_branch'],
                $this->L10N->getString('label_stable'),
                $this->FE['info_cidram_stable'],
                $this->L10N->getString('label_unstable'),
                $this->FE['info_cidram_unstable'],
                $this->L10N->getString('label_php'),
                $this->FE['info_php'],
                $this->FE['info_php_branch'],
                $this->FE['info_php_stable'],
                $this->FE['info_php_unstable'],
                $this->L10N->getString('label_sapi'),
                $this->FE['info_sapi'],
                $this->FE['ExtensionIsAvailable'],
                $ExtensionsCopyData
            );

            /** Parse output. */
            $this->FE['FE_Content'] = $this->parseVars(
                $this->L10N->Data + $this->FE,
                $this->readFile($this->getAssetPath('_home.html'))
            ) . $this->CIDRAM['MenuToggle'];

            /** Send output. */
            echo $this->sendOutput();
        }

        /** A simple passthru for the file manager icons. */
        elseif ($this->CIDRAM['QueryVars']['cidram-page'] === 'icon' && $this->FE['Permissions'] === 1) {
            if (
                !empty($this->CIDRAM['QueryVars']['file']) &&
                $this->pathSecurityCheck($this->CIDRAM['QueryVars']['file']) &&
                is_readable($this->Vault . $this->CIDRAM['QueryVars']['file'])
            ) {
                header('Content-Type: image/x-icon');
                echo $this->readFile($this->Vault . $this->CIDRAM['QueryVars']['file']);
            } elseif (
                !empty($this->CIDRAM['QueryVars']['icon']) &&
                $this->pathSecurityCheck($this->CIDRAM['QueryVars']['icon'] . '.gif') &&
                ($this->CIDRAM['IconPath'] = $this->getAssetPath($this->CIDRAM['QueryVars']['icon'] . '.gif')) &&
                ($this->CIDRAM['IconData'] = $this->readFile($this->CIDRAM['IconPath']))
            ) {
                /** Set mime-type. */
                header('Content-Type: image/gif');

                /** Prevents needlessly reloading static assets. */
                header('Last-Modified: ' . gmdate('D, d M Y H:i:s T', filemtime($this->CIDRAM['IconPath'])));

                /** Send icon data. */
                echo $this->CIDRAM['IconData'];
            }
        }

        /** A simple passthru for the flags CSS. */
        elseif ($this->CIDRAM['QueryVars']['cidram-page'] === 'flags' && $this->FE['Permissions'] && is_readable($this->Vault . 'assets/frontend/flags.css')) {
            header('Content-Type: text/css');

            /** Prevents needlessly reloading static assets. */
            header('Last-Modified: ' . gmdate('D, d M Y H:i:s T', filemtime($this->Vault . 'assets/frontend/flags.css')));

            /** Send asset data. */
            echo $this->readFile($this->Vault . 'assets/frontend/flags.css');
        }

        /** Accounts. */
        elseif ($this->CIDRAM['QueryVars']['cidram-page'] === 'accounts' && $this->FE['Permissions'] === 1) {
            /** $_POST overrides for mobile display. */
            if (!empty($_POST['username']) && !empty($_POST['do_mob']) && (!empty($_POST['password_mob']) || $_POST['do_mob'] === 'delete-account')) {
                $_POST['do'] = $_POST['do_mob'];
            }
            if (empty($_POST['username']) && !empty($_POST['username_mob'])) {
                $_POST['username'] = $_POST['username_mob'];
            }
            if (empty($_POST['permissions']) && !empty($_POST['permissions_mob'])) {
                $_POST['permissions'] = $_POST['permissions_mob'];
            }
            if (empty($_POST['password']) && !empty($_POST['password_mob'])) {
                $_POST['password'] = $_POST['password_mob'];
            }

            /** A form has been submitted. */
            if ($this->FE['FormTarget'] === 'accounts' && !empty($_POST['do'])) {
                /** Create a new account. */
                if ($_POST['do'] === 'create-account' && !empty($_POST['username']) && !empty($_POST['password']) && !empty($_POST['permissions'])) {
                    $Accounts = [
                        'TryPath' => 'user.' . $_POST['username'],
                        'TryPass' => password_hash($_POST['password'], $this->DefaultAlgo),
                        'TryPermissions' => (int)$_POST['permissions']
                    ];
                    if (isset($this->Configuration[$Accounts['TryPath']])) {
                        $this->FE['state_msg'] = $this->L10N->getString('response_accounts_already_exists');
                    } else {
                        $this->Configuration[$Accounts['TryPath']] = ['password' => $Accounts['TryPass'], 'permissions' => $Accounts['TryPermissions']];
                        if ($this->updateConfiguration()) {
                            $this->FE['state_msg'] = $this->L10N->getString('response_accounts_created');
                        } else {
                            $this->FE['state_msg'] = $this->L10N->getString('response_failed_to_create');
                        }
                    }
                    unset($Accounts);
                }

                /** Delete an account. */
                if ($_POST['do'] === 'delete-account' && !empty($_POST['username'])) {
                    $Accounts = 'user.' . $_POST['username'];
                    if (!isset($this->Configuration[$Accounts])) {
                        $this->FE['state_msg'] = $this->L10N->getString('response_accounts_doesnt_exist');
                    } else {
                        unset($this->Configuration[$Accounts]);
                        if ($this->updateConfiguration()) {
                            $this->FE['state_msg'] = $this->L10N->getString('response_accounts_deleted');
                        } else {
                            $this->FE['state_msg'] = $this->L10N->getString('response_failed_to_delete');
                        }
                    }
                    unset($Accounts);
                }

                /** Update an account password. */
                if ($_POST['do'] === 'update-password' && !empty($_POST['username']) && !empty($_POST['password'])) {
                    $Accounts = [
                        'TryPath' => 'user.' . $_POST['username'],
                        'TryPass' => password_hash($_POST['password'], $this->DefaultAlgo)
                    ];
                    if (!isset($this->Configuration[$Accounts['TryPath']])) {
                        $this->FE['state_msg'] = $this->L10N->getString('response_accounts_doesnt_exist');
                    } else {
                        $this->Configuration[$Accounts['TryPath']]['password'] = $Accounts['TryPass'];
                        if ($this->updateConfiguration()) {
                            $this->FE['state_msg'] = $this->L10N->getString('response_accounts_password_updated');
                        } else {
                            $this->FE['state_msg'] = $this->L10N->getString('response_failed_to_update');
                        }
                    }
                    unset($Accounts);
                }
            }

            if (!$this->FE['ASYNC']) {
                /** Page initial prepwork. */
                $this->initialPrepwork($this->L10N->getString('link_accounts'), $this->L10N->getString('tip_accounts'));

                /** Append async globals. */
                $this->FE['JS'] .= sprintf(
                    'window[%3$s]=\'accounts\';function acc(e,d,i,t){var o=function(e){%4$se)' .
                    '},a=function(){%4$s\'%1$s\')};window.username=%2$s(e).value,window.passw' .
                    'ord=%2$s(d).value,window.do=%2$s(t).value,\'delete-account\'==window.do&' .
                    '&$(\'POST\',\'\',[%3$s,\'username\',\'password\',\'do\'],a,function(e){%' .
                    '4$se),hideid(i)},o),\'update-password\'==window.do&&$(\'POST\',\'\',[%3$' .
                    's,\'username\',\'password\',\'do\'],a,o,o)}' . "\n",
                    $this->L10N->getString('state_loading'),
                    'document.getElementById',
                    "'cidram-form-target'",
                    "w('stateMsg',"
                );

                $this->FE['AccountsRow'] = $this->readFile($this->getAssetPath('_accounts_row.html'));
                $this->FE['Accounts'] = '';

                $this->FE['LI'] = ['Possible' => []];
                foreach ($this->Cache->getAllEntries() as $this->FE['LI']['KeyName'] => $this->FE['LI']['KeyData']) {
                    if (isset($this->FE['LI']['KeyData']['Time']) && $this->FE['LI']['KeyData']['Time'] > 0 && $this->FE['LI']['KeyData']['Time'] < $this->Now) {
                        continue;
                    }
                    if (strlen($this->FE['LI']['KeyName']) > 64) {
                        $this->FE['LI']['Try'] = substr($this->FE['LI']['KeyName'], 0, -64);
                        if (isset($this->Configuration['user.' . $this->FE['LI']['Try']])) {
                            $this->FE['LI']['Possible'][$this->FE['LI']['Try']] = true;
                        }
                    }
                }
                $this->FE['LI'] = $this->FE['LI']['Possible'];

                foreach ($this->Configuration as $CatKey => $this->CIDRAM['CatValues']) {
                    if (substr($CatKey, 0, 5) !== 'user.' || !is_array($this->CIDRAM['CatValues'])) {
                        continue;
                    }
                    $this->CIDRAM['RowInfo'] = [
                        'AccUsername' => substr($CatKey, 5),
                        'AccPassword' => $this->CIDRAM['CatValues']['password'] ?? '',
                        'AccPermissions' => $this->CIDRAM['CatValues']['permissions'] ?? 0,
                        'AccWarnings' => ''
                    ];
                    if ($this->CIDRAM['RowInfo']['AccPermissions'] === 1) {
                        $this->CIDRAM['RowInfo']['AccPermissions'] = $this->L10N->getString('state_complete_access');
                    } elseif ($this->CIDRAM['RowInfo']['AccPermissions'] === 2) {
                        $this->CIDRAM['RowInfo']['AccPermissions'] = $this->L10N->getString('state_logs_access_only');
                    } elseif ($this->CIDRAM['RowInfo']['AccPermissions'] === 3) {
                        $this->CIDRAM['RowInfo']['AccPermissions'] = 'Cronable';
                    } else {
                        $this->CIDRAM['RowInfo']['AccPermissions'] = $this->L10N->getString('response_error');
                    }

                    /** Account password warnings. */
                    if ($this->CIDRAM['RowInfo']['AccPassword'] === $this->FE['DefaultPassword']) {
                        $this->CIDRAM['RowInfo']['AccWarnings'] .= '<br /><div class="txtRd">' . $this->L10N->getString('warning_default_password') . '</div>';
                    } elseif ((
                        strlen($this->CIDRAM['RowInfo']['AccPassword']) !== 60 &&
                        strlen($this->CIDRAM['RowInfo']['AccPassword']) !== 96 &&
                        strlen($this->CIDRAM['RowInfo']['AccPassword']) !== 97
                    ) || (
                        strlen($this->CIDRAM['RowInfo']['AccPassword']) === 60 &&
                        !preg_match('/^\$2.\$\d\d\$/', $this->CIDRAM['RowInfo']['AccPassword'])
                    ) || (
                        strlen($this->CIDRAM['RowInfo']['AccPassword']) === 96 &&
                        !preg_match('/^\$argon2i\$/', $this->CIDRAM['RowInfo']['AccPassword'])
                    ) || (
                        strlen($this->CIDRAM['RowInfo']['AccPassword']) === 97 &&
                        !preg_match('/^\$argon2id\$/', $this->CIDRAM['RowInfo']['AccPassword'])
                    )) {
                        $this->CIDRAM['RowInfo']['AccWarnings'] .= '<br /><div class="txtRd">' . $this->L10N->getString('warning_password_not_valid') . '</div>';
                    }

                    /** Logged in notice. */
                    if (isset($this->FE['LI'][$this->CIDRAM['RowInfo']['AccUsername']])) {
                        $this->CIDRAM['RowInfo']['AccWarnings'] .= '<br /><div class="txtGn">' . $this->L10N->getString('state_logged_in') . '</div>';
                    }

                    $this->CIDRAM['RowInfo']['AccID'] = bin2hex($this->CIDRAM['RowInfo']['AccUsername']);
                    $this->CIDRAM['RowInfo']['AccUsername'] = htmlentities($this->CIDRAM['RowInfo']['AccUsername']);
                    $this->FE['Accounts'] .= $this->parseVars(
                        $this->L10N->Data,
                        $this->parseVars($this->CIDRAM['RowInfo'], $this->FE['AccountsRow'])
                    );
                }
                unset($this->CIDRAM['RowInfo'], $this->CIDRAM['CatValues'], $CatKey, $this->FE['LI']);
            }

            if ($this->FE['ASYNC']) {
                /** Send output (async). */
                echo $this->FE['state_msg'];
            } else {
                /** Parse output. */
                $this->FE['FE_Content'] = $this->parseVars(
                    $this->L10N->Data + $this->FE,
                    $this->readFile($this->getAssetPath('_accounts.html'))
                );

                /** Send output. */
                echo $this->sendOutput();
            }
        }

        /** Configuration. */
        elseif ($this->CIDRAM['QueryVars']['cidram-page'] === 'config' && $this->FE['Permissions'] === 1) {
            /** Page initial prepwork. */
            $this->initialPrepwork($this->L10N->getString('link_config'), $this->L10N->getString('tip_config'));

            /** Append number localisation JS. */
            $this->FE['JS'] .= $this->numberL10nJs() . "\n";

            /** Directive template. */
            $this->FE['ConfigRow'] = $this->readFile($this->getAssetPath('_config_row.html'));

            /** Flag for modified configuration. */
            $this->CIDRAM['ConfigModified'] = false;

            $this->FE['Indexes'] = '<ul class="pieul">';
            $this->FE['ConfigFields'] = '';

            /** For required extensions, classes, etc. */
            $ReqsLookupCache = [];

            /** Iterate through configuration defaults. */
            foreach ($this->CIDRAM['Config Defaults'] as $CatKey => $CatValue) {
                if (!is_array($CatValue)) {
                    continue;
                }
                if ($CatInfo = $this->L10N->getString('config_' . $CatKey)) {
                    $CatInfo = '<br /><em>' . $CatInfo . '</em>';
                }
                $this->FE['ConfigFields'] .= sprintf(
                    '<table><tr><td class="ng2"><div id="%1$s-container" class="s">' .
                    '<a id="%1$sShowLink" class="showlink" href="#%1$s-container" onclick="javascript:toggleconfig(\'%1$sRow\',\'%1$sShowLink\')">%1$s</a>' .
                    '%3$s</div></td></tr></table><span id="%1$sRow" %2$s><table>',
                    $CatKey,
                    'style="display:none"',
                    $CatInfo
                ) . "\n";
                $CatData = '';
                foreach ($CatValue as $DirKey => $DirValue) {
                    $ThisDir = ['Preview' => '', 'Trigger' => '', 'FieldOut' => '', 'CatKey' => $CatKey];
                    if (empty($DirValue['type']) || !isset($this->Configuration[$CatKey][$DirKey])) {
                        continue;
                    }
                    $ThisDir['DirLangKey'] = 'config_' . $CatKey . '_' . $DirKey;
                    $ThisDir['DirLangKeyOther'] = $ThisDir['DirLangKey'] . '_other';
                    $ThisDir['DirName'] = '<span class="normalHeight">' . $this->ltrInRtf($CatKey . '➡' . $DirKey) . '</span>';
                    $ThisDir['Friendly'] = $this->L10N->getString($ThisDir['DirLangKey'] . '_label') ?: $DirKey;
                    $CatData .= sprintf(
                        '<li><a onclick="javascript:toggleconfigNav(\'%1$sRow\',\'%1$sShowLink\')" href="#%2$s">%3$s</a></li>',
                        $CatKey,
                        $ThisDir['DirLangKey'],
                        $ThisDir['Friendly']
                    );
                    $ThisDir['DirLang'] =
                        $this->L10N->getString($ThisDir['DirLangKey']) ?:
                        $this->L10N->getString('label_' . $DirKey) ?:
                        $this->L10N->getString('config_' . $CatKey) ?:
                        $this->L10N->getString('response_error');
                    if (!empty($DirValue['experimental'])) {
                        $ThisDir['DirLang'] = '<code class="exp">' . $this->L10N->getString('config_experimental') . '</code> ' . $ThisDir['DirLang'];
                    }
                    $ThisDir['autocomplete'] = empty($DirValue['autocomplete']) ? '' : sprintf(
                        ' autocomplete="%s"',
                        $DirValue['autocomplete']
                    );
                    if (isset($_POST[$ThisDir['DirLangKey']])) {
                        if (in_array($DirValue['type'], ['bool', 'float', 'int', 'kb', 'string', 'timezone', 'email', 'url'], true)) {
                            $this->autoType($_POST[$ThisDir['DirLangKey']], $DirValue['type']);
                        }
                        if (!preg_match('/[^\x20-\xFF"\']/', $_POST[$ThisDir['DirLangKey']]) && (
                            !isset($DirValue['choices']) ||
                            isset($DirValue['choices'][$_POST[$ThisDir['DirLangKey']]])
                        )) {
                            $this->CIDRAM['ConfigModified'] = true;
                            $this->Configuration[$CatKey][$DirKey] = $_POST[$ThisDir['DirLangKey']];
                        } elseif (
                            !empty($DirValue['allow_other']) &&
                            $_POST[$ThisDir['DirLangKey']] === 'Other' &&
                            isset($_POST[$ThisDir['DirLangKeyOther']]) &&
                            !preg_match('/[^\x20-\xFF"\']/', $_POST[$ThisDir['DirLangKeyOther']])
                        ) {
                            $this->CIDRAM['ConfigModified'] = true;
                            $this->Configuration[$CatKey][$DirKey] = $_POST[$ThisDir['DirLangKeyOther']];
                        }
                    } elseif (
                        $DirValue['type'] === 'checkbox' &&
                        isset($DirValue['choices']) &&
                        is_array($DirValue['choices'])
                    ) {
                        $DirValue['Posts'] = [];
                        foreach ($DirValue['choices'] as $DirValue['ThisChoiceKey'] => $DirValue['ThisChoice']) {
                            if (isset($DirValue['labels']) && is_array($DirValue['labels'])) {
                                foreach ($DirValue['labels'] as $DirValue['ThisLabelKey'] => $DirValue['ThisLabel']) {
                                    if (!empty($_POST[$ThisDir['DirLangKey'] . '_' . $DirValue['ThisChoiceKey'] . '_' . $DirValue['ThisLabelKey']])) {
                                        $DirValue['Posts'][] = $DirValue['ThisChoiceKey'] . ':' . $DirValue['ThisLabelKey'];
                                    }
                                }
                            } elseif (!empty($_POST[$ThisDir['DirLangKey'] . '_' . $DirValue['ThisChoiceKey']])) {
                                $DirValue['Posts'][] = $DirValue['ThisChoiceKey'];
                            }
                        }
                        $DirValue['Posts'] = implode("\n", $DirValue['Posts']) ?: '';
                        if (!empty($_POST['updatingConfig']) && $this->Configuration[$CatKey][$DirKey] !== $DirValue['Posts']) {
                            $this->CIDRAM['ConfigModified'] = true;
                            $this->Configuration[$CatKey][$DirKey] = $DirValue['Posts'];
                        }
                    }
                    if (isset($DirValue['preview'])) {
                        $ThisDir['Preview'] = ($DirValue['preview'] === 'allow_other') ? '' : sprintf(
                            $DirValue['preview_default_fill'] ?? ' = <span id="%s_preview"></span>',
                            $ThisDir['DirLangKey']
                        );
                        $ThisDir['Trigger'] = ' onchange="javascript:' . $ThisDir['DirLangKey'] . '_function();" onkeyup="javascript:' . $ThisDir['DirLangKey'] . '_function();"';
                        if ($DirValue['preview'] === 'kb') {
                            $ThisDir['Preview'] .= sprintf(
                                '<script type="text/javascript">function %1$s_function(){var e=%7$s?%7$s(' .
                                '\'%1$s_field\').value:%8$s&&!%7$s?%8$s.%1$s_field.value:\'\',z=e.replace' .
                                '(/o$/i,\'b\').substr(-2).toLowerCase(),y=\'kb\'==z?1:\'mb\'==z?1024:\'gb' .
                                '\'==z?1048576:\'tb\'==z?1073741824:\'b\'==e.substr(-1)?.0009765625:1,e=e' .
                                '.replace(/[^0-9]*$/i,\'\'),e=isNaN(e)?0:e*y,t=0>e?\'0 %2$s\':1>e?nft((10' .
                                '24*e).toFixed(0))+\' %2$s\':1024>e?nft((1*e).toFixed(2))+\' %3$s\':10485' .
                                '76>e?nft((e/1024).toFixed(2))+\' %4$s\':1073741824>e?nft((e/1048576).toF' .
                                'ixed(2))+\' %5$s\':nft((e/1073741824).toFixed(2))+\' %6$s\';%7$s?%7$s(\'' .
                                '%1$s_preview\').innerHTML=t:%8$s&&!%7$s?%8$s.%1$s_preview.innerHTML=t:\'' .
                                '\'};%1$s_function();</script>',
                                $ThisDir['DirLangKey'],
                                $this->L10N->getPlural(0, 'field_size_bytes'),
                                $this->L10N->getString('field_size_KB'),
                                $this->L10N->getString('field_size_MB'),
                                $this->L10N->getString('field_size_GB'),
                                $this->L10N->getString('field_size_TB'),
                                'document.getElementById',
                                'document.all'
                            );
                        } elseif ($DirValue['preview'] === 'seconds') {
                            $ThisDir['Preview'] .= sprintf(
                                '<script type="text/javascript">function %1$s_function(){var t=%9$s?%9$s(' .
                                '\'%1$s_field\').value:%10$s&&!%9$s?%10$s.%1$s_field.value:\'\',e=isNaN(t' .
                                ')?0:0>t?t*-1:t,n=e?Math.floor(e/31536e3):0,e=e?e-31536e3*n:0,o=e?Math.fl' .
                                'oor(e/2592e3):0,e=e-2592e3*o,l=e?Math.floor(e/604800):0,e=e-604800*l,r=e' .
                                '?Math.floor(e/86400):0,e=e-86400*r,d=e?Math.floor(e/3600):0,e=e-3600*d,i' .
                                '=e?Math.floor(e/60):0,e=e-60*i,f=e?Math.floor(1*e):0,a=nft(n.toString())' .
                                '+\' %2$s – \'+nft(o.toString())+\' %3$s – \'+nft(l.toString())+\' %4$s –' .
                                ' \'+nft(r.toString())+\' %5$s – \'+nft(d.toString())+\' %6$s – \'+nft(i.' .
                                'toString())+\' %7$s – \'+nft(f.toString())+\' %8$s\';%9$s?%9$s(\'%1$s_pr' .
                                'eview\').innerHTML=a:%10$s&&!%9$s?%10$s.%1$s_preview.innerHTML=a:\'\'}' .
                                '%1$s_function();</script>',
                                $ThisDir['DirLangKey'],
                                $this->L10N->getString('previewer_years'),
                                $this->L10N->getString('previewer_months'),
                                $this->L10N->getString('previewer_weeks'),
                                $this->L10N->getString('previewer_days'),
                                $this->L10N->getString('previewer_hours'),
                                $this->L10N->getString('previewer_minutes'),
                                $this->L10N->getString('previewer_seconds'),
                                'document.getElementById',
                                'document.all'
                            );
                        } elseif ($DirValue['preview'] === 'minutes') {
                            $ThisDir['Preview'] .= sprintf(
                                '<script type="text/javascript">function %1$s_function(){var t=%9$s?%9$s(' .
                                '\'%1$s_field\').value:%10$s&&!%9$s?%10$s.%1$s_field.value:\'\',e=isNaN(t' .
                                ')?0:0>t?t*-1:t,n=e?Math.floor(e/525600):0,e=e?e-525600*n:0,o=e?Math.floo' .
                                'r(e/43200):0,e=e-43200*o,l=e?Math.floor(e/10080):0,e=e-10080*l,r=e?Math.' .
                                'floor(e/1440):0,e=e-1440*r,d=e?Math.floor(e/60):0,e=e-60*d,i=e?Math.floo' .
                                'r(e*1):0,e=e-i,f=e?Math.floor(60*e):0,a=nft(n.toString())+\' %2$s – \'+n' .
                                'ft(o.toString())+\' %3$s – \'+nft(l.toString())+\' %4$s – \'+nft(r.toStr' .
                                'ing())+\' %5$s – \'+nft(d.toString())+\' %6$s – \'+nft(i.toString())+\' ' .
                                '%7$s – \'+nft(f.toString())+\' %8$s\';%9$s?%9$s(\'%1$s_preview\').innerH' .
                                'TML=a:%10$s&&!%9$s?%10$s.%1$s_preview.innerHTML=a:\'\'}%1$s_function();<' .
                                '/script>',
                                $ThisDir['DirLangKey'],
                                $this->L10N->getString('previewer_years'),
                                $this->L10N->getString('previewer_months'),
                                $this->L10N->getString('previewer_weeks'),
                                $this->L10N->getString('previewer_days'),
                                $this->L10N->getString('previewer_hours'),
                                $this->L10N->getString('previewer_minutes'),
                                $this->L10N->getString('previewer_seconds'),
                                'document.getElementById',
                                'document.all'
                            );
                        } elseif ($DirValue['preview'] === 'hours') {
                            $ThisDir['Preview'] .= sprintf(
                                '<script type="text/javascript">function %1$s_function(){var t=%9$s?%9$s(' .
                                '\'%1$s_field\').value:%10$s&&!%9$s?%10$s.%1$s_field.value:\'\',e=isNaN(t' .
                                ')?0:0>t?t*-1:t,n=e?Math.floor(e/8760):0,e=e?e-8760*n:0,o=e?Math.floor(e/' .
                                '720):0,e=e-720*o,l=e?Math.floor(e/168):0,e=e-168*l,r=e?Math.floor(e/24):' .
                                '0,e=e-24*r,d=e?Math.floor(e*1):0,e=e-d,i=e?Math.floor(60*e):0,e=e-(i/60)' .
                                ',f=e?Math.floor(3600*e):0,a=nft(n.toString())+\' %2$s – \'+nft(o.toStrin' .
                                'g())+\' %3$s – \'+nft(l.toString())+\' %4$s – \'+nft(r.toString())+\' ' .
                                '%5$s – \'+nft(d.toString())+\' %6$s – \'+nft(i.toString())+\' %7$s – \'+' .
                                'nft(f.toString())+\' %8$s\';%9$s?%9$s(\'%1$s_preview\').innerHTML=a:' .
                                '%10$s&&!%9$s?%10$s.%1$s_preview.innerHTML=a:\'\'}%1$s_function();</script>',
                                $ThisDir['DirLangKey'],
                                $this->L10N->getString('previewer_years'),
                                $this->L10N->getString('previewer_months'),
                                $this->L10N->getString('previewer_weeks'),
                                $this->L10N->getString('previewer_days'),
                                $this->L10N->getString('previewer_hours'),
                                $this->L10N->getString('previewer_minutes'),
                                $this->L10N->getString('previewer_seconds'),
                                'document.getElementById',
                                'document.all'
                            );
                        } elseif ($DirValue['preview'] === 'allow_other') {
                            $ThisDir['Preview'] .= sprintf(
                                '<script type="text/javascript">function %1$s_function(){var e=%2$s?%2$s(' .
                                '\'%1$s_field\').value:%3$s&&!%2$s?%3$s.%1$s_field.value:\'\';e==\'Other\'' .
                                '?showid(\'%4$s_field\'):hideid(\'%4$s_field\')};%1$s_function();</script>',
                                $ThisDir['DirLangKey'],
                                'document.getElementById',
                                'document.all',
                                $ThisDir['DirLangKeyOther']
                            );
                        } elseif (substr($DirValue['preview'], 0, 3) === 'js:') {
                            $ThisDir['Preview'] .= '<script type="text/javascript">' . sprintf(
                                substr($DirValue['preview'], 3),
                                $ThisDir['DirLangKey']
                            ) . '</script>';
                        }
                    }
                    if ($DirValue['type'] === 'timezone') {
                        $DirValue['choices'] = ['SYSTEM' => $this->L10N->getString('field_system_timezone')];
                        foreach (array_unique(\DateTimeZone::listIdentifiers()) as $DirValue['ChoiceValue']) {
                            $DirValue['choices'][$DirValue['ChoiceValue']] = $DirValue['ChoiceValue'];
                        }
                    }
                    if (isset($DirValue['choices'])) {
                        if (
                            $DirValue['type'] === 'checkbox' ||
                            (isset($DirValue['style']) && $DirValue['style'] === 'radio')
                        ) {
                            if (isset($DirValue['labels']) && is_array($DirValue['labels'])) {
                                $DirValue['gridV'] = 'gridVB';
                                $ThisDir['FieldOut'] = sprintf(
                                    '<div style="display:grid;margin:auto 38px;grid-template-columns:%s;text-align:%s">',
                                    str_repeat('auto ', count($DirValue['labels'])) . 'auto',
                                    $this->FE['FE_Align']
                                );
                                $DirValue['HasLabels'] = true;
                                foreach ($DirValue['labels'] as $DirValue['ThisLabel']) {
                                    $DirValue['gridV'] = ($DirValue['gridV']) === 'gridVB' ? 'gridVA' : 'gridVB';
                                    $this->replaceLabelWithL10n($DirValue['ThisLabel']);
                                    $ThisDir['FieldOut'] .= sprintf(
                                        '<div class="gridboxitem configMatrixLabel %s">%s</div>',
                                        $DirValue['gridV'],
                                        $DirValue['ThisLabel']
                                    );
                                }
                                $ThisDir['FieldOut'] .= '<div class="gridboxitem"></div>';
                            } else {
                                $ThisDir['FieldOut'] = sprintf(
                                    '<div style="display:grid;margin:auto 38px;grid-template-columns:19px auto;text-align:%s">',
                                    $this->FE['FE_Align']
                                );
                                $DirValue['HasLabels'] = false;
                            }
                        } else {
                            $ThisDir['FieldOut'] = sprintf(
                                '<select class="auto" style="text-transform:capitalize" name="%1$s" id="%1$s_field"%2$s>',
                                $ThisDir['DirLangKey'],
                                $ThisDir['Trigger']
                            );
                        }
                        $DirValue['gridH'] = 'gridHB';
                        foreach ($DirValue['choices'] as $ChoiceKey => $ChoiceValue) {
                            if (isset($DirValue['choice_filter'])) {
                                if (!is_string($ChoiceValue) || $this->{$DirValue['choice_filter']}($ChoiceKey, $ChoiceValue) === false) {
                                    continue;
                                }
                            }
                            $DirValue['gridV'] = 'gridVB';
                            $DirValue['gridH'] = ($DirValue['gridH']) === 'gridHB' ? 'gridHA' : 'gridHB';
                            $ChoiceValue = $this->timeFormat($this->Now, $ChoiceValue);
                            if (strpos($ChoiceValue, '{') !== false) {
                                $ChoiceValue = $this->parseVars($this->L10N->Data, $ChoiceValue);
                            }
                            $this->replaceLabelWithL10n($ChoiceValue);
                            if ($DirValue['type'] === 'checkbox') {
                                if (isset($DirValue['nonsense'])) {
                                    $DirValue['ThisNonsense'] = array_flip(explode("\n", $DirValue['nonsense']));
                                }
                                if ($DirValue['HasLabels']) {
                                    foreach ($DirValue['labels'] as $DirValue['ThisLabelKey'] => $DirValue['ThisLabel']) {
                                        $DirValue['gridV'] = ($DirValue['gridV']) === 'gridVB' ? 'gridVA' : 'gridVB';
                                        if (isset($DirValue['ThisNonsense'][$ChoiceKey . ':' . $DirValue['ThisLabelKey']])) {
                                            $ThisDir['FieldOut'] .= sprintf(
                                                '<div class="gridboxcheckcell %s %s">–</div>',
                                                $DirValue['gridV'],
                                                $DirValue['gridH']
                                            );
                                        } else {
                                            $ThisDir['FieldOut'] .= sprintf(
                                                '<div class="gridboxcheckcell %4$s %5$s"><label class="gridlabel"><input%3$s type="checkbox" class="auto" name="%1$s" id="%1$s"%2$s /></label></div>',
                                                $ThisDir['DirLangKey'] . '_' . $ChoiceKey . '_' . $DirValue['ThisLabelKey'],
                                                preg_match(
                                                    '~(?:^|\n)' . preg_quote($ChoiceKey . ':' . $DirValue['ThisLabelKey']) . '(?:\n|$)~i',
                                                    $this->Configuration[$CatKey][$DirKey]
                                                ) ? ' checked' : '',
                                                $ThisDir['Trigger'],
                                                $DirValue['gridV'],
                                                $DirValue['gridH']
                                            );
                                        }
                                    }
                                    $ThisDir['FieldOut'] .= sprintf(
                                        '<div class="gridboxitem %s %s">%s</div>',
                                        $DirValue['gridH'],
                                        (count($DirValue['labels']) % 2) === 0 ? 'vrte' : 'vrto',
                                        $ChoiceValue
                                    );
                                } else {
                                    $ThisDir['FieldOut'] .= sprintf(
                                        '<div class="gridboxcheckcell gridVA %5$s"><label class="gridlabel"><input%4$s type="checkbox" class="auto" name="%1$s" id="%1$s"%2$s /></label></div><div class="gridboxitem %5$s"><label for="%1$s" class="s">%3$s</label></div>',
                                        $ThisDir['DirLangKey'] . '_' . $ChoiceKey,
                                        preg_match(
                                            '~(?:^|\n)' . preg_quote($ChoiceKey) . '(?:\n|$)~i',
                                            $this->Configuration[$CatKey][$DirKey]
                                        ) ? ' checked' : '',
                                        $ChoiceValue,
                                        $ThisDir['Trigger'],
                                        $DirValue['gridH']
                                    );
                                }
                            } elseif (isset($DirValue['style']) && $DirValue['style'] === 'radio') {
                                if (strpos($ChoiceValue, "\n")) {
                                    $ChoiceValue = explode("\n", $ChoiceValue);
                                    $ThisDir['FieldOut'] .= sprintf(
                                        '<div class="gridboxstretch gridVA %5$s"><label class="gridlabel"><input%4$s type="radio" class="auto" name="%6$s" id="%1$s" value="%7$s"%2$s /></label></div><div class="gridboxstretch %5$s"><label for="%1$s"><span class="s">%3$s</span><br />%8$s</label></div>',
                                        $ThisDir['DirLangKey'] . '_' . $ChoiceKey,
                                        $ChoiceKey === $this->Configuration[$CatKey][$DirKey] ? ' checked' : '',
                                        $ChoiceValue[0],
                                        $ThisDir['Trigger'],
                                        $DirValue['gridH'],
                                        $ThisDir['DirLangKey'],
                                        $ChoiceKey,
                                        $ChoiceValue[1]
                                    );
                                } else {
                                    $ThisDir['FieldOut'] .= sprintf(
                                        '<div class="gridboxcheckcell gridVA %5$s"><label class="gridlabel"><input%4$s type="radio" class="auto" name="%6$s" id="%1$s" value="%7$s"%2$s /></label></div><div class="gridboxitem %5$s"><label for="%1$s" class="s">%3$s</label></div>',
                                        $ThisDir['DirLangKey'] . '_' . $ChoiceKey,
                                        $ChoiceKey === $this->Configuration[$CatKey][$DirKey] ? ' checked' : '',
                                        $ChoiceValue,
                                        $ThisDir['Trigger'],
                                        $DirValue['gridH'],
                                        $ThisDir['DirLangKey'],
                                        $ChoiceKey
                                    );
                                }
                            } else {
                                $ThisDir['FieldOut'] .= sprintf(
                                    '<option style="text-transform:capitalize" value="%s"%s>%s</option>',
                                    $ChoiceKey,
                                    $ChoiceKey === $this->Configuration[$CatKey][$DirKey] ? ' selected' : '',
                                    $ChoiceValue
                                );
                            }
                        }
                        if (
                            $DirValue['type'] === 'checkbox' ||
                            (isset($DirValue['style']) && $DirValue['style'] === 'radio')
                        ) {
                            $ThisDir['FieldOut'] .= '</div>';
                        } else {
                            $ThisDir['SelectOther'] = !isset($DirValue['choices'][$this->Configuration[$CatKey][$DirKey]]);
                            $ThisDir['FieldOut'] .= empty($DirValue['allow_other']) ? '</select>' : sprintf(
                                '<option value="Other"%1$s>%2$s</option></select> <input type="text"%3$s class="auto" name="%4$s" id="%4$s_field" value="%5$s" />',
                                $ThisDir['SelectOther'] ? ' selected' : '',
                                $this->L10N->getString('label_other'),
                                $ThisDir['SelectOther'] ? '' : ' style="display:none"',
                                $ThisDir['DirLangKeyOther'],
                                $this->Configuration[$CatKey][$DirKey]
                            );
                        }
                    } elseif ($DirValue['type'] === 'bool') {
                        $ThisDir['FieldOut'] = sprintf(
                            '<select class="auto" name="%1$s" id="%1$s_field"%2$s><option value="true"%5$s>%3$s</option><option value="false"%6$s>%4$s</option></select>',
                            $ThisDir['DirLangKey'],
                            $ThisDir['Trigger'],
                            $this->L10N->getString('field_true'),
                            $this->L10N->getString('field_false'),
                            ($this->Configuration[$CatKey][$DirKey] ? ' selected' : ''),
                            ($this->Configuration[$CatKey][$DirKey] ? '' : ' selected')
                        );
                    } elseif (in_array($DirValue['type'], ['float', 'int'], true)) {
                        $ThisDir['FieldOut'] = sprintf(
                            '<input type="number" name="%1$s" id="%1$s_field" value="%2$s"%3$s%4$s%5$s />',
                            $ThisDir['DirLangKey'],
                            $this->Configuration[$CatKey][$DirKey],
                            (isset($DirValue['step']) ? ' step="' . $DirValue['step'] . '"' : ''),
                            $ThisDir['Trigger'],
                            ($DirValue['type'] === 'int' ? ' inputmode="numeric"' : '')
                        );
                    } elseif ($DirValue['type'] === 'url' || (
                        empty($DirValue['autocomplete']) && $DirValue['type'] === 'string'
                    )) {
                        $ThisDir['FieldOut'] = sprintf(
                            '<textarea name="%1$s" id="%1$s_field" class="half"%2$s%3$s>%4$s</textarea>',
                            $ThisDir['DirLangKey'],
                            $ThisDir['autocomplete'],
                            $ThisDir['Trigger'],
                            $this->Configuration[$CatKey][$DirKey]
                        );
                    } else {
                        $ThisDir['FieldOut'] = sprintf(
                            '<input type="text" name="%1$s" id="%1$s_field" value="%2$s"%3$s%4$s />',
                            $ThisDir['DirLangKey'],
                            $this->Configuration[$CatKey][$DirKey],
                            $ThisDir['autocomplete'],
                            $ThisDir['Trigger']
                        );
                    }
                    $ThisDir['FieldOut'] .= $ThisDir['Preview'];

                    /** Check extension and class requirements. */
                    if (!empty($DirValue['required'])) {
                        $ThisDir['FieldOut'] .= '<small>';
                        foreach ($DirValue['required'] as $DirValue['Requirement'] => $DirValue['Friendly']) {
                            if (isset($ReqsLookupCache[$DirValue['Requirement']])) {
                                $ThisDir['FieldOut'] .= $ReqsLookupCache[$DirValue['Requirement']];
                                continue;
                            }
                            if (substr($DirValue['Requirement'], 0, 1) === "\\") {
                                $ReqsLookupCache[$DirValue['Requirement']] = '<br /><span class="txtGn">✔️ ' . sprintf(
                                    $this->L10N->getString('label_is_available_class'),
                                    $DirValue['Friendly']
                                ) . '</span>';
                            } elseif (extension_loaded($DirValue['Requirement'])) {
                                $DirValue['ReqVersion'] = (new \ReflectionExtension($DirValue['Requirement']))->getVersion();
                                $ReqsLookupCache[$DirValue['Requirement']] = '<br /><span class="txtGn">✔️ ' . sprintf(
                                    $this->L10N->getString('label_is_available'),
                                    $DirValue['Friendly'],
                                    $DirValue['ReqVersion']
                                ) . '</span>';
                            } else {
                                $ReqsLookupCache[$DirValue['Requirement']] = '<br /><span class="txtRd">❌ ' . sprintf(
                                    $this->L10N->getString('label_is_not_available'),
                                    $DirValue['Friendly']
                                ) . '</span>';
                            }
                            $ThisDir['FieldOut'] .= $ReqsLookupCache[$DirValue['Requirement']];
                        }
                        $ThisDir['FieldOut'] .= '</small>';
                    }

                    /** Provide hints, useful for users to better understand the directive at hand. */
                    if (!empty($DirValue['hints'])) {
                        $ThisDir['Hints'] = $this->arrayFromL10nToArray($DirValue['hints']);
                        foreach ($ThisDir['Hints'] as $ThisDir['HintKey'] => $ThisDir['HintValue']) {
                            if (is_int($ThisDir['HintKey'])) {
                                $ThisDir['FieldOut'] .= sprintf("\n<br /><br />%s", $ThisDir['HintValue']);
                                continue;
                            }
                            $ThisDir['FieldOut'] .= sprintf(
                                "\n<br /><br /><span class=\"s\">%s</span> %s",
                                $ThisDir['HintKey'],
                                $ThisDir['HintValue']
                            );
                        }
                    }

                    /** Provide additional information, useful for users to better understand the directive at hand. */
                    if (!empty($DirValue['See also']) && is_array($DirValue['See also'])) {
                        $ThisDir['FieldOut'] .= sprintf("\n<br /><br />%s<ul>\n", $this->L10N->getString('label_see_also'));
                        foreach ($DirValue['See also'] as $DirValue['Ref key'] => $DirValue['Ref link']) {
                            $ThisDir['FieldOut'] .= sprintf(
                                '<li><a dir="ltr" href="%s">%s</a></li>',
                                $DirValue['Ref link'],
                                $this->L10N->Data[$DirValue['Ref key']] ?? $DirValue['Ref key']
                            );
                        }
                        $ThisDir['FieldOut'] .= "\n</ul>";
                    }

                    /** Finalise configuration row. */
                    $this->FE['ConfigFields'] .= $this->parseVars(
                        $this->L10N->Data + $ThisDir,
                        $this->FE['ConfigRow']
                    );
                }
                $CatKeyFriendly = $this->L10N->getString('config_' . $CatKey . '_label') ?: $CatKey;
                $this->FE['Indexes'] .= sprintf(
                    '<li><span class="comCat">%s</span><ul class="comSub">%s</ul></li>',
                    $CatKeyFriendly,
                    $CatData
                );
                $this->FE['ConfigFields'] .= "</table></span>\n";
            }

            /** Cleanup. */
            unset($ReqsLookupCache);

            /** Update the currently active configuration file if any changes were made. */
            if ($this->CIDRAM['ConfigModified']) {
                if ($this->updateConfiguration()) {
                    $this->FE['state_msg'] = $this->L10N->getString('response_configuration_updated');
                } else {
                    $this->FE['state_msg'] = $this->L10N->getString('response_failed_to_update');
                }
            }

            $this->FE['Indexes'] .= '</ul>';

            /** Parse output. */
            $this->FE['FE_Content'] = $this->parseVars(
                $this->L10N->Data + $this->FE,
                $this->readFile($this->getAssetPath('_config.html'))
            ) . $this->CIDRAM['MenuToggle'];

            /** Send output. */
            echo $this->sendOutput();
        }

        /** Cache data. */
        elseif ($this->CIDRAM['QueryVars']['cidram-page'] === 'cache-data' && $this->FE['Permissions'] === 1) {
            /** Page initial prepwork. */
            $this->initialPrepwork($this->L10N->getString('link_cache_data'), $this->L10N->getString('tip_cache_data'));

            if ($this->FE['ASYNC']) {
                /** Delete a cache entry. */
                if (isset($_POST['do']) && $_POST['do'] === 'delete' && !empty($_POST['cdi'])) {
                    if ($_POST['cdi'] === '__') {
                        $this->Cache->clearCache();
                    } elseif (substr($_POST['cdi'], 0, 1) === '^') {
                        $this->Cache->deleteAllEntriesWhere('~' . $_POST['cdi'] . '-(.+)$~');
                    } else {
                        $this->Cache->deleteEntry($_POST['cdi']);
                    }
                }
            } else {
                /** Append async globals. */
                $this->FE['JS'] .=
                    "function cdd(d){window.cdi=d,window.do='delete',$('POST','',['cidram-for" .
                    "m-target','cdi','do'],null,function(o){if(d.substring(0,1)==='^'){d=d.su" .
                    "bstr(1)}hideid(d+'Container')})}window['cidram-form-target']='cache-data';";

                /** To be populated by the cache data. */
                $this->FE['CacheData'] = '';

                /** To be populated by the cache data. */
                $PreferredSource = ($this->Cache->Using && $this->Cache->Using !== 'FF') ? $this->Cache->Using : 'cache.dat';

                /** Array of all cache items. */
                $CacheArray = [];

                /** Get cache index data. */
                foreach ($this->Cache->getAllEntries() as $ThisCacheName => $ThisCacheItem) {
                    if (isset($ThisCacheItem['Time']) && $ThisCacheItem['Time'] > 0 && $ThisCacheItem['Time'] < $this->Now) {
                        continue;
                    }
                    $this->arrayify($ThisCacheItem);
                    $CacheArray[$ThisCacheName] = $ThisCacheItem;
                }
                unset($ThisCacheName, $ThisCacheItem);

                /** Process all cache items. */
                $this->FE['CacheData'] .= sprintf(
                    '<div class="ng1" id="__Container"><span class="s">%s – (<span style="cursor:pointer" onclick="javascript:cdd(\'__\')"><code class="s">%s</code></span>)</span><br /><br /><ul class="pieul">%s</ul></div>',
                    $PreferredSource,
                    $this->L10N->getString('field_clear_all'),
                    $this->arrayToClickableList($CacheArray, 'cdd', 0, $PreferredSource)
                );
                unset($PreferredSource, $CacheArray);

                /** Cache is empty. */
                if (!$this->FE['CacheData']) {
                    $this->FE['CacheData'] = '<div class="ng1"><span class="s">' . $this->L10N->getString('state_cache_is_empty') . '</span></div>';
                }

                /** Parse output. */
                $this->FE['FE_Content'] = $this->parseVars(
                    $this->L10N->Data + $this->FE,
                    $this->readFile($this->getAssetPath('_cache.html'))
                ) . $this->CIDRAM['MenuToggle'];

                /** Send output. */
                echo $this->sendOutput();
            }
        }

        /** Updates. */
        elseif ($this->CIDRAM['QueryVars']['cidram-page'] === 'updates' && ($this->FE['Permissions'] === 1 || ($this->FE['Permissions'] === 3 && $this->FE['CronMode'] !== ''))) {
            /** Include major version notice (if relevant). */
            if ($this->CIDRAM['MajorVersionNotice']) {
                $this->FE['state_msg'] .= $this->CIDRAM['MajorVersionNotice'] . '<hr />';
            }

            $this->FE['UpdatesFormTarget'] = 'cidram-page=updates';
            $this->FE['UpdatesFormTargetControls'] = '';
            $this->CIDRAM['StateModified'] = false;
            $this->filterSwitch(
                ['hide-non-outdated', 'hide-unused', 'sort-by-name', 'descending-order'],
                $_POST['FilterSelector'] ?? '',
                $this->CIDRAM['StateModified'],
                $this->FE['UpdatesFormTarget'],
                $this->FE['UpdatesFormTargetControls']
            );
            if ($this->CIDRAM['StateModified']) {
                header('Location: ?' . $this->FE['UpdatesFormTarget']);
                die;
            }
            unset($this->CIDRAM['StateModified']);

            /** Useful for checking dependency version constraints. */
            $this->CIDRAM['Operation'] = new \Maikuolan\Common\Operation();

            /** Updates page form boilerplate. */
            $this->FE['CFBoilerplate'] =
                '<form action="?%s" method="POST" style="display:inline">' .
                '<input name="cidram-form-target" type="hidden" value="updates" />' .
                '<input name="do" type="hidden" value="%s" />';

            /** Prepare components metadata working array. */
            $this->Components = [
                'Meta' => [],
                'Installed Versions' => ['PHP' => PHP_VERSION],
                'Available Versions' => [],
                'Install Together' => [],
                'Outdated' => [],
                'OutdatedSignatureFiles' => [],
                'Verify' => [],
                'Repairable' => [],
                'Out' => []
            ];
            $this->fetchRemotesData();

            /** Fetch components lists. */
            $this->readInstalledMetadata($this->Components['Meta']);

            /** Check current versions beforehand (needed for dependency checks). */
            $this->checkVersions($this->Components['Meta'], $this->Components['Installed Versions']);

            /** Check available versions beforehand (needed for dependency checks). */
            $this->checkVersions($this->Components['RemoteMeta'], $this->Components['Available Versions']);

            $this->FE['Indexes'] = [];

            /** Calculate shared files. */
            $this->calculateShared();

            /** A form has been submitted. */
            if (empty($this->Alternate) && $this->FE['FormTarget'] === 'updates' && !empty($_POST['do']) && !empty($_POST['ID'])) {
                /** Trigger updates handler. */
                $this->updatesHandler($_POST['do'], $_POST['ID']);

                /** Trigger signatures update log event. */
                if (!empty($this->CIDRAM['SignaturesUpdateEvent'])) {
                    $this->CIDRAM['SignaturesUpdateEvent'] = sprintf(
                        $this->L10N->getString('response_signatures_updated'),
                        $this->timeFormat(
                            $this->CIDRAM['SignaturesUpdateEvent'],
                            $this->Configuration['general']['time_format']
                        )
                    );
                    $this->Events->fireEvent('writeToSignaturesUpdateEventLog', $this->CIDRAM['SignaturesUpdateEvent']);
                }

                /** Check again, since the information might've been updated. */
                $this->checkVersions($this->Components['Meta'], $this->Components['Installed Versions']);

                /** Recalculate shared files. */
                $this->calculateShared();
            }

            /** Page initial prepwork. */
            $this->initialPrepwork($this->L10N->getString('link_updates'), $this->L10N->getString('tip_updates'));

            $this->FE['UpdatesRow'] = $this->readFile($this->getAssetPath('_updates_row.html'));

            /** Prepare installed component metadata and options for display. */
            foreach ($this->Components['Meta'] as $this->Components['Key'] => &$this->Components['ThisComponent']) {
                /** Fall back to component key if the component's name isn't defined. */
                if (empty($this->Components['ThisComponent']['Name']) && !$this->L10N->getString('Name ' . $this->Components['Key'])) {
                    $this->Components['ThisComponent']['Name'] = $this->Components['Key'];
                }

                /** Execute any necessary preload instructions. */
                if (!empty($this->Components['ThisComponent']['When Checking'])) {
                    $this->executor($this->Components['ThisComponent']['When Checking']);
                }

                /** Determine whether all dependency constraints have been met. */
                $this->checkConstraints($this->Components['ThisComponent'], false, $this->Components['Key']);

                $this->prepareName($this->Components['ThisComponent'], $this->Components['Key']);
                $this->prepareExtendedDescription($this->Components['ThisComponent'], $this->Components['Key']);
                $this->Components['ThisComponent']['ID'] = $this->Components['Key'];
                $this->Components['ThisComponent']['Options'] = '';
                $this->Components['ThisComponent']['StatusOptions'] = '';
                $this->Components['ThisComponent']['StatClass'] = '';
                if (isset($this->Components['Available Versions'][$this->Components['Key']])) {
                    $this->Components['ThisComponent']['Latest'] = $this->Components['Available Versions'][$this->Components['Key']];
                } else {
                    $this->Components['ThisComponent']['Latest'] = $this->L10N->getString('response_updates_unable_to_determine');
                    $this->Components['ThisComponent']['StatClass'] = 's';
                }

                /** Guard against component metadata missing at the upstream. */
                if (!isset($this->Components['RemoteMeta'][$this->Components['Key']])) {
                    $this->Components['RemoteMeta'][$this->Components['Key']] = [];
                }

                /** Determine whether all dependency constraints have been met. */
                $this->checkConstraints($this->Components['RemoteMeta'][$this->Components['Key']], true);
                $this->Components['ThisComponent']['Remote Dependency Status'] =
                    $this->Components['RemoteMeta'][$this->Components['Key']]['Dependency Status'];
                $this->Components['ThisComponent']['Remote All Constraints Met'] =
                    $this->Components['RemoteMeta'][$this->Components['Key']]['All Constraints Met'];
                if (isset($this->Components['RemoteMeta'][$this->Components['Key']]['Install Together'])) {
                    if (!isset($this->Components['Install Together'][$this->Components['Key']])) {
                        $this->Components['Install Together'][$this->Components['Key']] = [];
                    }
                    $this->Components['Install Together'][$this->Components['Key']] = array_merge(
                        $this->Components['Install Together'][$this->Components['Key']],
                        $this->Components['RemoteMeta'][$this->Components['Key']]['Install Together']
                    );
                }

                if (!empty($this->Components['RemoteMeta'][$this->Components['Key']]['Name'])) {
                    $this->Components['ThisComponent']['Name'] =
                        $this->Components['RemoteMeta'][$this->Components['Key']]['Name'];
                    $this->prepareName($this->Components['ThisComponent'], $this->Components['Key']);
                }
                if (
                    empty($this->Components['ThisComponent']['False Positive Risk']) &&
                    !empty($this->Components['RemoteMeta'][$this->Components['Key']]['False Positive Risk'])
                ) {
                    $this->Components['ThisComponent']['False Positive Risk'] =
                        $this->Components['RemoteMeta'][$this->Components['Key']]['False Positive Risk'];
                }
                if (!empty($this->Components['RemoteMeta'][$this->Components['Key']]['Extended Description'])) {
                    $this->Components['ThisComponent']['Extended Description'] =
                        $this->Components['RemoteMeta'][$this->Components['Key']]['Extended Description'];
                    $this->prepareExtendedDescription($this->Components['ThisComponent'], $this->Components['Key']);
                }
                if ($this->Components['ThisComponent']['StatClass'] === '') {
                    if (!empty($this->Components['ThisComponent']['Latest']) && $this->CIDRAM['Operation']->singleCompare(
                        $this->Components['ThisComponent']['Version'],
                        '<' . $this->Components['ThisComponent']['Latest']
                    )) {
                        $this->Components['ThisComponent']['Outdated'] = true;
                        $this->Components['Outdated'][] = $this->Components['Key'];
                        if ($this->Components['Has Signatures'] === true) {
                            $this->Components['OutdatedSignatureFiles'][] = $this->Components['Key'];
                        }
                        $this->Components['ThisComponent']['RowClass'] = 'r';
                        $this->Components['ThisComponent']['StatClass'] = 'txtRd';
                        $this->Components['ThisComponent']['StatusOptions'] = $this->L10N->getString('response_updates_outdated');
                        if (!empty($this->Components['ThisComponent']['Remote All Constraints Met'])) {
                            $this->Components['ThisComponent']['Options'] .=
                                '<option value="update-component">' . $this->L10N->getString('field_update') . '</option>';
                        }
                    } else {
                        $this->Components['ThisComponent']['StatClass'] = 'txtGn';
                        $this->Components['ThisComponent']['StatusOptions'] = $this->L10N->getString('response_updates_already_up_to_date');
                        if (isset(
                            $this->Components['RemoteMeta'][$this->Components['Key']]['Files'],
                            $this->Components['ThisComponent']['Files']
                        ) && (
                            serialize($this->Components['RemoteMeta'][$this->Components['Key']]['Files']) === serialize($this->Components['ThisComponent']['Files'])
                        )) {
                            $this->Components['Repairable'][] = $this->Components['Key'];
                            $this->Components['ThisComponent']['Options'] .= '<option value="repair-component">' . $this->L10N->getString('field_repair') . '</option>';
                        }
                    }
                }
                if (!empty($this->Components['ThisComponent']['Files'])) {
                    $this->CIDRAM['Activable'] = $this->isActivable($this->Components['ThisComponent']);
                    $this->Components['ThisIsInUse'] = $this->isInUse($this->Components['ThisComponent']);
                    if (preg_match(sprintf(
                        '~^(?:theme/(?:%s|%s)|CIDRAM.*|Common Classes Package)$~i',
                        preg_quote($this->Configuration['frontend']['theme']),
                        preg_quote($this->Configuration['template_data']['theme'])
                    ), $this->Components['Key']) || $this->Components['ThisIsInUse'] !== 0) {
                        if ($this->Components['ThisIsInUse'] === -1) {
                            $this->appendToString(
                                $this->Components['ThisComponent']['StatusOptions'],
                                '<hr />',
                                '<div class="txtOe">' . $this->L10N->getString('state_component_is_partially_active') . '</div>'
                            );
                        } else {
                            $this->appendToString(
                                $this->Components['ThisComponent']['StatusOptions'],
                                '<hr />',
                                '<div class="txtGn">' . $this->L10N->getString('state_component_is_active') . '</div>'
                            );
                        }
                        if ($this->CIDRAM['Activable']) {
                            $this->Components['ThisComponent']['Options'] .= '<option value="deactivate-component">' . $this->L10N->getString('field_deactivate') . '</option>';
                            if (!isset($this->Components['ThisComponent']['Uninstallable']) || $this->Components['ThisComponent']['Uninstallable'] !== false) {
                                $this->Components['ThisComponent']['Options'] .=
                                    '<option value="deactivate-and-uninstall-component">' .
                                    $this->L10N->getString('field_deactivate') . ' + ' . $this->L10N->getString('field_uninstall') .
                                    '</option>';
                            }
                        }
                    } else {
                        if ($this->CIDRAM['Activable']) {
                            $this->Components['ThisComponent']['Options'] .=
                                '<option value="activate-component">' . $this->L10N->getString('field_activate') . '</option>';
                        }
                        if (!isset($this->Components['ThisComponent']['Uninstallable']) || $this->Components['ThisComponent']['Uninstallable'] !== false) {
                            $this->Components['ThisComponent']['Options'] .=
                                '<option value="uninstall-component">' . $this->L10N->getString('field_uninstall') . '</option>';
                        }
                        if (
                            !empty($this->Components['ThisComponent']['Provisional']) ||
                            ($this->Configuration['general']['lang_override'] && preg_match('~^l10n/~', $this->Components['ThisComponent']['Name']))
                        ) {
                            $this->appendToString(
                                $this->Components['ThisComponent']['StatusOptions'],
                                '<hr />',
                                '<div class="txtOe">' . $this->L10N->getString('state_component_is_provisional') . '</div>'
                            );
                        } else {
                            $this->appendToString(
                                $this->Components['ThisComponent']['StatusOptions'],
                                '<hr />',
                                '<div class="txtRd">' . $this->L10N->getString('state_component_is_inactive') . '</div>'
                            );
                        }
                    }
                }
                $this->Components['ThisComponent']['VersionSize'] = 0;
                $this->Components['ThisComponent']['Options'] .=
                    '<option value="verify-component" selected>' . $this->L10N->getString('field_verify') . '</option>';
                $this->Components['Verify'][] = $this->Components['Key'];
                if (isset($this->Components['ThisComponent']['Files'])) {
                    foreach ($this->Components['ThisComponent']['Files'] as $ThisFile) {
                        if (isset($ThisFile['Checksum']) && strlen($ThisFile['Checksum'])) {
                            if (($Delimiter = strpos($ThisFile['Checksum'], ':')) !== false) {
                                $this->Components['ThisComponent']['VersionSize'] += (int)substr($ThisFile['Checksum'], $Delimiter + 1);
                            }
                        }
                    }
                }
                if ($this->Components['ThisComponent']['VersionSize'] > 0) {
                    $this->formatFileSize($this->Components['ThisComponent']['VersionSize']);
                    $this->Components['ThisComponent']['VersionSize'] = sprintf(
                        '<br />%s %s',
                        $this->L10N->getString('field_size'),
                        $this->Components['ThisComponent']['VersionSize']
                    );
                } else {
                    $this->Components['ThisComponent']['VersionSize'] = '';
                }
                $this->Components['ThisComponent']['LatestSize'] = 0;
                if (isset($this->Components['RemoteMeta'][$this->Components['Key']]['Files'])) {
                    foreach ($this->Components['RemoteMeta'][$this->Components['Key']]['Files'] as $ThisFile) {
                        if (isset($ThisFile['Checksum']) && strlen($ThisFile['Checksum'])) {
                            if (($Delimiter = strpos($ThisFile['Checksum'], ':')) !== false) {
                                $this->Components['ThisComponent']['LatestSize'] += (int)substr($ThisFile['Checksum'], $Delimiter + 1);
                            }
                        }
                    }
                }
                if ($this->Components['ThisComponent']['LatestSize'] > 0) {
                    $this->formatFileSize($this->Components['ThisComponent']['LatestSize']);
                    $this->Components['ThisComponent']['LatestSize'] = sprintf(
                        '<br />%s %s',
                        $this->L10N->getString('field_size'),
                        $this->Components['ThisComponent']['LatestSize']
                    );
                } else {
                    $this->Components['ThisComponent']['LatestSize'] = '';
                }
                if (!empty($this->Components['ThisComponent']['Options'])) {
                    $this->appendToString(
                        $this->Components['ThisComponent']['StatusOptions'],
                        '<hr />',
                        '<select name="do" class="auto">' . $this->Components['ThisComponent']['Options'] .
                        '</select><input type="submit" value="' . $this->L10N->getString('field_ok') . '" class="auto" />'
                    );
                    $this->Components['ThisComponent']['Options'] = '';
                }

                /** Append changelog. */
                $this->Components['ThisComponent']['Changelog'] = empty(
                    $this->Components['ThisComponent']['Changelog']
                ) ? '' : '<br /><a href="' . $this->Components['ThisComponent']['Changelog'] . '" rel="noopener external">Changelog</a>';

                /** Append filename (downstream). */
                $this->Components['ThisComponent']['Filename'] = (
                    empty($this->Components['ThisComponent']['Files']) ||
                    count($this->Components['ThisComponent']['Files']) !== 1
                ) ? '' : '<br />' . $this->L10N->getString('field_filename') . ' ' . key($this->Components['ThisComponent']['Files']);

                /** Append filename (upstream). */
                $this->Components['ThisComponent']['RemoteFilename'] = (
                    empty($this->Components['RemoteMeta'][$this->Components['Key']]['Files']) ||
                    count($this->Components['RemoteMeta'][$this->Components['Key']]['Files']) !== 1
                ) ? '' : '<br />' . $this->L10N->getString('field_filename') . ' ' . key($this->Components['RemoteMeta'][$this->Components['Key']]['Files']);

                /** Finalise entry. */
                if (
                    !($this->FE['hide-non-outdated'] && empty($this->Components['ThisComponent']['Outdated'])) &&
                    !($this->FE['hide-unused'] && empty($this->Components['ThisComponent']['Files']))
                ) {
                    if (empty($this->Components['ThisComponent']['RowClass'])) {
                        $this->Components['ThisComponent']['RowClass'] = 'h1';
                    }
                    if (!empty($this->FE['sort-by-name']) && !empty($this->Components['ThisComponent']['Name'])) {
                        $this->Components['ThisComponent']['SortKey'] = $this->Components['ThisComponent']['Name'];
                    } else {
                        $this->Components['ThisComponent']['SortKey'] = $this->Components['Key'];
                    }
                    $this->FE['Indexes'][$this->Components['ThisComponent']['SortKey']] = '';
                    if (isset($PreviousIndex)) {
                        if (substr($PreviousIndex, 0, 6) !== substr($this->Components['ThisComponent']['ID'], 0, 6)) {
                            $this->FE['Indexes'][$this->Components['ThisComponent']['SortKey']] .= '<br />';
                        }
                    }
                    $PreviousIndex = $this->Components['ThisComponent']['ID'];
                    $this->FE['Indexes'][$this->Components['ThisComponent']['SortKey']] .= sprintf(
                        "<a href=\"#%s\">%s</a><br />\n      ",
                        $this->Components['ThisComponent']['ID'],
                        $this->Components['ThisComponent']['Name']
                    );
                    $this->Components['Out'][$this->Components['ThisComponent']['SortKey']] = $this->parseVars(
                        $this->L10N->Data + $this->arrayFlatten($this->Components['ThisComponent']) + $this->arrayFlatten($this->FE),
                        $this->FE['UpdatesRow']
                    );
                }
            }

            /** Update request via Cronable. */
            if (!empty($this->Alternate) && (
                (
                    $this->FE['CronMode'] === 'Signatures' &&
                    !empty($this->Components['OutdatedSignatureFiles']) &&
                    ($BuildUse = 'OutdatedSignatureFiles')
                ) || (
                    $this->FE['CronMode'] !== '' &&
                    $this->FE['CronMode'] !== 'Signatures' &&
                    !empty($this->Components['Outdated']) &&
                    ($BuildUse = 'Outdated')
                )
            )) {
                /** Fetch dependency installation triggers. */
                $this->Components['Build'] = $this->Components[$BuildUse];
                foreach ($this->Components[$BuildUse] as $this->Components['Key']) {
                    if (isset($this->Components['Install Together'][$this->Components['Key']])) {
                        $this->Components['Build'] = array_merge(
                            $this->Components['Build'],
                            $this->Components['Install Together'][$this->Components['Key']]
                        );
                    }
                }
                $this->Components[$BuildUse] = array_unique($this->Components['Build']);

                /** Trigger updates handler. */
                $this->updatesHandler('update-component', $this->Components[$BuildUse]);

                /** Trigger signatures update log event. */
                if (!empty($this->CIDRAM['SignaturesUpdateEvent'])) {
                    $this->CIDRAM['SignaturesUpdateEvent'] = sprintf(
                        $this->L10N->getString('response_signatures_updated'),
                        $this->timeFormat(
                            $this->CIDRAM['SignaturesUpdateEvent'],
                            $this->Configuration['general']['time_format']
                        )
                    );
                    $this->Events->fireEvent('writeToSignaturesUpdateEventLog', $this->CIDRAM['SignaturesUpdateEvent']);
                }

                /** Check again, since the information might've been updated. */
                $this->checkVersions($this->Components['Meta'], $this->Components['Installed Versions']);
            }

            /** Prepare newly found component metadata and options for display. */
            foreach ($this->Components['RemoteMeta'] as $this->Components['Key'] => &$this->Components['ThisComponent']) {
                if (
                    isset($this->Components['Meta'][$this->Components['Key']]) ||
                    empty($this->Components['ThisComponent']['Version']) ||
                    empty($this->Components['ThisComponent']['Files'])
                ) {
                    continue;
                }

                /** Fall back to component key if the component's name isn't defined. */
                if (empty($this->Components['ThisComponent']['Name']) && !$this->L10N->getString('Name ' . $this->Components['Key'])) {
                    $this->Components['ThisComponent']['Name'] = $this->Components['Key'];
                }

                /** Determine whether all dependency constraints have been met. */
                $this->checkConstraints($this->Components['ThisComponent'], true);
                $this->Components['ThisComponent']['Remote Dependency Status'] = $this->Components['ThisComponent']['Dependency Status'];
                $this->Components['ThisComponent']['Dependency Status'] = '';
                $this->Components['ThisComponent']['Remote All Constraints Met'] = $this->Components['ThisComponent']['All Constraints Met'];
                if (isset($this->Components['ThisComponent']['Install Together'])) {
                    if (!isset($this->Components['Install Together'][$this->Components['Key']])) {
                        $this->Components['Install Together'][$this->Components['Key']] = [];
                    }
                    $this->Components['Install Together'][$this->Components['Key']] = array_merge(
                        $this->Components['Install Together'][$this->Components['Key']],
                        $this->Components['ThisComponent']['Install Together']
                    );
                }

                $this->prepareName($this->Components['ThisComponent'], $this->Components['Key']);
                $this->prepareExtendedDescription($this->Components['ThisComponent'], $this->Components['Key']);
                $this->Components['ThisComponent']['ID'] = $this->Components['Key'];
                $this->Components['ThisComponent']['Latest'] = $this->Components['ThisComponent']['Version'];
                $this->Components['ThisComponent']['Version'] = $this->L10N->getString('response_updates_not_installed');
                $this->Components['ThisComponent']['StatClass'] = 'txtRd';
                $this->Components['ThisComponent']['RowClass'] = 'h2';
                $this->Components['ThisComponent']['VersionSize'] = '';
                $this->Components['ThisComponent']['LatestSize'] = 0;
                if (isset($this->Components['ThisComponent']['Files'])) {
                    foreach ($this->Components['ThisComponent']['Files'] as $ThisFile) {
                        if (isset($ThisFile['Checksum']) && strlen($ThisFile['Checksum'])) {
                            if (($Delimiter = strpos($ThisFile['Checksum'], ':')) !== false) {
                                $this->Components['ThisComponent']['LatestSize'] += (int)substr($ThisFile['Checksum'], $Delimiter + 1);
                            }
                        }
                    }
                }
                if ($this->Components['ThisComponent']['LatestSize'] > 0) {
                    $this->formatFileSize($this->Components['ThisComponent']['LatestSize']);
                    $this->Components['ThisComponent']['LatestSize'] = sprintf(
                        '<br />%s %s',
                        $this->L10N->getString('field_size'),
                        $this->Components['ThisComponent']['LatestSize']
                    );
                } else {
                    $this->Components['ThisComponent']['LatestSize'] = '';
                }
                $this->Components['ThisComponent']['StatusOptions'] = $this->L10N->getString('response_updates_not_installed');
                if (!empty($this->Components['ThisComponent']['Remote All Constraints Met'])) {
                    $this->Components['ThisComponent']['StatusOptions'] .= '<br /><select name="do" class="auto">' .
                        '<option value="update-component">' . $this->L10N->getString('field_install') . '</option>';
                    if ($this->isActivable($this->Components['ThisComponent'])) {
                        $this->Components['ThisComponent']['StatusOptions'] .=
                            '<option value="update-and-activate-component">' .
                            $this->L10N->getString('field_install') . ' + ' . $this->L10N->getString('field_activate') .
                            '</option>';
                    }
                    $this->Components['ThisComponent']['StatusOptions'] .= '</select><input type="submit" value="' . $this->L10N->getString('field_ok') . '" class="auto" />';
                }

                /** Append changelog. */
                $this->Components['ThisComponent']['Changelog'] = empty(
                    $this->Components['ThisComponent']['Changelog']
                ) ? '' : '<br /><a href="' . $this->Components['ThisComponent']['Changelog'] . '" rel="noopener external">Changelog</a>';

                /** Append filename (downstream). */
                $this->Components['ThisComponent']['Filename'] = '';

                /** Append filename (upstream). */
                $this->Components['ThisComponent']['RemoteFilename'] = (
                    empty($this->Components['ThisComponent']['Files']) ||
                    count($this->Components['ThisComponent']['Files']) !== 1
                ) ? '' : '<br />' . $this->L10N->getString('field_filename') . ' ' . key($this->Components['ThisComponent']['Files']);

                /** Finalise entry. */
                if (!$this->FE['hide-unused']) {
                    if (!empty($this->FE['sort-by-name']) && !empty($this->Components['ThisComponent']['Name'])) {
                        $this->Components['ThisComponent']['SortKey'] = $this->Components['ThisComponent']['Name'];
                    } else {
                        $this->Components['ThisComponent']['SortKey'] = $this->Components['Key'];
                    }
                    $this->FE['Indexes'][$this->Components['ThisComponent']['SortKey']] = '';
                    if (isset($PreviousIndex)) {
                        if (substr($PreviousIndex, 0, 6) !== substr($this->Components['ThisComponent']['ID'], 0, 6)) {
                            $this->FE['Indexes'][$this->Components['ThisComponent']['SortKey']] .= '<br />';
                        }
                    }
                    $PreviousIndex = $this->Components['ThisComponent']['ID'];
                    $this->FE['Indexes'][$this->Components['ThisComponent']['SortKey']] .= sprintf(
                        "<a href=\"#%s\">%s</a><br />\n      ",
                        $this->Components['ThisComponent']['ID'],
                        $this->Components['ThisComponent']['Name']
                    );
                    $this->Components['Out'][$this->Components['ThisComponent']['SortKey']] = $this->parseVars(
                        $this->L10N->Data + $this->arrayFlatten($this->Components['ThisComponent']) + $this->arrayFlatten($this->FE),
                        $this->FE['UpdatesRow']
                    );
                }
            }

            /** Finalise output and unset working data. */
            $this->FE['Indexes'] = $this->sortComponents($this->FE['Indexes']);
            $this->FE['Components'] = $this->sortComponents($this->Components['Out']);

            $this->Components['CountOutdated'] = count($this->Components['Outdated']);
            $this->Components['CountOutdatedSignatureFiles'] = count($this->Components['OutdatedSignatureFiles']);
            $this->Components['CountVerify'] = count($this->Components['Verify']);
            $this->Components['CountRepairable'] = count($this->Components['Repairable']);

            /** Preparing the update all, verify all, repair all buttons. */
            $this->FE['UpdateAll'] = (
                $this->Components['CountOutdated'] ||
                $this->Components['CountOutdatedSignatureFiles'] ||
                $this->Components['CountVerify'] ||
                $this->Components['CountRepairable']
            ) ? '<hr />' : '';

            /** Instructions to update all signature files (but not necessarily everything). */
            if ($this->Components['CountOutdatedSignatureFiles']) {
                $this->FE['UpdateAll'] .= sprintf($this->FE['CFBoilerplate'], $this->FE['UpdatesFormTarget'], 'update-component');
                foreach ($this->Components['OutdatedSignatureFiles'] as $this->Components['ThisOutdated']) {
                    $this->FE['UpdateAll'] .= '<input name="ID[]" type="hidden" value="' . $this->Components['ThisOutdated'] . '" />';
                }
                $this->FE['UpdateAll'] .= '<input type="submit" value="' . $this->L10N->getString('field_update_signatures_files') . '" class="auto" /></form>';
            }

            /** Instructions to update everything at once. */
            if ($this->Components['CountOutdated'] && $this->Components['CountOutdated'] !== $this->Components['CountOutdatedSignatureFiles']) {
                $this->FE['UpdateAll'] .= sprintf($this->FE['CFBoilerplate'], $this->FE['UpdatesFormTarget'], 'update-component');
                foreach ($this->Components['Outdated'] as $this->Components['ThisOutdated']) {
                    $this->FE['UpdateAll'] .= '<input name="ID[]" type="hidden" value="' . $this->Components['ThisOutdated'] . '" />';
                }
                $this->FE['UpdateAll'] .= '<input type="submit" value="' . $this->L10N->getString('field_update_all') . '" class="auto" /></form>';
            }

            /** Instructions to repair everything at once. */
            if ($this->Components['CountRepairable']) {
                $this->FE['UpdateAll'] .= sprintf($this->FE['CFBoilerplate'], $this->FE['UpdatesFormTarget'], 'repair-component');
                foreach ($this->Components['Repairable'] as $this->Components['ThisRepairable']) {
                    $this->FE['UpdateAll'] .= '<input name="ID[]" type="hidden" value="' . $this->Components['ThisRepairable'] . '" />';
                }
                $this->FE['UpdateAll'] .= '<input type="submit" value="' . $this->L10N->getString('field_repair_all') . '" class="auto" /></form>';
            }

            /** Instructions to verify everything at once. */
            if ($this->Components['CountVerify']) {
                $this->FE['UpdateAll'] .= sprintf($this->FE['CFBoilerplate'], $this->FE['UpdatesFormTarget'], 'verify-component');
                foreach ($this->Components['Verify'] as $this->Components['ThisVerify']) {
                    $this->FE['UpdateAll'] .= '<input name="ID[]" type="hidden" value="' . $this->Components['ThisVerify'] . '" />';
                }
                $this->FE['UpdateAll'] .= '<input type="submit" value="' . $this->L10N->getString('field_verify_all') . '" class="auto" /></form>';
            }

            /** Parse output. */
            $this->FE['FE_Content'] = $this->parseVars(
                $this->L10N->Data + $this->FE,
                $this->readFile($this->getAssetPath('_updates.html'))
            ) . $this->CIDRAM['MenuToggle'];

            /** Process dependency installation triggers. */
            foreach ($this->Components['Install Together'] as $this->Components['Key'] => $this->Components['ID']) {
                $this->Components['Build'] = '';
                $this->Components['ID'] = array_unique($this->Components['ID']);
                foreach ($this->Components['ID'] as $this->Components['ThisID']) {
                    $this->Components['Build'] .= '<input name="InstallTogether[]" type="hidden" value="' . $this->Components['ThisID'] . '" />';
                }
                $this->FE['FE_Content'] = str_replace(
                    '<input name="ID[]" type="hidden" value="' .$this->Components['Key'] . '" />',
                    $this->Components['Build'] . '<input name="ID[]" type="hidden" value="' .$this->Components['Key'] . '" />',
                    $this->FE['FE_Content']
                );
            }

            /** Send output. */
            if ($this->FE['CronMode'] === '') {
                /** Normal page output. */
                echo $this->sendOutput();
            } elseif ($this->FE['CronType'] === 'localUpdate') {
                /** Returned state message for Cronable (updating locally). */
                $Results = ['state_msg' => str_ireplace(
                    ['<code>', '</code>', '<br />', '<hr />'],
                    ['[', ']', "\n", "\n---\n"],
                    $this->FE['state_msg']
                )];
            } elseif (!empty($this->FE['state_msg'])) {
                /** Returned state message for Cronable. */
                echo json_encode(['state_msg' => str_ireplace(
                    ['<code>', '</code>', '<br />', '<hr />'],
                    ['[', ']', "\n", "\n---\n"],
                    $this->FE['state_msg']
                )]);
            } elseif (!empty($_POST['do']) && $_POST['do'] === 'get-list' && (
                $this->Components['CountOutdated'] > 0 ||
                $this->Components['CountOutdatedSignatureFiles'] > 0
            )) {
                /** Returned list of outdated components for Cronable. */
                echo json_encode([
                    'state_msg' => str_ireplace(
                        ['<code>', '</code>', '<br />', '<hr />'],
                        ['[', ']', "\n", "\n---\n"],
                        $this->FE['state_msg']
                    ),
                    'outdated' => $this->Components['CountOutdated'] > 0 ? $this->Components['Outdated'] : [],
                    'outdated_signature_files' => $this->Components['CountOutdatedSignatureFiles'] > 0 ? $this->Components['OutdatedSignatureFiles'] : []
                ]);
            }

            /** Cleanup. */
            unset($this->FE['CFBoilerplate'], $this->CIDRAM['Operation']);
        }

        /** Signature file fixer. */
        elseif ($this->CIDRAM['QueryVars']['cidram-page'] === 'fixer' && $this->FE['Permissions'] === 1) {
            /** Page initial prepwork. */
            $this->initialPrepwork($this->L10N->getString('link_fixer'), $this->L10N->getString('tip_fixer'));

            /** Preferred source. */
            $PreferredSource = $_POST['preferredSource'] ?? '';

            /** Direct input. */
            $this->FE['DirectInput'] = $_POST['DirectInput'] ?? '';

            /** Preferred source menu. */
            $this->FE['PreferredSource'] = sprintf(
                '%1$sList" value="List"%2$s %7$s%6$spreferredSourceList">%3$s</label><br />%1$sInput" value="Input"%4$s %7$s%6$spreferredSourceInput">%5$s</label>',
                '<input type="radio" class="auto" name="preferredSource" id="preferredSource',
                $PreferredSource === 'List' ? ' checked' : '',
                $this->L10N->getString('field_preferred_list'),
                $PreferredSource === 'Input' ? ' checked' : '',
                $this->L10N->getString('field_preferred_direct_input'),
                ' /><label class="s" for="',
                'onchange="javascript:{hideid(\'preferredSourceListDiv\');hideid(\'preferredSourceInputDiv\');showid(this.id+\'Div\');showid(\'submitButton\');}"'
            );

            /** Whether to show or hide preferred source sections. */
            $this->FE['styleList'] = $PreferredSource === 'List' ? '' : ' style="display:none"';
            $this->FE['styleInput'] = $PreferredSource === 'Input' ? '' : ' style="display:none"';
            $this->FE['submitButtonVisibility'] = empty($PreferredSource) ? ' style="display:none"' : '';

            /** Generate a list of currently active signature files. */
            $this->FE['ActiveSignatureFiles'] = '<div style="display:grid;margin:38px;grid-template-columns:auto">';
            $GIClass = 'gridHB';
            foreach (explode("\n", $this->Configuration['components']['ipv4'] . "\n" . $this->Configuration['components']['ipv6']) as $SigSource) {
                $GIClass = $GIClass !== 'gridHA' ? 'gridHA' : 'gridHB';
                $SigSourceID = preg_replace('~[^\da-z]~i', '_', $SigSource);
                $this->FE['ActiveSignatureFiles'] .= sprintf(
                    '<div class="gridboxitem %4$s"><span class="s gridlabel"><input type="radio" class="auto" name="sigFile" id="%1$s" value="%2$s" %3$s/><label for="%1$s">%2$s</label></span></div>',
                    $SigSourceID,
                    $SigSource,
                    (!empty($_POST['sigFile']) && $_POST['sigFile'] === $SigSource) ? 'checked ' : '',
                    $GIClass
                );
            }
            $this->FE['ActiveSignatureFiles'] .= '</div>';
            unset($SigSourceID, $SigSource, $GIClass);

            /** Fixer output. */
            $this->FE['FixerOutput'] = '';

            /** Prepare to process a currently active signature file. */
            if ($PreferredSource === 'List' && !empty($_POST['sigFile'])) {
                if (!isset($this->CIDRAM['FileCache'])) {
                    $this->CIDRAM['FileCache'] = [];
                }
                if (!isset($this->CIDRAM['FileCache'][$_POST['sigFile']])) {
                    $this->CIDRAM['FileCache'][$_POST['sigFile']] = $this->readFile($this->SignaturesPath . $_POST['sigFile']);
                }
                if (!empty($this->CIDRAM['FileCache'][$_POST['sigFile']])) {
                    $this->FE['FixerOutput'] = $this->CIDRAM['FileCache'][$_POST['sigFile']];
                }
            }

            /** Prepare to process via direct input. */
            if ($PreferredSource === 'Input' && !empty($_POST['DirectInput'])) {
                $this->FE['FixerOutput'] = $_POST['DirectInput'];
            }

            /** Process (validate; attempt to fix) data. */
            if ($this->FE['FixerOutput']) {
                $Fixer = [
                    'Time' => microtime(true),
                    'Changes' => 0,
                    'Aggregator' => new \CIDRAM\CIDRAM\Aggregator(),
                    'Before' => hash('sha256', $this->FE['FixerOutput']) . ':' . strlen($this->FE['FixerOutput'])
                ];
                $Fixer['Aggregator']->Results = true;
                if (strpos($this->FE['FixerOutput'], "\r") !== false) {
                    $this->FE['FixerOutput'] = str_replace("\r", '', $this->FE['FixerOutput']);
                    $Fixer['Changes']++;
                }
                $Fixer['StrObject'] = new \Maikuolan\Common\ComplexStringHandler(
                    "\n" . $this->FE['FixerOutput'] . "\n",
                    $this->CIDRAM['RegExTags'],
                    function ($Data) use (&$Fixer): string {
                        if (!$Data = trim($Data)) {
                            return '';
                        }
                        $Output = '';
                        $EoLPos = $NEoLPos = 0;
                        while ($NEoLPos !== false) {
                            $Set = $Previous = '';
                            while (true) {
                                if (($NEoLPos = strpos($Data, "\n", $EoLPos)) === false) {
                                    $Line = trim(substr($Data, $EoLPos));
                                } else {
                                    $Line = trim(substr($Data, $EoLPos, $NEoLPos - $EoLPos));
                                    $NEoLPos++;
                                }
                                $Param = (($Pos = strpos($Line, ' ')) !== false) ? substr($Line, $Pos + 1) : 'Deny Generic';
                                if (!$Previous) {
                                    $Previous = $Param;
                                }
                                if ($Param !== $Previous) {
                                    $NEoLPos = 0;
                                    break;
                                }
                                if ($Line) {
                                    $Set .= $Line . "\n";
                                }
                                if ($NEoLPos === false) {
                                    break;
                                }
                                $EoLPos = $NEoLPos;
                            }
                            if ($Set = $Fixer['Aggregator']->aggregate(trim($Set))) {
                                $Set = preg_replace('~$~m', ' ' . $Previous, $Set);
                                $Output .= $Set . "\n";
                            }
                            $Fixer['Changes'] += $Fixer['Aggregator']->NumberRejected;
                            $Fixer['Changes'] += $Fixer['Aggregator']->NumberMerged;
                        }
                        return trim($Output);
                    }
                );
                $Fixer['StrObject']->iterateClosure(function ($Data) {
                    if (($Pos = strpos($Data, "---\n")) !== false && substr($Data, $Pos - 1, 1) === "\n") {
                        $YAML = substr($Data, $Pos + 4);
                        if (($HPos = strpos($YAML, "\n#")) !== false) {
                            $After = substr($YAML, $HPos);
                            $YAML = substr($YAML, 0, $HPos + 1);
                        } else {
                            $After = '';
                        }
                        $BeforeCount = substr_count($YAML, "\n");
                        $Arr = [];
                        $this->YAML->process($YAML, $Arr);
                        $NewData = substr($Data, 0, $Pos + 4) . $this->YAML->reconstruct($Arr);
                        if (($Add = $BeforeCount - substr_count($NewData, "\n") + 1) > 0) {
                            $NewData .= str_repeat("\n", $Add);
                        }
                        $NewData .= $After;
                        if ($Data !== $NewData) {
                            $Fixer['Changes']++;
                            $Data = $NewData;
                        }
                    }
                    return "\n" . $Data;
                }, true);
                $this->FE['FixerOutput'] = trim($Fixer['StrObject']->recompile()) . "\n";
                $Fixer['After'] = hash('sha256', $this->FE['FixerOutput']) . ':' . strlen($this->FE['FixerOutput']);
                if ($Fixer['Before'] !== $Fixer['After'] && !$Fixer['Changes']) {
                    $Fixer['Changes']++;
                }
                $Fixer['Time'] = microtime(true) - $Fixer['Time'];
                $Fixer = '<div class="s">' . sprintf($this->L10N->getString('state_fixer'), sprintf(
                    $this->L10N->getPlural($Fixer['Changes'], 'state_fixer_changed'),
                    '<span class="txtRd">' . $this->NumberFormatter->format($Fixer['Changes']) . '</span>'
                ), sprintf(
                    $this->L10N->getPlural($Fixer['Time'], 'state_fixer_seconds'),
                    '<span class="txtRd">' . $this->NumberFormatter->format($Fixer['Time'], 3) . '</span>'
                )) . '<br /><blockquote><code>' . $Fixer['Before'] . '</code><br />↪️<code>' . $Fixer['After'] . '</code></blockquote></div>';
                $this->FE['FixerOutput'] = '<hr />' . $Fixer . '<br /><textarea name="FixerOutput" id="fixerOutput">' . str_replace(
                    ['&', '<', '>'],
                    ['&amp;', '&lt;', '&gt;'],
                    $this->FE['FixerOutput']
                ) . '</textarea><br /><br />';

                /** Copy SVG. */
                $this->FE['FixerOutput'] .= '<span class="s">' . sprintf(
                    '<span id="fxOS" onclick="javascript:if(navigator.clipboard){navigator.cl' .
                    'ipboard.writeText(getElementById(\'fixerOutput\').value);getElementById(' .
                    '\'fxOS_copied\').className=\'sFade\'}else{getElementById(\'fxOS_failed\'' .
                    ').style.className=\'sFade\'}"><script type="text/javascript">copySvg(\'f' .
                    'xOS\');</script></span><span id="fxOS_copied"%1$s">✔️ %2$s</span><span id' .
                    '="fxOS_failed"%1$s">❌ %3$s</span>',
                    ' class="sHide" onanimationend="javascript:this.className=\'sHide\'',
                    $this->L10N->getString('response_copied'),
                    $this->L10N->getString('response_failed')
                ) . '</span>';

                /** Cleanup. */
                unset($Fixer);
            }

            /** Parse output. */
            $this->FE['FE_Content'] = $this->parseVars(
                $this->L10N->Data + $this->FE,
                $this->readFile($this->getAssetPath('_fixer.html'))
            );

            /** Send output. */
            echo $this->sendOutput();
        }

        /** File Manager. */
        elseif ($this->CIDRAM['QueryVars']['cidram-page'] === 'file-manager' && $this->FE['Permissions'] === 1) {
            /** Page initial prepwork. */
            $this->initialPrepwork($this->L10N->getString('link_file_manager'), $this->L10N->getString('tip_file_manager'), false);

            /** Load doughnut template file upon request. */
            if (empty($this->CIDRAM['QueryVars']['show'])) {
                $this->FE['ChartJSPath'] = '';
                $DoughnutFile = '';
            } else {
                if (file_exists($this->Vault . 'assets/frontend/_chartjs.html')) {
                    $DoughnutFile = $this->readFile($this->Vault . 'assets/frontend/_chartjs.html');
                } else {
                    $DoughnutFile = '<tr><td class="h4f" colspan="2"><div class="s">{DoughnutHTML}</div></td></tr>';
                }
                if (file_exists($this->Vault . 'assets/frontend/chart.min.js')) {
                    $this->FE['ChartJSPath'] = '?cidram-asset=chart.min.js';
                } else {
                    $this->FE['ChartJSPath'] = '';
                }
            }

            /** Set vault path for doughnut display. */
            $this->FE['VaultPath'] = str_replace("\\", '/', $this->Vault) . '*';

            /** Prepare components metadata working array. */
            $this->Components = ['Files' => [], 'Components' => [], 'ComponentFiles' => [], 'Names' => []];

            /** Show/hide doughnuts link and etc. */
            if (!$DoughnutFile) {
                $this->FE['FMgrFormTarget'] = 'cidram-page=file-manager';
                $this->FE['ShowHideLink'] = '<a href="?cidram-page=file-manager&show=true">' . $this->L10N->getString('label_show') . '</a>';
            } else {
                $this->FE['FMgrFormTarget'] = 'cidram-page=file-manager&show=true';
                $this->FE['ShowHideLink'] = '<a href="?cidram-page=file-manager">' . $this->L10N->getString('label_hide') . '</a>';

                /** Fetch components lists. */
                $this->readInstalledMetadata($this->Components['Components']);

                /** Identifying file component correlations. */
                foreach ($this->Components['Components'] as $ComponentName => &$ComponentData) {
                    if (isset($ComponentData['Files']) && is_array($ComponentData['Files'])) {
                        foreach ($ComponentData['Files'] as $ThisFile => $FileData) {
                            $ThisFile = str_replace("\\", '/', $ThisFile);
                            $this->Components['Files'][$ThisFile] = $ComponentName;
                        }
                    }
                    $this->prepareName($ComponentData, $ComponentName);
                    if (isset($ComponentData['Name']) && strlen($ComponentData['Name'])) {
                        $this->Components['Names'][$ComponentName] = $ComponentData['Name'];
                    }
                    $ComponentData = 0;
                }
            }

            /** Upload a new file. */
            if (isset($_POST['do']) && $_POST['do'] === 'upload-file' && isset($_FILES['upload-file']['name'])) {
                /** Check whether safe. */
                $this->CIDRAM['SafeToContinue'] = (
                    basename($_FILES['upload-file']['name']) === $_FILES['upload-file']['name'] &&
                    $this->pathSecurityCheck($_FILES['upload-file']['name']) &&
                    isset($_FILES['upload-file']['tmp_name'], $_FILES['upload-file']['error']) &&
                    $_FILES['upload-file']['error'] === UPLOAD_ERR_OK &&
                    is_uploaded_file($_FILES['upload-file']['tmp_name']) &&
                    !is_link($this->Vault . $_FILES['upload-file']['name'])
                );

                /** If the filename already exists, delete the old file before moving the new file. */
                if ($this->CIDRAM['SafeToContinue'] && is_readable($this->Vault . $_FILES['upload-file']['name'])) {
                    if (is_dir($this->Vault . $_FILES['upload-file']['name'])) {
                        if ($this->isDirEmpty($this->Vault . $_FILES['upload-file']['name'])) {
                            rmdir($this->Vault . $_FILES['upload-file']['name']);
                        } else {
                            $this->CIDRAM['SafeToContinue'] = false;
                        }
                    } else {
                        unlink($this->Vault . $_FILES['upload-file']['name']);
                    }
                }

                /** Move the newly uploaded file to the designated location. */
                if ($this->CIDRAM['SafeToContinue']) {
                    if (rename($_FILES['upload-file']['tmp_name'], $this->Vault . $_FILES['upload-file']['name'])) {
                        $this->FE['state_msg'] = $this->L10N->getString('response_file_uploaded');
                        header('HTTP/1.0 201 Created');
                        header('HTTP/1.1 201 Created');
                        header('Status: 201 Created');
                    } else {
                        $this->FE['state_msg'] = $this->L10N->getString('response_upload_error');
                    }
                } else {
                    $this->FE['state_msg'] = $this->L10N->getString('response_upload_error');
                }
            }

            /** A form was submitted. */
            elseif (
                isset($_POST['filename'], $_POST['do']) &&
                is_readable($this->Vault . $_POST['filename']) &&
                $this->pathSecurityCheck($_POST['filename'])
            ) {
                /** Delete a file. */
                if ($_POST['do'] === 'delete-file') {
                    if (is_dir($this->Vault . $_POST['filename'])) {
                        if ($this->isDirEmpty($this->Vault . $_POST['filename'])) {
                            rmdir($this->Vault . $_POST['filename']);
                            $this->FE['state_msg'] = $this->L10N->getString('response_directory_deleted');
                        } else {
                            $this->FE['state_msg'] = $this->L10N->getString('response_delete_error');
                        }
                    } else {
                        unlink($this->Vault . $_POST['filename']);

                        /** Remove empty directories. */
                        $this->deleteDirectory($_POST['filename']);

                        $this->FE['state_msg'] = $this->L10N->getString('response_file_deleted');
                    }
                }

                /** Rename a file. */
                if ($_POST['do'] === 'rename-file' && isset($_POST['filename'])) {
                    if (isset($_POST['filename_new'])) {
                        /** Check whether safe. */
                        $this->CIDRAM['SafeToContinue'] = (
                            $this->pathSecurityCheck($_POST['filename']) &&
                            $this->pathSecurityCheck($_POST['filename_new']) &&
                            $_POST['filename'] !== $_POST['filename_new']
                        );

                        /** If the destination already exists, delete it before renaming the new file. */
                        if (
                            $this->CIDRAM['SafeToContinue'] &&
                            file_exists($this->Vault . $_POST['filename_new']) &&
                            is_readable($this->Vault . $_POST['filename_new'])
                        ) {
                            if (is_dir($this->Vault . $_POST['filename_new'])) {
                                if ($this->isDirEmpty($this->Vault . $_POST['filename_new'])) {
                                    rmdir($this->Vault . $_POST['filename_new']);
                                } else {
                                    $this->CIDRAM['SafeToContinue'] = false;
                                }
                            } else {
                                unlink($this->Vault . $_POST['filename_new']);
                            }
                        }

                        /** Rename the file. */
                        if ($this->CIDRAM['SafeToContinue']) {
                            /** Add parent directories. */
                            $this->buildPath($this->Vault . $_POST['filename_new']);

                            if (rename($this->Vault . $_POST['filename'], $this->Vault . $_POST['filename_new'])) {
                                /** Remove empty directories. */
                                $this->deleteDirectory($_POST['filename']);

                                /** Update state message. */
                                $this->FE['state_msg'] = $this->L10N->getString(
                                    is_dir($this->Vault . $_POST['filename_new']) ? 'response_directory_renamed' : 'response_file_renamed'
                                );
                            }
                        } elseif (!$this->FE['state_msg']) {
                            $this->FE['state_msg'] = $this->L10N->getString('response_rename_error');
                        }
                    } else {
                        $this->FE['FE_Title'] .= ' – ' . $this->L10N->getString('field_rename_file') . ' – ' . $_POST['filename'];
                        $this->FE['filename'] = $_POST['filename'];

                        /** Parse output. */
                        $this->FE['FE_Content'] = $this->parseVars(
                            $this->L10N->Data + $this->FE,
                            $this->readFile($this->getAssetPath('_files_rename.html'))
                        );

                        /** Send output. */
                        echo $this->sendOutput();
                        die;
                    }
                }

                /** Edit a file. */
                if ($_POST['do'] === 'edit-file') {
                    if (isset($_POST['content'])) {
                        $_POST['content'] = str_replace("\r", '', $_POST['content']);
                        $this->CIDRAM['OldData'] = $this->readFile($this->Vault . $_POST['filename']);
                        if (strpos($this->CIDRAM['OldData'], "\r\n") !== false && strpos($this->CIDRAM['OldData'], "\n\n") === false) {
                            $_POST['content'] = str_replace("\n", "\r\n", $_POST['content']);
                        }

                        $Handle = fopen($this->Vault . $_POST['filename'], 'wb');
                        fwrite($Handle, $_POST['content']);
                        fclose($Handle);

                        $this->FE['state_msg'] = $this->L10N->getString('response_file_edited');
                    } else {
                        $this->FE['FE_Title'] .= ' – ' . $_POST['filename'];
                        $this->FE['filename'] = $_POST['filename'];
                        $this->FE['content'] = htmlentities($this->readFile($this->Vault . $_POST['filename']));

                        /** Parse output. */
                        $this->FE['FE_Content'] = $this->parseVars(
                            $this->L10N->Data + $this->FE,
                            $this->readFile($this->getAssetPath('_files_edit.html'))
                        );

                        /** Send output. */
                        echo $this->sendOutput();
                        die;
                    }
                }

                /** Download a file. */
                if ($_POST['do'] === 'download-file') {
                    header('Content-Type: application/octet-stream');
                    header('Content-Transfer-Encoding: Binary');
                    header('Content-disposition: attachment; filename="' . basename($_POST['filename']) . '"');
                    echo $this->readFile($this->Vault . $_POST['filename']);
                    die;
                }
            }

            /** Template for file rows. */
            $this->FE['FilesRow'] = $this->readFile($this->getAssetPath('_files_row.html'));

            /** Parse output. */
            $this->FE['FE_Content'] = $this->parseVars(
                $this->L10N->Data + $this->FE,
                $this->readFile($this->getAssetPath('_files.html'))
            );

            /** Initialise files data variable. */
            $this->FE['FilesData'] = '';

            /** Total size. */
            $this->FE['TotalSize'] = 0;

            /** Fetch files data. */
            $this->CIDRAM['FilesArray'] = $this->fileManagerRecursiveList($this->Vault);

            if (!$DoughnutFile) {
                $this->FE['Doughnut'] = '';
            } else {
                /** Sort doughnut values. */
                arsort($this->Components['Components']);

                /** Initialise doughnut values. */
                $this->FE['DoughnutValues'] = [];

                /** Initialise doughnut labels. */
                $this->FE['DoughnutLabels'] = [];

                /** Initialise doughnut colours. */
                $this->FE['DoughnutColours'] = [];

                /** Initialise doughnut legend. */
                $this->FE['DoughnutHTML'] = $this->L10N->getString('tip_click_the_component') . '<br /><ul class="pieul">';

                /** Building doughnut values. */
                foreach ($this->Components['Components'] as $ComponentName => $ComponentData) {
                    $ComponentSize = $ComponentData;
                    $this->formatFileSize($ComponentSize);
                    $Listed = '';
                    if (!empty($this->Components['ComponentFiles'][$ComponentName])) {
                        $ThisComponentFiles = &$this->Components['ComponentFiles'][$ComponentName];
                        arsort($ThisComponentFiles);
                        $Listed .= '<ul class="comSub">';
                        foreach ($ThisComponentFiles as $ThisFile => $ThisFileSize) {
                            $this->formatFileSize($ThisFileSize);
                            $Listed .= sprintf(
                                '<li><span class="txtBl" style="font-size:0.9em">%s – %s</span></li>',
                                $ThisFile,
                                $ThisFileSize
                            );
                        }
                        $Listed .= '</ul>';
                    }
                    $ComponentName .= ' – ' . $ComponentSize;
                    $this->FE['DoughnutValues'][] = $ComponentData;
                    $this->FE['DoughnutLabels'][] = $ComponentName;
                    if (strlen($this->FE['ChartJSPath'])) {
                        $ThisColour = $this->rgb($ComponentName);
                        $RGB = implode(',', $ThisColour['Values']);
                        $this->FE['DoughnutColours'][] = '#' . $ThisColour['Hash'];
                        $this->FE['DoughnutHTML'] .= sprintf(
                            '<li style="background:linear-gradient(90deg,rgba(%1$s,%5$s),rgba(%1$s,%6$s));color:#%2$s"><span class="comCat"><span class="txtBl">%3$s</span></span>%4$s</li>',
                            $RGB,
                            $ThisColour['Hash'],
                            $ComponentName,
                            $Listed,
                            $this->FE['FE_Align'] === 'left' ? '.3' : '0',
                            $this->FE['FE_Align'] === 'left' ? '0' : '.3'
                        ) . "\n";
                    } else {
                        $this->FE['DoughnutHTML'] .= sprintf('<li><span class="comCat">%1$s</span>%2$s</li>', $ComponentName, $Listed) . "\n";
                    }
                }

                /** Close doughnut legend and append necessary JavaScript for doughnut menu toggle. */
                $this->FE['DoughnutHTML'] .= '</ul>' . $this->CIDRAM['MenuToggle'];

                /** Finalise doughnut values. */
                $this->FE['DoughnutValues'] = '[' . implode(', ', $this->FE['DoughnutValues']) . ']';

                /** Finalise doughnut labels. */
                $this->FE['DoughnutLabels'] = '["' . implode('", "', $this->FE['DoughnutLabels']) . '"]';

                /** Finalise doughnut colours. */
                $this->FE['DoughnutColours'] = '["' . implode('", "', $this->FE['DoughnutColours']) . '"]';

                /** Finalise doughnut. */
                $this->FE['Doughnut'] = $this->parseVars($this->L10N->Data + $this->FE, $DoughnutFile);
            }

            /** Process files data. */
            array_walk($this->CIDRAM['FilesArray'], function ($ThisFile): void {
                $Base = '<option value="%s"%s>%s</option>';
                $ThisFile['ThisOptions'] = '';
                if (!$ThisFile['Directory'] || $this->isDirEmpty($this->Vault . $ThisFile['Filename'])) {
                    $ThisFile['ThisOptions'] .= sprintf($Base, 'delete-file', '', $this->L10N->getString('field_delete'));
                    $ThisFile['ThisOptions'] .= sprintf($Base, 'rename-file', $ThisFile['Directory'] && !$ThisFile['CanEdit'] ? ' selected' : '', $this->L10N->getString('field_rename_file'));
                }
                if ($ThisFile['CanEdit']) {
                    $ThisFile['ThisOptions'] .= sprintf($Base, 'edit-file', ' selected', $this->L10N->getString('field_edit_file'));
                }
                if (!$ThisFile['Directory']) {
                    $ThisFile['ThisOptions'] .= sprintf($Base, 'download-file', $ThisFile['CanEdit'] ? '' : ' selected', $this->L10N->getString('field_download_file'));
                }
                if ($ThisFile['ThisOptions']) {
                    $ThisFile['ThisOptions'] =
                        '<select name="do">' . $ThisFile['ThisOptions'] . '</select>' .
                        '<input type="submit" value="' . $this->L10N->getString('field_ok') . '" class="auto" />';
                }
                $this->FE['FilesData'] .= $this->parseVars(
                    $this->L10N->Data + $this->FE + $ThisFile,
                    $this->FE['FilesRow']
                );
            });

            /** Total size. */
            $this->formatFileSize($this->FE['TotalSize']);

            /** Disk free space. */
            $this->FE['FreeSpace'] = disk_free_space(__DIR__);

            /** Disk total space. */
            $this->FE['TotalSpace'] = disk_total_space(__DIR__);

            /** Disk total usage. */
            $this->FE['TotalUsage'] = $this->FE['TotalSpace'] - $this->FE['FreeSpace'];

            $this->formatFileSize($this->FE['FreeSpace']);
            $this->formatFileSize($this->FE['TotalSpace']);
            $this->formatFileSize($this->FE['TotalUsage']);

            /** Send output. */
            echo $this->sendOutput();
        }

        /** Sections List. */
        elseif ($this->CIDRAM['QueryVars']['cidram-page'] === 'sections' && $this->FE['Permissions'] === 1) {
            if (!$this->FE['ASYNC']) {
                /** Page initial prepwork. */
                $this->initialPrepwork($this->L10N->getString('link_sections_list'), $this->L10N->getString('tip_sections_list'));

                /** Append async globals. */
                $this->FE['JS'] .=
                    "function slx(a,b,c,d){window['SectionName']=a,window['Action']=b,$('POST','',['SectionName','Action'],null," .
                    "function(e){hide(c),show(d,'block')},null)}";

                /** Add flags CSS. */
                if ($this->FE['Flags'] = file_exists($this->Vault . 'assets/frontend/flags.css')) {
                    $this->FE['OtherHead'] .= "\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"?cidram-page=flags\" />";
                }

                /** Process signature files. */
                $this->FE['Data'] = (
                    strlen($this->Configuration['components']['ipv4']) === 0 &&
                    strlen($this->Configuration['components']['ipv6']) === 0
                ) ? '    <div class="txtRd">' . $this->L10N->getString('warning_no_active_signature_files') . "</div>\n" : $this->sectionsHandler(
                    array_unique(explode("\n", $this->Configuration['components']['ipv4'] . "\n" . $this->Configuration['components']['ipv6']))
                );

                /** Calculate and append page load time, and append totals. */
                $this->FE['ProcessTime'] = microtime(true) - $_SERVER['REQUEST_TIME_FLOAT'];
                $this->FE['Data'] = '<div class="s">' . sprintf(
                    $this->L10N->getPlural($this->FE['ProcessTime'], 'state_loadtime'),
                    '<span class="txtRd">' . $this->NumberFormatter->format($this->FE['ProcessTime'], 3) . '</span>'
                ) . '<br />' . sprintf(
                    $this->L10N->getString('state_sl_totals'),
                    '<span class="txtRd">' . $this->NumberFormatter->format($this->FE['SL_Signatures'] ?? 0) . '</span>',
                    '<span class="txtRd">' . $this->NumberFormatter->format($this->FE['SL_Sections'] ?? 0) . '</span>',
                    '<span class="txtRd">' . $this->NumberFormatter->format($this->FE['SL_Files'] ?? 0) . '</span>',
                    '<span class="txtRd">' . $this->NumberFormatter->format($this->FE['SL_Unique'] ?? 0) . '</span>'
                ) . '</div><hr />' . $this->FE['Data'];

                /** Parse output. */
                $this->FE['FE_Content'] = $this->parseVars(
                    $this->L10N->Data + $this->FE,
                    $this->readFile($this->getAssetPath('_sections.html'))
                );

                /** Send output. */
                echo $this->sendOutput();
            } elseif (isset($_POST['SectionName'], $_POST['Action'])) {
                /** Fetch current ignores data. */
                $IgnoreData = $this->readFile($this->Vault . 'ignore.dat') ?: '';

                if ($_POST['Action'] === 'unignore' && preg_match("~\nIgnore " . $_POST['SectionName'] . "\n~", $IgnoreData)) {
                    $IgnoreData = preg_replace("~\nIgnore " . $_POST['SectionName'] . "\n~", "\n", $IgnoreData);
                    $Handle = fopen($this->Vault . 'ignore.dat', 'wb');
                    fwrite($Handle, $IgnoreData);
                    fclose($Handle);
                } elseif ($_POST['Action'] === 'ignore' && !preg_match("~\nIgnore " . $_POST['SectionName'] . "\n~", $IgnoreData)) {
                    if (strpos($IgnoreData, "\n# End front-end generated ignore rules.") === false) {
                        $IgnoreData .= "\n# Begin front-end generated ignore rules.\n# End front-end generated ignore rules.\n";
                    }
                    $IgnoreData = substr($IgnoreData, 0, strrpos(
                        $IgnoreData,
                        "# End front-end generated ignore rules.\n"
                    )) . 'Ignore ' . $_POST['SectionName'] . "\n" . substr($IgnoreData, strrpos(
                        $IgnoreData,
                        "# End front-end generated ignore rules.\n"
                    ));
                    $Handle = fopen($this->Vault . 'ignore.dat', 'wb');
                    fwrite($Handle, $IgnoreData);
                    fclose($Handle);
                }

                /** Cleanup. */
                unset($Handle, $IgnoreData);
            }
        }

        /** Range Tables. */
        elseif ($this->CIDRAM['QueryVars']['cidram-page'] === 'range' && $this->FE['Permissions'] === 1) {
            /** Page initial prepwork. */
            $this->initialPrepwork($this->L10N->getString('link_range'), $this->L10N->getString('tip_range'));

            /** Append number localisation JS. */
            $this->FE['JS'] .= $this->numberL10nJs() . "\n";

            /** Add flags CSS. */
            if ($this->FE['Flags'] = file_exists($this->Vault . 'assets/frontend/flags.css')) {
                $this->FE['OtherHead'] .= "\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"?cidram-page=flags\" />";
            }

            /** Template for range rows. */
            $this->FE['RangeRow'] = $this->readFile($this->getAssetPath('_range_row.html'));

            /** Where to populate signature file data for the matrix. */
            $this->FE['Matrix-Data'] = '';

            /** Process signature files and fetch returned JavaScript stuff. */
            $this->FE['JSFOOT'] = $this->rangeTablesHandler(
                array_unique(explode("\n", $this->Configuration['components']['ipv4'])),
                array_unique(explode("\n", $this->Configuration['components']['ipv6']))
            );

            /** Process matrix data. */
            if ($this->FE['Matrix-Data']) {
                $this->FE['Matrix'] = sprintf(
                    '<br /><table><tr><td class="spanner"><img src="data:image/png;base64,%s" alt="CIDRAM signature file analysis" /></td></tr></table>',
                    base64_encode($this->matrixCreate($this->FE['Matrix-Data']))
                );
            } else {
                $this->FE['Matrix'] = '';
            }

            /** Calculate and append page load time, and append totals. */
            $this->FE['ProcTime'] = microtime(true) - $_SERVER['REQUEST_TIME_FLOAT'];
            $this->FE['ProcTime'] = '<div class="s">' . sprintf(
                $this->L10N->getPlural($this->FE['ProcTime'], 'state_loadtime'),
                '<span class="txtRd">' . $this->NumberFormatter->format($this->FE['ProcTime'], 3) . '</span>'
            ) . '</div>' . $this->FE['Matrix'];

            /** Cleanup. */
            unset($this->FE['Matrix'], $this->FE['Matrix-Data']);

            /** Parse output. */
            $this->FE['FE_Content'] = $this->parseVars(
                $this->L10N->Data + $this->FE,
                $this->readFile($this->getAssetPath('_range.html'))
            );

            /** Send output. */
            echo $this->sendOutput();
        }

        /** Intersector. */
        elseif ($this->CIDRAM['QueryVars']['cidram-page'] === 'intersector' && $this->FE['Permissions'] === 1) {
            /** Page initial prepwork. */
            $this->initialPrepwork($this->L10N->getString('link_intersector'), $this->L10N->getString('tip_intersector'));

            /** Output format. */
            $OutputFormat = (isset($_POST['format']) && $_POST['format'] === 'Netmask') ? 1 : 0;

            /** Output format menu. */
            $this->FE['OutputFormat'] = sprintf(
                '%1$sCIDR" value="CIDR"%2$s%6$sformatCIDR">%3$s</label><br />%1$sNetmask" value="Netmask"%4$s%6$sformatNetmask">%5$s</label>',
                '<input type="radio" class="auto" name="format" id="format',
                $OutputFormat !== 1 ? ' checked' : '',
                $this->L10N->getString('field_cidr'),
                $OutputFormat === 1 ? ' checked' : '',
                $this->L10N->getString('field_netmask'),
                ' /><label class="s" for="'
            );

            /** Default values for inputs. */
            $this->FE['Intersector_A'] = $_POST['A'] ?? '';
            $this->FE['Intersector_B'] = $_POST['B'] ?? '';

            /** Default value for output. */
            $this->FE['Intersector_AB'] = '';

            /** Data was submitted for intersection. */
            if (isset($_POST['A'], $_POST['B'])) {
                $Intersection = [
                    'A' => str_replace("\r", '', trim($_POST['A'])),
                    'B' => str_replace("\r", '', trim($_POST['B']))
                ];

                /** We'll aggregate the latter set before intersecting it with the former. */
                $this->CIDRAM['Aggregator'] = new \CIDRAM\CIDRAM\Aggregator();
                if ($Intersection['B']) {
                    $Intersection['B'] = "\n" . $this->CIDRAM['Aggregator']->aggregate($Intersection['B']) . "\n";
                }

                /** Beginning intersection process here. */
                if ($Intersection['A'] && $Intersection['B']) {
                    $this->FE['Intersector_AB'] = $this->intersectCidr(
                        $Intersection['A'],
                        $Intersection['B'],
                        $OutputFormat
                    );
                }

                /** Cleanup. */
                unset($Intersection, $this->CIDRAM['Aggregator']);
            }

            /** Calculate page load time (useful for debugging). */
            $this->FE['ProcessTime'] = microtime(true) - $_SERVER['REQUEST_TIME_FLOAT'];
            $this->FE['state_msg'] .= sprintf(
                $this->L10N->getPlural($this->FE['ProcessTime'], 'state_loadtime'),
                '<span class="txtRd">' . $this->NumberFormatter->format($this->FE['ProcessTime'], 3) . '</span>'
            );

            /** Parse output. */
            $this->FE['FE_Content'] = $this->parseVars(
                $this->L10N->Data + $this->FE,
                $this->readFile($this->getAssetPath('_intersector.html'))
            );

            /** Strip output row if input doesn't exist. */
            if ($this->FE['Intersector_AB'] !== '') {
                $this->FE['FE_Content'] = str_replace(['<!-- Output Begin -->', '<!-- Output End -->'], '', $this->FE['FE_Content']);
            } else {
                $this->FE['FE_Content'] =
                    substr($this->FE['FE_Content'], 0, strpos($this->FE['FE_Content'], '<!-- Output Begin -->')) .
                    substr($this->FE['FE_Content'], strpos($this->FE['FE_Content'], '<!-- Output End -->') + 19);
            }

            /** Send output. */
            echo $this->sendOutput();
        }

        /** Subtractor. */
        elseif ($this->CIDRAM['QueryVars']['cidram-page'] === 'subtractor' && $this->FE['Permissions'] === 1) {
            /** Page initial prepwork. */
            $this->initialPrepwork($this->L10N->getString('link_subtractor'), $this->L10N->getString('tip_subtractor'));

            /** Output format. */
            $OutputFormat = (isset($_POST['format']) && $_POST['format'] === 'Netmask') ? 1 : 0;

            /** Output format menu. */
            $this->FE['OutputFormat'] = sprintf(
                '%1$sCIDR" value="CIDR"%2$s%6$sformatCIDR">%3$s</label><br />%1$sNetmask" value="Netmask"%4$s%6$sformatNetmask">%5$s</label>',
                '<input type="radio" class="auto" name="format" id="format',
                $OutputFormat !== 1 ? ' checked' : '',
                $this->L10N->getString('field_cidr'),
                $OutputFormat === 1 ? ' checked' : '',
                $this->L10N->getString('field_netmask'),
                ' /><label class="s" for="'
            );

            /** Default values for inputs. */
            $this->FE['Subtractor_A'] = $_POST['A'] ?? '';
            $this->FE['Subtractor_B'] = $_POST['B'] ?? '';

            /** Default value for output. */
            $this->FE['Subtractor_AB'] = '';

            /** Data was submitted for subtraction. */
            if (isset($_POST['A'], $_POST['B'])) {
                $Subtraction = [
                    'A' => str_replace("\r", '', trim($_POST['A'])),
                    'B' => str_replace("\r", '', trim($_POST['B']))
                ];

                /**
                 * We'll aggregate B prior to subtraction for better optimisation.
                 */
                $this->CIDRAM['Aggregator'] = new \CIDRAM\CIDRAM\Aggregator();
                if ($Subtraction['B']) {
                    $Subtraction['B'] = $this->CIDRAM['Aggregator']->aggregate($Subtraction['B']) . "\n";
                }

                /** Beginning subtraction process here. */
                if ($Subtraction['A'] && $Subtraction['B']) {
                    $this->FE['Subtractor_AB'] = $this->subtractCidr(
                        $Subtraction['A'],
                        $Subtraction['B'],
                        $OutputFormat
                    );
                }

                /** Cleanup. */
                unset($Subtraction, $this->CIDRAM['Aggregator']);
            }

            /** Calculate page load time (useful for debugging). */
            $this->FE['ProcessTime'] = microtime(true) - $_SERVER['REQUEST_TIME_FLOAT'];
            $this->FE['state_msg'] .= sprintf(
                $this->L10N->getPlural($this->FE['ProcessTime'], 'state_loadtime'),
                '<span class="txtRd">' . $this->NumberFormatter->format($this->FE['ProcessTime'], 3) . '</span>'
            );

            /** Parse output. */
            $this->FE['FE_Content'] = $this->parseVars(
                $this->L10N->Data + $this->FE,
                $this->readFile($this->getAssetPath('_subtractor.html'))
            );

            /** Strip output row if input doesn't exist. */
            if ($this->FE['Subtractor_AB'] !== '') {
                $this->FE['FE_Content'] = str_replace(['<!-- Output Begin -->', '<!-- Output End -->'], '', $this->FE['FE_Content']);
            } else {
                $this->FE['FE_Content'] =
                    substr($this->FE['FE_Content'], 0, strpos($this->FE['FE_Content'], '<!-- Output Begin -->')) .
                    substr($this->FE['FE_Content'], strpos($this->FE['FE_Content'], '<!-- Output End -->') + 19);
            }

            /** Send output. */
            echo $this->sendOutput();
        }

        /** Aggregator. */
        elseif ($this->CIDRAM['QueryVars']['cidram-page'] === 'aggregator' && $this->FE['Permissions'] === 1) {
            /** Page initial prepwork. */
            $this->initialPrepwork($this->L10N->getString('link_aggregator'), $this->L10N->getString('tip_aggregator'));

            /** Output format. */
            $OutputFormat = (isset($_POST['format']) && $_POST['format'] === 'Netmask') ? 1 : 0;

            /** Whether to preserve tags and comments. */
            $Preserve = (isset($_POST['preserve']) && $_POST['preserve'] === 'on') ? 1 : 0;

            /** Output format menu. */
            $this->FE['OutputFormat'] = sprintf(
                '%1$sCIDR" value="CIDR"%2$s%6$sformatCIDR">%3$s</label><br />%1$sNetmask" value="Netmask"%4$s%6$sformatNetmask">%5$s</label><br /><input type="checkbox" class="auto" name="preserve" id="preserve"%7$s%6$spreserve">%8$s</label>',
                '<input type="radio" class="auto" name="format" id="format',
                $OutputFormat !== 1 ? ' checked' : '',
                $this->L10N->getString('field_cidr'),
                $OutputFormat === 1 ? ' checked' : '',
                $this->L10N->getString('field_netmask'),
                ' /><label class="s" for="',
                $Preserve === 1 ? ' checked' : '',
                $this->L10N->getString('field_preserve')
            );

            /** Data was submitted for aggregation. */
            if (!empty($_POST['input'])) {
                $this->FE['input'] = str_replace("\r", '', trim($_POST['input']));
                $this->CIDRAM['Aggregator'] = new \CIDRAM\CIDRAM\Aggregator($OutputFormat);
                $this->CIDRAM['Aggregator']->Results = true;
                if ($Preserve) {
                    $StrObject = new \Maikuolan\Common\ComplexStringHandler(
                        "\n" . $this->FE['input'] . "\n",
                        $this->CIDRAM['RegExTags'],
                        function ($Data): string {
                            if (!$Data = trim($Data)) {
                                return '';
                            }
                            return $this->CIDRAM['Aggregator']->aggregate($Data);
                        }
                    );
                    $StrObject->iterateClosure(function ($Data) {
                        return "\n" . $Data;
                    }, true);
                    $this->FE['output'] = trim($StrObject->recompile());
                    unset($StrObject);
                } else {
                    $this->FE['output'] = $this->CIDRAM['Aggregator']->aggregate($this->FE['input']);
                }
                $this->FE['ResultLine'] = sprintf(
                    $this->L10N->getString('label_results'),
                    '<span class="txtRd">' . $this->NumberFormatter->format($this->CIDRAM['Aggregator']->NumberEntered) . '</span>',
                    '<span class="txtRd">' . $this->NumberFormatter->format($this->CIDRAM['Aggregator']->NumberRejected) . '</span>',
                    '<span class="txtRd">' . $this->NumberFormatter->format($this->CIDRAM['Aggregator']->NumberAccepted) . '</span>',
                    '<span class="txtRd">' . $this->NumberFormatter->format($this->CIDRAM['Aggregator']->NumberMerged) . '</span>',
                    '<span class="txtRd">' . $this->NumberFormatter->format($this->CIDRAM['Aggregator']->NumberReturned) . '</span>'
                );
                unset($this->CIDRAM['Aggregator']);
            } else {
                $this->FE['output'] = $this->FE['input'] = '';
            }

            /** Calculate page load time (useful for debugging). */
            $this->FE['ProcessTime'] = microtime(true) - $_SERVER['REQUEST_TIME_FLOAT'];
            $this->FE['state_msg'] .= sprintf(
                $this->L10N->getPlural($this->FE['ProcessTime'], 'state_loadtime'),
                '<span class="txtRd">' . $this->NumberFormatter->format($this->FE['ProcessTime'], 3) . '</span>'
            );

            /** Parse output. */
            $this->FE['FE_Content'] = $this->parseVars(
                $this->L10N->Data + $this->FE,
                $this->readFile($this->getAssetPath('_aggregator.html'))
            );

            /** Strip output row if input doesn't exist. */
            if ($this->FE['input']) {
                $this->FE['FE_Content'] = str_replace(['<!-- Output Begin -->', '<!-- Output End -->'], '', $this->FE['FE_Content']);
            } else {
                $this->FE['FE_Content'] =
                    substr($this->FE['FE_Content'], 0, strpos($this->FE['FE_Content'], '<!-- Output Begin -->')) .
                    substr($this->FE['FE_Content'], strpos($this->FE['FE_Content'], '<!-- Output End -->') + 19);
            }

            /** Send output. */
            echo $this->sendOutput();
        }

        /** IP Test. */
        elseif ($this->CIDRAM['QueryVars']['cidram-page'] === 'ip-test' && $this->FE['Permissions'] === 1) {
            /** Page initial prepwork. */
            $this->initialPrepwork($this->L10N->getString('link_ip_test'), $this->L10N->getString('tip_ip_test'));

            /** Add flags CSS. */
            if ($this->FE['Flags'] = file_exists($this->Vault . 'assets/frontend/flags.css')) {
                $this->FE['OtherHead'] .= "\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"?cidram-page=flags\" />";
            }

            /** Template for result rows. */
            $this->FE['IPTestRow'] = $this->readFile($this->getAssetPath('_ip_test_row.html'));

            /** Initialise results data. */
            $this->FE['IPTestResults'] = '';

            /** Module switch for simulateBlockEvent method. */
            $this->CIDRAM['ModuleSwitch'] = !empty($_POST['ModuleSwitch']);

            /** Auxiliary switch for simulateBlockEvent method. */
            $this->CIDRAM['AuxSwitch'] = !empty($_POST['AuxSwitch']);

            /** Verification switch for simulateBlockEvent method. */
            $this->CIDRAM['VerificationSwitch'] = !empty($_POST['VerificationSwitch']);

            /** Module switch for HTML. */
            $this->FE['ModuleSwitch'] = $this->CIDRAM['ModuleSwitch'] ? ' checked' : '';

            /** Auxiliary switch for HTML. */
            $this->FE['AuxSwitch'] = $this->CIDRAM['AuxSwitch'] ? ' checked' : '';

            /** Verification switch for HTML. */
            $this->FE['VerificationSwitch'] = $this->CIDRAM['VerificationSwitch'] ? ' checked' : '';

            /** Fetch custom fields if specified. */
            foreach (['custom-query', 'custom-referrer', 'custom-ua'] as $this->CIDRAM['ThisField']) {
                $this->FE[$this->CIDRAM['ThisField']] = $_POST[$this->CIDRAM['ThisField']] ?? '';
            }
            unset($this->CIDRAM['ThisField']);

            /** Set field label. */
            if (!empty($_POST['ip-addr']) || empty($_POST['custom-ua'])) {
                $this->FE['TestItemLabel'] = $this->L10N->getString('field_ipaddr');
                $this->FE['TestMode'] = 1;
            } else {
                $this->FE['TestItemLabel'] = $this->L10N->getString('field_ua');
                $this->FE['TestMode'] = 2;
            }

            /** IPs were submitted for testing. */
            if (isset($_POST['ip-addr'])) {
                $this->FE['ip-addr'] = $_POST['ip-addr'];
                $_POST['ip-addr'] = array_unique(array_map(function ($IP) {
                    return preg_replace('~[^\da-f:./]~i', '', $IP);
                }, explode("\n", $_POST['ip-addr'])));
                natsort($_POST['ip-addr']);
                $this->CIDRAM['ThisIP'] = [];

                /** Initialise stages. */
                $this->Stages = array_flip(explode("\n", $this->Configuration['general']['stages']));

                /** Iterate through the addresses given to test. */
                foreach ($_POST['ip-addr'] as $this->CIDRAM['ThisIP']['IPAddress']) {
                    if ($this->FE['TestMode'] === 1) {
                        if (strlen($this->CIDRAM['ThisIP']['IPAddress']) === 0) {
                            continue;
                        }
                        $this->simulateBlockEvent($this->CIDRAM['ThisIP']['IPAddress'], $this->CIDRAM['ModuleSwitch'], $this->CIDRAM['AuxSwitch'], $this->CIDRAM['VerificationSwitch']);
                    } elseif ($this->FE['TestMode'] === 2) {
                        $this->simulateBlockEvent('', $this->CIDRAM['ModuleSwitch'], $this->CIDRAM['AuxSwitch'], $this->CIDRAM['VerificationSwitch']);
                        $this->CIDRAM['ThisIP']['IPAddress'] = $this->FE['custom-ua'];
                    }
                    if (
                        !empty($this->CIDRAM['Caught']) ||
                        ($this->FE['TestMode'] === 1 && (empty($this->CIDRAM['LastTestIP']) || empty($this->CIDRAM['TestResults']))) ||
                        !empty($this->CIDRAM['RunErrors']) ||
                        !empty($this->CIDRAM['ModuleErrors']) ||
                        !empty($this->CIDRAM['AuxErrors'])
                    ) {
                        $this->CIDRAM['ThisIP']['YesNo'] = $this->L10N->getString('response_error');
                        $this->CIDRAM['ThisIP']['StatClass'] = 'txtOe';
                        if (!empty($this->CIDRAM['AuxErrors'])) {
                            $this->CIDRAM['AuxErrorCounts'] = [];
                            foreach ($this->CIDRAM['AuxErrors'] as $this->CIDRAM['AuxError']) {
                                $this->CIDRAM['AuxError'][2] = 'auxiliary.yml';
                                if (!empty($this->CIDRAM['AuxError'][4])) {
                                    $this->CIDRAM['AuxError'][2] .= ':' . $this->CIDRAM['AuxError'][4];
                                }
                                if (isset($this->CIDRAM['AuxErrorCounts'][$this->CIDRAM['AuxError'][2]])) {
                                    $this->CIDRAM['AuxErrorCounts'][$this->CIDRAM['AuxError'][2]]++;
                                } else {
                                    $this->CIDRAM['AuxErrorCounts'][$this->CIDRAM['AuxError'][2]] = 1;
                                }
                            }
                            arsort($this->CIDRAM['AuxErrorCounts']);
                            foreach ($this->CIDRAM['AuxErrorCounts'] as $this->CIDRAM['AuxName'] => $this->CIDRAM['AuxError']) {
                                $this->CIDRAM['ThisIP']['YesNo'] .= sprintf(
                                    ' – %s (%s)',
                                    $this->CIDRAM['AuxName'],
                                    $this->NumberFormatter->format($this->CIDRAM['AuxError'])
                                );
                            }
                            unset($this->CIDRAM['AuxName'], $this->CIDRAM['AuxError'], $this->CIDRAM['AuxErrorCounts'], $this->CIDRAM['AuxErrors']);
                        }
                        if (!empty($this->CIDRAM['ModuleErrors'])) {
                            $this->CIDRAM['ModuleErrorCounts'] = [];
                            foreach ($this->CIDRAM['ModuleErrors'] as $this->CIDRAM['ModuleError']) {
                                if (isset($this->CIDRAM['ModuleErrorCounts'][$this->CIDRAM['ModuleError'][2]])) {
                                    $this->CIDRAM['ModuleErrorCounts'][$this->CIDRAM['ModuleError'][2]]++;
                                } else {
                                    $this->CIDRAM['ModuleErrorCounts'][$this->CIDRAM['ModuleError'][2]] = 1;
                                }
                            }
                            arsort($this->CIDRAM['ModuleErrorCounts']);
                            foreach ($this->CIDRAM['ModuleErrorCounts'] as $this->CIDRAM['ModuleName'] => $this->CIDRAM['ModuleError']) {
                                $this->CIDRAM['ThisIP']['YesNo'] .= sprintf(
                                    ' – %s (%s)',
                                    $this->CIDRAM['ModuleName'],
                                    $this->NumberFormatter->format($this->CIDRAM['ModuleError'])
                                );
                            }
                            unset($this->CIDRAM['ModuleName'], $this->CIDRAM['ModuleError'], $this->CIDRAM['ModuleErrorCounts'], $this->CIDRAM['ModuleErrors']);
                        }
                        if (!empty($this->CIDRAM['RunErrors'])) {
                            $this->CIDRAM['RunErrorCounts'] = [];
                            foreach ($this->CIDRAM['RunErrors'] as $this->CIDRAM['RunError']) {
                                if ($this->CIDRAM['RunError'][2] === 'functions.php' && !empty($this->CIDRAM['RunError'][4])) {
                                    $this->CIDRAM['RunError'][2] = $this->CIDRAM['RunError'][4];
                                }
                                if (isset($this->CIDRAM['RunErrorCounts'][$this->CIDRAM['RunError'][2]])) {
                                    $this->CIDRAM['RunErrorCounts'][$this->CIDRAM['RunError'][2]]++;
                                } else {
                                    $this->CIDRAM['RunErrorCounts'][$this->CIDRAM['RunError'][2]] = 1;
                                }
                            }
                            arsort($this->CIDRAM['RunErrorCounts']);
                            foreach ($this->CIDRAM['RunErrorCounts'] as $this->CIDRAM['RunName'] => $this->CIDRAM['RunError']) {
                                $this->CIDRAM['ThisIP']['YesNo'] .= sprintf(
                                    ' – %s (%s)',
                                    $this->CIDRAM['RunName'],
                                    $this->NumberFormatter->format($this->CIDRAM['RunError'])
                                );
                            }
                            unset($this->CIDRAM['RunName'], $this->CIDRAM['RunError'], $this->CIDRAM['RunErrorCounts'], $this->CIDRAM['RunErrors']);
                        }
                    } elseif ($this->BlockInfo['SignatureCount']) {
                        $this->CIDRAM['ThisIP']['YesNo'] = $this->L10N->getString('response_yes') . ' – ' . $this->BlockInfo['WhyReason'];
                        $this->CIDRAM['ThisIP']['StatClass'] = 'txtRd';
                        if (
                            $this->FE['Flags'] &&
                            preg_match_all('~\[([A-Z]{2})\]~', $this->CIDRAM['ThisIP']['YesNo'], $this->CIDRAM['ThisIP']['Matches']) &&
                            !empty($this->CIDRAM['ThisIP']['Matches'][1])
                        ) {
                            foreach ($this->CIDRAM['ThisIP']['Matches'][1] as $this->CIDRAM['ThisIP']['ThisMatch']) {
                                $this->CIDRAM['ThisIP']['YesNo'] = str_replace(
                                    '[' . $this->CIDRAM['ThisIP']['ThisMatch'] . ']',
                                    '<span class="flag ' . $this->CIDRAM['ThisIP']['ThisMatch'] . '"><span></span></span>',
                                    $this->CIDRAM['ThisIP']['YesNo']
                                );
                            }
                        }
                        if ($this->BlockInfo['Ignored']) {
                            $this->CIDRAM['ThisIP']['YesNo'] .= sprintf(
                                ', +%s (%s)',
                                $this->L10N->getString('state_ignored'),
                                $this->BlockInfo['Ignored']
                            );
                        }
                    } elseif ($this->BlockInfo['Ignored']) {
                        $this->CIDRAM['ThisIP']['YesNo'] = sprintf(
                            '%s (%s) – %s',
                            $this->L10N->getString('response_no'),
                            $this->L10N->getString('state_ignored'),
                            $this->BlockInfo['Ignored']
                        );
                        $this->CIDRAM['ThisIP']['StatClass'] = 'txtOe';
                    } else {
                        $this->CIDRAM['ThisIP']['YesNo'] = $this->L10N->getString('response_no');
                        $this->CIDRAM['ThisIP']['StatClass'] = 'txtGn';
                    }
                    if ($this->CIDRAM['Aux Redirect'] && $this->CIDRAM['Aux Status Code']) {
                        if ($this->CIDRAM['ThisIP']['StatClass'] === 'txtGn') {
                            $this->CIDRAM['ThisIP']['StatClass'] = 'txtOe';
                        }
                        $this->CIDRAM['ThisIP']['YesNo'] .= ' ' . $this->ltrInRtf(sprintf(
                            '%1$s <%2$d> ➡ %3$s',
                            '<br /><span style="text-transform:capitalize">++' . $this->L10N->getString('label_aux_actRdr') . '</span>',
                            $this->CIDRAM['Aux Status Code'],
                            '<code>' . $this->CIDRAM['Aux Redirect'] . '</code>'
                        ));
                    }
                    if (!empty($this->CIDRAM['Flag Don\'t Log'])) {
                        $this->CIDRAM['ThisIP']['YesNo'] .= '<br /><span style="text-transform:capitalize">++' . $this->L10N->getString('label_aux_actLog') . '</span>';
                    }
                    if (!empty($this->Configuration['recaptcha']['enabled'])) {
                        $this->CIDRAM['ThisIP']['YesNo'] .= '<br />++' . $this->L10N->getString('label_aux_special_recaptcha_mark');
                    }
                    if (!empty($this->Configuration['hcaptcha']['enabled'])) {
                        $this->CIDRAM['ThisIP']['YesNo'] .= '<br />++' . $this->L10N->getString('label_aux_special_hcaptcha_mark');
                    }
                    if (!empty($this->CIDRAM['Suppress output template'])) {
                        $this->CIDRAM['ThisIP']['YesNo'] .= '<br />++' . $this->L10N->getString('label_aux_special_suppress');
                    }
                    if (!empty($this->CIDRAM['Tracking options override'])) {
                        $this->CIDRAM['ThisIP']['YesNo'] .= '<br />++' . $this->L10N->getString('label_aux_special_tracking_extended');
                    }
                    if (isset($this->Profiles) && is_array($this->Profiles) && count($this->Profiles)) {
                        foreach ($this->Profiles as $this->CIDRAM['ThisProfile']) {
                            $this->CIDRAM['ThisIP']['YesNo'] .= '<br />++&lt;' . $this->CIDRAM['ThisProfile'] . '&gt;';
                        }
                    }
                    $this->CIDRAM['ThisIP']['ID'] = preg_replace('~[^\dA-Za-z]~', '_', $this->CIDRAM['ThisIP']['IPAddress']);
                    $this->FE['IPTestResults'] .= $this->parseVars(
                        $this->L10N->Data + $this->CIDRAM['ThisIP'],
                        $this->FE['IPTestRow']
                    );
                }
                unset($this->CIDRAM['ThisIP']);
            } else {
                $this->FE['ip-addr'] = '';
            }

            /** Calculate page load time (useful for debugging). */
            $this->FE['ProcessTime'] = microtime(true) - $_SERVER['REQUEST_TIME_FLOAT'];
            $this->FE['state_msg'] .= sprintf(
                $this->L10N->getPlural($this->FE['ProcessTime'], 'state_loadtime'),
                '<span class="txtRd">' . $this->NumberFormatter->format($this->FE['ProcessTime'], 3) . '</span>'
            );

            /** Parse output. */
            $this->FE['FE_Content'] = $this->parseVars(
                $this->L10N->Data + $this->FE,
                $this->readFile($this->getAssetPath('_ip_test.html'))
            );

            /** Send output. */
            echo $this->sendOutput();
        }

        /** IP Tracking. */
        elseif ($this->CIDRAM['QueryVars']['cidram-page'] === 'ip-tracking' && $this->FE['Permissions'] === 1) {
            $this->FE['TrackingFilter'] = 'cidram-page=ip-tracking';
            $this->FE['TrackingFilterControls'] = '';
            $this->CIDRAM['StateModified'] = false;
            $this->filterSwitch(
                ['tracking-blocked-already', 'tracking-aux', 'tracking-hide-banned-blocked'],
                $_POST['FilterSelector'] ?? '',
                $this->CIDRAM['StateModified'],
                $this->FE['TrackingFilter'],
                $this->FE['TrackingFilterControls']
            );
            if ($this->CIDRAM['StateModified']) {
                header('Location: ?' . $this->FE['TrackingFilter']);
                die;
            }
            unset($this->CIDRAM['StateModified']);

            /** Temporarily mute signature files if "tracking-blocked-already" is false. */
            if (!$this->FE['tracking-blocked-already']) {
                $TempMuted = [
                    'IPv4' => $this->Configuration['components']['ipv4'],
                    'IPv6' => $this->Configuration['components']['ipv6']
                ];
                $this->Configuration['components']['ipv4'] = '';
                $this->Configuration['components']['ipv6'] = '';
            }

            if (!$this->FE['ASYNC']) {
                /** Page initial prepwork. */
                $this->initialPrepwork($this->L10N->getString('link_ip_tracking'), $this->L10N->getString('tip_ip_tracking'));

                /** Add flags CSS. */
                if ($this->FE['Flags'] = file_exists($this->Vault . 'assets/frontend/flags.css')) {
                    $this->FE['OtherHead'] .= "\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"?cidram-page=flags\" />";
                }

                /** Template for result rows. */
                $this->FE['TrackingRow'] = $this->readFile($this->getAssetPath('_ip_tracking_row.html'));
            }

            /** Initialise variables. */
            $this->FE['TrackingData'] = '';
            $this->FE['TrackingCount'] = '';

            /** Generate confirm button. */
            $this->FE['Confirm-ClearAll'] = $this->generateConfirmation($this->L10N->getString('field_clear_all'), 'trackForm');

            /** Clear/revoke IP tracking for an IP address. */
            if (isset($_POST['IPAddr']) && (
                ($_POST['IPAddr'] === '*' && $this->Cache->deleteAllEntriesWhere('~^Tracking-(.+)$~')) ||
                $this->Cache->deleteEntry('Tracking-' . $_POST['IPAddr'])
            )) {
                $this->FE['state_msg'] = $this->L10N->getString('response_tracking_cleared');
            }

            if (!$this->FE['ASYNC']) {
                $ThisTracking = [];

                /** Initialise stages. */
                $this->Stages = array_flip(explode("\n", $this->Configuration['general']['stages']));

                /** Get all IP tracking entries. */
                $Entries = $this->getAllEntriesWhere('~^Tracking-(.+)$~', '\1', function ($A, $B): int {
                    return ($A['Time'] < $B['Time']) ? -1 : 1;
                });

                /** Count currently tracked IPs. */
                $this->FE['TrackingCount'] = count($Entries);
                $this->FE['TrackingCount'] = sprintf(
                    $this->L10N->getPlural($this->FE['TrackingCount'], 'state_tracking'),
                    '<span class="txtRd">' . $this->NumberFormatter->format($this->FE['TrackingCount']) . '</span>'
                );

                /** Iterate through all addresses being currently tracked. */
                foreach ($Entries as $ThisTracking['IPAddr'] => $ThisTrackingArray) {
                    /** Guard. */
                    if (!isset($ThisTrackingArray['Time'], $ThisTrackingArray['Data'])) {
                        continue;
                    }

                    /** Check whether normally blocked by signature files and/or auxiliary rules. */
                    if ($this->FE['tracking-blocked-already'] || $this->FE['tracking-aux']) {
                        $this->simulateBlockEvent($ThisTracking['IPAddr'], false, $this->FE['tracking-aux'], false);
                        $ThisTracking['Blocked'] = ($this->CIDRAM['Caught'] || $this->BlockInfo['SignatureCount']);
                    } else {
                        $ThisTracking['Blocked'] = false;
                    }

                    /** Hide banned/blocked IPs. */
                    if ($this->FE['tracking-hide-banned-blocked'] && (
                        $ThisTracking['Blocked'] || $ThisTrackingArray['Data'] >= $this->Configuration['signatures']['infraction_limit']
                    )) {
                        continue;
                    }
                    $ThisTracking['IPID'] = bin2hex($ThisTracking['IPAddr']);

                    /** Set clearing option. */
                    $ThisTracking['Options'] = sprintf(
                        '<input type="button" class="auto" onclick="javascript:{window[\'IPAddr\']=\'%s\';' .
                        '$(\'POST\',\'\',[\'IPAddr\'],function(){w(\'stateMsg\',\'%s\')},function(e){w(\'stateMsg\',e);' .
                        'hideid(\'%s\')},function(e){w(\'stateMsg\',e)})}" value="%s" />',
                        $ThisTracking['IPAddr'],
                        $this->L10N->getString('state_loading'),
                        $ThisTracking['IPID'],
                        $this->L10N->getString('field_clear')
                    );

                    /** When the entry expires. */
                    $ThisTracking['Expiry'] = $this->timeFormat(
                        $ThisTrackingArray['Time'],
                        $this->Configuration['general']['time_format']
                    ) . '<br />(' . $this->relativeTime($ThisTrackingArray['Time']) . ')';

                    if ($ThisTrackingArray['Data'] >= $this->Configuration['signatures']['infraction_limit']) {
                        $ThisTracking['StatClass'] = 'txtRd';
                        $ThisTracking['Status'] = $this->L10N->getString('field_banned');
                    } elseif ($ThisTrackingArray['Data'] >= ($this->Configuration['signatures']['infraction_limit'] / 2)) {
                        $ThisTracking['StatClass'] = 'txtOe';
                        $ThisTracking['Status'] = $this->L10N->getString('field_tracking');
                    } else {
                        $ThisTracking['StatClass'] = 's';
                        $ThisTracking['Status'] = $this->L10N->getString('field_tracking');
                    }
                    if ($ThisTracking['Blocked']) {
                        $ThisTracking['StatClass'] = 'txtRd';
                        $ThisTracking['Status'] .= '/' . $this->L10N->getString('field_blocked');
                    }
                    $ThisTracking['Status'] .= ' – ' . $this->NumberFormatter->format($ThisTrackingArray['Data'], 0);
                    $ThisTracking['TrackingFilter'] = $this->FE['TrackingFilter'];
                    if (!empty($this->FE['CachedLogsLink']) && strpos($this->FE['CachedLogsLink'], 'logfile=') !== false) {
                        $ThisTracking['IPAddr'] = sprintf(
                            '<a href="%s&search=%s">%s</a>',
                            $this->FE['CachedLogsLink'],
                            str_replace('=', '_', base64_encode($ThisTracking['IPAddr'])),
                            $ThisTracking['IPAddr']
                        );
                    }
                    if (
                        isset($this->BlockInfo['SignatureCount'], $this->BlockInfo['WhyReason']) &&
                        strlen($this->BlockInfo['WhyReason'])
                    ) {
                        $ThisTracking['Status'] .= '<hr /><em>' . $this->BlockInfo['WhyReason'] . '</em>';
                        if (
                            $this->FE['Flags'] &&
                            preg_match_all('~\[([A-Z]{2})\]~', $ThisTracking['Status'], $ThisTracking['Matches']) &&
                            !empty($ThisTracking['Matches'][1])
                        ) {
                            foreach ($ThisTracking['Matches'][1] as $ThisTracking['ThisMatch']) {
                                $ThisTracking['Status'] = str_replace(
                                    '[' . $ThisTracking['ThisMatch'] . ']',
                                    '<span class="flag ' . $ThisTracking['ThisMatch'] . '"><span></span></span>',
                                    $ThisTracking['Status']
                                );
                            }
                        }
                        unset($ThisTracking['Matches'], $ThisTracking['ThisMatch']);
                    }
                    $ThisTracking['ID'] = preg_replace('~[^\dA-Za-z]~', '_', $ThisTracking['IPAddr']);
                    $this->FE['TrackingData'] .= $this->parseVars(
                        $this->L10N->Data + $ThisTracking,
                        $this->FE['TrackingRow']
                    );
                }
                unset($ThisTrackingArray, $ThisTracking);
            }

            /** Restore muted values. */
            if (isset($TempMuted['IPv4'], $TempMuted['IPv6'])) {
                $this->Configuration['components']['ipv4'] = $TempMuted['IPv4'];
                $this->Configuration['components']['ipv6'] = $TempMuted['IPv6'];
                unset($TempMuted);
            }

            /** Fix status display. */
            if ($this->FE['state_msg']) {
                $this->FE['state_msg'] .= '<br />';
            }

            if ($this->FE['TrackingCount']) {
                $this->FE['TrackingCount'] .= ' ';
            }

            /** Calculate page load time (useful for debugging). */
            $this->FE['ProcessTime'] = microtime(true) - $_SERVER['REQUEST_TIME_FLOAT'];
            $this->FE['TrackingCount'] .= sprintf(
                $this->L10N->getPlural($this->FE['ProcessTime'], 'state_loadtime'),
                '<span class="txtRd">' . $this->NumberFormatter->format($this->FE['ProcessTime'], 3) . '</span>'
            );

            if ($this->FE['ASYNC']) {
                /** Send output (async). */
                echo $this->FE['state_msg'] . $this->FE['TrackingCount'];
            } else {
                /** Parse output. */
                $this->FE['FE_Content'] = $this->parseVars(
                    $this->L10N->Data + $this->FE,
                    $this->readFile($this->getAssetPath('_ip_tracking.html'))
                );

                /** Send output. */
                echo $this->sendOutput();
            }
        }

        /** Calculator. */
        elseif ($this->CIDRAM['QueryVars']['cidram-page'] === 'calculator' && $this->FE['Permissions'] === 1) {
            /** Page initial prepwork. */
            $this->initialPrepwork($this->L10N->getString('link_calculator'), $this->L10N->getString('tip_calculator'));

            /** Template for result rows. */
            $this->FE['CalcRow'] = $this->readFile($this->getAssetPath('_calculator_row.html'));

            /** Initialise results data. */
            $this->FE['Ranges'] = '';

            /** Process the IP address entered for range calculation. */
            if (isset($_POST['address']) && strlen($_POST['address'])) {
                $this->FE['address'] = $_POST['address'];
                if (!$this->CIDRAM['CIDRs'] = $this->expandIpv4($_POST['address'])) {
                    $this->CIDRAM['CIDRs'] = $this->expandIpv6($_POST['address']);
                }
            } else {
                $this->FE['address'] = '';
            }

            /** Process CIDRs. */
            if (!empty($this->CIDRAM['CIDRs'])) {
                $this->CIDRAM['Aggregator'] = new \CIDRAM\CIDRAM\Aggregator(1);
                $this->CIDRAM['Factors'] = count($this->CIDRAM['CIDRs']);
                array_walk($this->CIDRAM['CIDRs'], function ($CIDR, $Key): void {
                    $First = substr($CIDR, 0, strlen($CIDR) - strlen($Key + 1) - 1);
                    if ($this->CIDRAM['Factors'] === 32) {
                        $Last = $this->ipv4GetLast($First, $Key + 1);
                    } elseif ($this->CIDRAM['Factors'] === 128) {
                        $Last = $this->ipv6GetLast($First, $Key + 1);
                    } else {
                        $Last = $this->L10N->getString('response_error');
                    }
                    $Netmask = $CIDR;
                    $this->CIDRAM['Aggregator']->convertToNetmasks($Netmask);
                    $Arr = ['CIDR' => $CIDR, 'Netmask' => $Netmask, 'ID' => preg_replace('~[^\dA-fa-f]~', '_', $CIDR), 'Range' => $First . ' – ' . $Last];
                    $this->FE['Ranges'] .= $this->parseVars($Arr, $this->FE['CalcRow']);
                });
                unset($this->CIDRAM['Aggregator']);
            }

            /** Parse output. */
            $this->FE['FE_Content'] = $this->parseVars($this->L10N->Data, $this->parseVars(
                $this->FE,
                $this->readFile($this->getAssetPath('_calculator.html'))
            ));

            /** Send output. */
            echo $this->sendOutput();
        }

        /** Statistics. */
        elseif ($this->CIDRAM['QueryVars']['cidram-page'] === 'statistics' && $this->FE['Permissions'] === 1) {
            /** Page initial prepwork. */
            $this->initialPrepwork($this->L10N->getString('link_statistics'), $this->L10N->getString('tip_statistics'), false);

            if (isset($this->Stages['Statistics:Enable'])) {
                /** Statistics have been counted since... */
                if (($Since = $this->Cache->getEntry('Statistics-Since')) === false) {
                    $Since = $this->Now;
                    $this->Cache->setEntry('Statistics-Since', $Since, 0);
                }
                $this->FE['Other-Since'] = $this->timeFormat($Since, $this->Configuration['general']['time_format']);
                unset($Since);
            } else {
                $this->FE['Other-Since'] = '-';

                /** Display how to enable statistics if currently disabled. */
                $this->FE['state_msg'] .= '<span class="txtRd">' . $this->L10N->getString('tip_statistics_disabled') . '</span><br />';
            }

            /** Generate confirm button. */
            $this->FE['Confirm-ClearAll'] = $this->generateConfirmation($this->L10N->getString('field_clear_all'), 'statForm');

            /** Clear statistics. */
            if (!empty($_POST['ClearStats']) && $this->Cache->deleteAllEntriesWhere('~^Statistics-(.+)$~')) {
                $this->FE['state_msg'] .= $this->L10N->getString('response_statistics_cleared') . '<br />';
            }

            /** Fetch and process various statistics. */
            foreach ([
                ['Blocked-IPv4', 'Blocked-Total'],
                ['Blocked-IPv6', 'Blocked-Total'],
                ['Blocked-Other', 'Blocked-Total'],
                ['Banned-IPv4', 'Banned-Total'],
                ['Banned-IPv6', 'Banned-Total'],
                ['Passed-IPv4', 'Passed-Total'],
                ['Passed-IPv6', 'Passed-Total'],
                ['Passed-Other', 'Passed-Total'],
                ['CAPTCHAs-Failed', 'CAPTCHAs-Total'],
                ['CAPTCHAs-Passed', 'CAPTCHAs-Total']
            ] as $TheseStats) {
                if (!isset($this->FE[$TheseStats[1]])) {
                    $this->FE[$TheseStats[1]] = 0;
                }
                $Try = $this->Cache->getEntry('Statistics-' . $TheseStats[0]);
                if (!is_int($Try) || $Try < 1) {
                    $Try = (int)$Try;
                }
                $this->FE[$TheseStats[1]] += $Try;
                $this->FE[$TheseStats[0]] = $this->NumberFormatter->format($Try);
                if (!isset($this->Stages['Statistics:Enable'], $this->StatisticsTracked[$TheseStats[0]])) {
                    $this->FE[$TheseStats[0]] .= ' – ' . $this->L10N->getString('field_not_tracking');
                }
            }

            /** Fetch and process totals. */
            foreach (['Blocked-Total', 'Banned-Total', 'Passed-Total', 'CAPTCHAs-Total'] as $TheseStats) {
                $this->FE[$TheseStats] = $this->NumberFormatter->format($this->FE[$TheseStats]);
            }

            /** Active signature files. */
            foreach ([
                ['ipv4', 'Other-ActiveIPv4', 'ClassActiveIPv4'],
                ['ipv6', 'Other-ActiveIPv6', 'ClassActiveIPv6'],
                ['modules', 'Other-ActiveModules', 'ClassActiveModules'],
                ['imports', 'Other-ActiveImports', 'ClassActiveImports'],
                ['events', 'Other-ActiveEvents', 'ClassActiveEvents']
            ] as $TheseStats) {
                if (empty($this->Configuration['components'][$TheseStats[0]])) {
                    $this->FE[$TheseStats[1]] = $this->NumberFormatter->format(0);
                    $this->FE[$TheseStats[2]] = 'txtRd';
                } else {
                    $this->FE[$TheseStats[1]] = 0;
                    $Path = $this->pathFromComponentType($TheseStats[0]);
                    foreach (explode("\n", $this->Configuration['components'][$TheseStats[0]]) as $StatWorking) {
                        if (strlen($StatWorking) && is_readable($Path . $StatWorking)) {
                            $this->FE[$TheseStats[1]]++;
                        }
                    }
                    $this->FE[$TheseStats[1]] = $this->NumberFormatter->format($this->FE[$TheseStats[1]]);
                    $this->FE[$TheseStats[2]] = $this->FE[$TheseStats[1]] ? 'txtGn' : 'txtRd';
                }
            }

            /** Parse output. */
            $this->FE['FE_Content'] = $this->parseVars(
                $this->L10N->Data + $this->FE,
                $this->readFile($this->getAssetPath('_statistics.html'))
            );

            /** Send output. */
            echo $this->sendOutput();

            /** Cleanup. */
            unset($Path, $StatWorking, $Try, $TheseStats);
        }

        /** Auxiliary rules (view mode). */
        elseif ($this->CIDRAM['QueryVars']['cidram-page'] === 'aux' && $this->FE['Permissions'] === 1) {
            /** Attempt to parse the auxiliary rules file. */
            if (!isset($this->CIDRAM['AuxData'])) {
                $this->CIDRAM['AuxData'] = [];
                $this->YAML->process($this->readFile($this->Vault . 'auxiliary.yml'), $this->CIDRAM['AuxData']);
            }

            /** Create new auxiliary rule. */
            if (isset($_POST['ruleName'], $_POST['conSourceType'], $_POST['conIfOrNot'], $_POST['conSourceValue'], $_POST['act'], $_POST['mtd'], $_POST['logic']) && $_POST['ruleName']) {
                /** Construct new rule array. */
                $this->CIDRAM['AuxData'][$_POST['ruleName']] = [];

                /** Construct new rule method. */
                if ($_POST['mtd'] === 'mtdReg') {
                    $this->CIDRAM['AuxData'][$_POST['ruleName']]['Method'] = 'RegEx';
                } elseif ($_POST['mtd'] === 'mtdWin') {
                    $this->CIDRAM['AuxData'][$_POST['ruleName']]['Method'] = 'WinEx';
                }

                /** Construct new rule notes. */
                if (isset($_POST['Notes']) && strlen($_POST['Notes'])) {
                    $this->CIDRAM['AuxData'][$_POST['ruleName']]['Notes'] = $_POST['Notes'];
                }

                /** Construct other basic rule fields (e.g., match logic, block reason, etc). */
                foreach ([
                    ['Logic', 'logic'],
                    ['Reason', 'ruleReason'],
                    ['Target', 'ruleTarget'],
                    ['From', 'from'],
                    ['Expiry', 'expiry'],
                    ['Status Code', 'statusCode'],
                    ['Webhooks', 'webhooks']
                ] as $this->CIDRAM['AuxTmp']) {
                    if (!empty($_POST[$this->CIDRAM['AuxTmp'][1]])) {
                        $this->CIDRAM['AuxData'][$_POST['ruleName']][$this->CIDRAM['AuxTmp'][0]] = $_POST[$this->CIDRAM['AuxTmp'][1]];
                    }
                }
                unset($this->CIDRAM['AuxTmp']);

                /** Process webhooks. */
                if (!empty($this->CIDRAM['AuxData'][$_POST['ruleName']]['Webhooks'])) {
                    $this->arrayify($this->CIDRAM['AuxData'][$_POST['ruleName']]['Webhooks']);
                    $this->CIDRAM['AuxData'][$_POST['ruleName']]['Webhooks'] = array_unique(
                        array_filter($this->CIDRAM['AuxData'][$_POST['ruleName']]['Webhooks'])
                    );
                    if (!count($this->CIDRAM['AuxData'][$_POST['ruleName']]['Webhooks'])) {
                        unset($this->CIDRAM['AuxData'][$_POST['ruleName']]['Webhooks']);
                    }
                }

                /** Process other options and special flags. */
                foreach ($this->CIDRAM['Provide']['Auxiliary Rules']['Flags'] as $this->CIDRAM['FlagSetName'] => $this->CIDRAM['FlagSet']) {
                    $this->CIDRAM['FlagSetKey'] = preg_replace('~[^A-Za-z]~', '', $this->CIDRAM['FlagSetName']);
                    if (!isset($_POST[$this->CIDRAM['FlagSetKey']])) {
                        continue;
                    }
                    foreach ($this->CIDRAM['FlagSet'] as $this->CIDRAM['FlagName'] => $this->CIDRAM['FlagData']) {
                        if ($_POST[$this->CIDRAM['FlagSetKey']] === $this->CIDRAM['FlagName']) {
                            $this->CIDRAM['AuxData'][$_POST['ruleName']][$this->CIDRAM['FlagName']] = true;
                        }
                    }
                }
                unset($this->CIDRAM['FlagData'], $this->CIDRAM['FlagName'], $this->CIDRAM['FlagSetKey'], $this->CIDRAM['FlagSet'], $this->CIDRAM['FlagSetName']);

                /** Possible actions (other than block). */
                $this->CIDRAM['Actions'] = [
                    'actWhl' => 'Whitelist',
                    'actGrl' => 'Greylist',
                    'actByp' => 'Bypass',
                    'actLog' => 'Don\'t log',
                    'actRdr' => 'Redirect',
                    'actRun' => 'Run',
                    'actPro' => 'Profile'
                ];

                /** Determine appropriate action for new rule. */
                $this->CIDRAM['Action'] = $this->CIDRAM['Actions'][$_POST['act']] ?? 'Block';

                /** Construct new rule action array. */
                if ($this->CIDRAM['Action'] === 'Run' && isset($_POST['ruleRun'])) {
                    $this->CIDRAM['AuxData'][$_POST['ruleName']][$this->CIDRAM['Action']] = ['File' => $_POST['ruleRun'], 'If matches' => [], 'But not if matches' => []];
                } else {
                    $this->CIDRAM['AuxData'][$_POST['ruleName']][$this->CIDRAM['Action']] = ['If matches' => [], 'But not if matches' => []];
                }

                /** Determine number of new rule conditions to construct. */
                $this->CIDRAM['AuxConditions'] = count($_POST['conSourceType']);

                /** Construct new rule conditions. */
                for ($this->CIDRAM['Iteration'] = 0; $this->CIDRAM['Iteration'] < $this->CIDRAM['AuxConditions']; $this->CIDRAM['Iteration']++) {
                    /** Skip if something went wrong during form submission, or if the fields are empty. */
                    if (
                        empty($_POST['conSourceType'][$this->CIDRAM['Iteration']]) ||
                        empty($_POST['conIfOrNot'][$this->CIDRAM['Iteration']]) ||
                        empty($_POST['conSourceValue'][$this->CIDRAM['Iteration']])
                    ) {
                        continue;
                    }

                    /** Where to construct into. */
                    $this->CIDRAM['ConstructInto'] = (
                        $_POST['conIfOrNot'][$this->CIDRAM['Iteration']] === 'If'
                    ) ? 'If matches' : 'But not if matches';

                    /** Set source sub in rule if it doesn't already exist. */
                    if (!isset($this->CIDRAM['AuxData'][$_POST['ruleName']][$this->CIDRAM['Action']][$this->CIDRAM['ConstructInto']][
                        $_POST['conSourceType'][$this->CIDRAM['Iteration']]
                    ])) {
                        $this->CIDRAM['AuxData'][$_POST['ruleName']][$this->CIDRAM['Action']][$this->CIDRAM['ConstructInto']][
                            $_POST['conSourceType'][$this->CIDRAM['Iteration']]
                        ] = [];
                    }

                    /** Construct expected condition values. */
                    $this->CIDRAM['AuxData'][$_POST['ruleName']][$this->CIDRAM['Action']][$this->CIDRAM['ConstructInto']][
                        $_POST['conSourceType'][$this->CIDRAM['Iteration']]
                    ][] = $_POST['conSourceValue'][$this->CIDRAM['Iteration']];
                }

                /** Remove possible empty array. */
                if (empty($this->CIDRAM['AuxData'][$_POST['ruleName']][$this->CIDRAM['Action']]['If matches'])) {
                    unset($this->CIDRAM['AuxData'][$_POST['ruleName']][$this->CIDRAM['Action']]['If matches']);
                }

                /** Remove possible empty array. */
                if (empty($this->CIDRAM['AuxData'][$_POST['ruleName']][$this->CIDRAM['Action']]['But not if matches'])) {
                    unset($this->CIDRAM['AuxData'][$_POST['ruleName']][$this->CIDRAM['Action']]['But not if matches']);
                }

                /** Reconstruct and update auxiliary rules data. */
                if ($this->CIDRAM['NewAuxData'] = $this->YAML->reconstruct($this->CIDRAM['AuxData'])) {
                    $Handle = fopen($this->Vault . 'auxiliary.yml', 'wb');
                    fwrite($Handle, $this->CIDRAM['NewAuxData']);
                    fclose($Handle);
                }

                /** Cleanup. */
                unset($this->CIDRAM['NewAuxData'], $this->CIDRAM['ConstructInto'], $this->CIDRAM['Iteration'], $this->CIDRAM['AuxConditions'], $this->CIDRAM['Action']);

                /** Update state message. */
                $this->FE['state_msg'] = sprintf(
                    $this->L10N->getString('response_aux_rule_created_successfully'),
                    $_POST['ruleName']
                );
            }

            /** Prepare data for display. */
            if (!$this->FE['ASYNC']) {
                /** Page initial prepwork. */
                $this->initialPrepwork($this->L10N->getString('link_aux'), $this->L10N->getString('tip_aux'));

                /** Populate methods and actions. */
                $this->populateMethodsActions();

                /** Process auxiliary rules. */
                $this->FE['Data'] = '      ' . (
                    file_exists($this->Vault . 'auxiliary.yml') ?
                    $this->generateRules() :
                    '<span class="s">' . $this->L10N->getString('response_aux_none') . '<br /><br /></span>'
                );

                /** Priority information about auxiliary rules. */
                $this->FE['Priority_Aux'] = sprintf(
                    '%2$s%1$s%8$s%1$s(%9$s🔄%3$s🔄%4$s🔄%5$s🔄%6$s)%1$s%7$s',
                    $this->L10N->Data['Text Direction'] !== 'rtl' ? '➡' : '⬅',
                    $this->L10N->getString('label_aux_actWhl'),
                    $this->L10N->getString('label_aux_actGrl'),
                    $this->L10N->getString('label_aux_actBlk'),
                    $this->L10N->getString('label_aux_actByp'),
                    $this->L10N->getString('label_aux_actLog'),
                    $this->L10N->getString('label_aux_actRdr'),
                    $this->L10N->getString('label_aux_actRun') . '…',
                    $this->L10N->getString('label_aux_actPro')
                );

                /** Priority information about status codes. */
                $this->FE['Priority_Status_Codes'] = sprintf(
                    '%2$s%1$s%3$s%1$s%4$s%1$s%5$s%1$s%6$s%1$s%7$s%1$s%8$s',
                    $this->L10N->Data['Text Direction'] !== 'rtl' ? '➡' : '⬅',
                    '<code dir="ltr">ban_override(4xx🔄5xx)</code>',
                    '<code dir="ltr">rate_limiting(429)</code>',
                    '<code dir="ltr">silent_mode(301)</code>',
                    $this->L10N->getString('link_aux') . '<code dir="ltr">(4xx🔄5xx)</code>',
                    '<code dir="ltr">http_response_header_code(xxx)</code>',
                    $this->L10N->getString('link_aux') . '<code dir="ltr">(30x)</code>',
                    $this->L10N->getString('label_other')
                );

                /** Provides the "other options and special flags" to the default view mode new rule creation. */
                $this->FE['AuxFlagsProvides'] = '<div class="gridbox">';
                $this->CIDRAM['GridID'] = 'AAA';
                $this->CIDRAM['JSAuxAppend'] = '';
                foreach ($this->CIDRAM['Provide']['Auxiliary Rules']['Flags'] as $this->CIDRAM['FlagSetName'] => $this->CIDRAM['FlagSet']) {
                    $this->CIDRAM['FlagKey'] = preg_replace('~[^A-Za-z]~', '', $this->CIDRAM['FlagSetName']);
                    foreach ($this->CIDRAM['FlagSet'] as $this->CIDRAM['FlagName'] => $this->CIDRAM['FlagData']) {
                        if ($this->CIDRAM['FlagName'] === 'Empty' && isset($this->CIDRAM['FlagData']['Decoration'])) {
                            $this->FE['AuxFlagsProvides'] .= sprintf(
                                '<div class="gridboxitem" style="%s"></div>',
                                $this->CIDRAM['FlagData']['Decoration'] . 'filter:grayscale(.75)'
                            );
                            continue;
                        }
                        if (!isset($this->CIDRAM['FlagData']['Label'])) {
                            $this->FE['AuxFlagsProvides'] .= '<div class="gridboxitem"></div>';
                            continue;
                        }
                        $this->FE['AuxFlagsProvides'] .= sprintf(
                            '<label><div class="gridboxitem" style="%s" id="%s"><input type="radio" class="auto" name="%s" value="%s" onchange="javascript:checkFlagsSelected()" /> <strong>%s</strong></div></label>',
                            ($this->CIDRAM['FlagData']['Decoration'] ?? '') . 'filter:grayscale(.75)',
                            $this->CIDRAM['GridID'],
                            $this->CIDRAM['FlagKey'],
                            $this->CIDRAM['FlagName'],
                            $this->L10N->getString($this->CIDRAM['FlagData']['Label']) ?: $this->CIDRAM['FlagData']['Label']
                        );
                        $this->CIDRAM['JSAuxAppend'] .= ($this->CIDRAM['JSAuxAppend'] ? ',' : '') . "'" . $this->CIDRAM['GridID'] . "'";
                        $this->CIDRAM['GridID']++;
                    }
                    $this->FE['AuxFlagsProvides'] .= sprintf(
                        '<label><div class="gridboxitem" style="%s" id="%s"><input type="radio" class="auto" name="%s" value="%s" onchange="javascript:checkFlagsSelected()" checked /> <strong>%s</strong></div></label>',
                        $this->FE['Empty'] . 'filter:grayscale(0)',
                        $this->CIDRAM['GridID'],
                        $this->CIDRAM['FlagKey'],
                        'Default State',
                        $this->L10N->getString('label_aux_special_default_state')
                    );
                    $this->CIDRAM['JSAuxAppend'] .= ($this->CIDRAM['JSAuxAppend'] ? ',' : '') . "'" . $this->CIDRAM['GridID'] . "'";
                    $this->CIDRAM['GridID']++;
                }
                $this->FE['AuxFlagsProvides'] .= '</div><script type="text/javascript">window.auxFlags=['. $this->CIDRAM['JSAuxAppend'] . ']</script>';
                unset($this->CIDRAM['FlagData'], $this->CIDRAM['FlagName'], $this->CIDRAM['FlagKey'], $this->CIDRAM['FlagSet'], $this->CIDRAM['FlagSetName'], $this->CIDRAM['JSAuxAppend'], $this->CIDRAM['GridID']);

                /** Parse output. */
                $this->FE['FE_Content'] = $this->parseVars(
                    $this->L10N->Data + $this->FE,
                    $this->readFile($this->getAssetPath('_aux.html'))
                ) . $this->CIDRAM['MenuToggle'];

                /** Send output. */
                echo $this->sendOutput();
            } else {
                /** Delete an auxiliary rule. */
                if (isset($_POST['auxD'], $this->CIDRAM['AuxData'][$_POST['auxD']])) {
                    /** Destroy the target rule data array. */
                    unset($this->CIDRAM['AuxData'][$_POST['auxD']]);

                    /** Reconstruct and update auxiliary rules data. */
                    if (!$this->updateAuxData() && file_exists($this->Vault . 'auxiliary.yml')) {
                        /** If auxiliary rules data reconstruction fails, or if it's empty, delete the file. */
                        unlink($this->Vault . 'auxiliary.yml');
                    }

                    /** Confirm successful deletion. */
                    echo sprintf($this->L10N->getString('response_aux_rule_deleted_successfully'), $_POST['auxD']);
                } elseif (isset($_POST['auxT'])) {
                    /** Move an auxiliary rule to the top of the list. */
                    $this->CIDRAM['AuxData'] = $this->swapAssociativeArrayElements($this->CIDRAM['AuxData'], $_POST['auxT'], false);
                    $this->updateAuxData();
                } elseif (isset($_POST['auxB'])) {
                    /** Move an auxiliary rule to the bottom of the list. */
                    $this->CIDRAM['AuxData'] = $this->swapAssociativeArrayElements($this->CIDRAM['AuxData'], $_POST['auxB'], true);
                    $this->updateAuxData();
                } elseif (isset($_POST['auxMU'])) {
                    /** Move an auxiliary rule up one position. */
                    $this->CIDRAM['AuxData'] = $this->swapAssociativeArrayElementsByOne($this->CIDRAM['AuxData'], $_POST['auxMU'], false);
                    $this->updateAuxData();
                } elseif (isset($_POST['auxMD'])) {
                    /** Move an auxiliary rule down one position. */
                    $this->CIDRAM['AuxData'] = $this->swapAssociativeArrayElementsByOne($this->CIDRAM['AuxData'], $_POST['auxMD'], true);
                    $this->updateAuxData();
                }
            }
        }

        /** Auxiliary rules (edit mode). */
        elseif ($this->CIDRAM['QueryVars']['cidram-page'] === 'aux-edit' && $this->FE['Permissions'] === 1) {
            /** Page initial prepwork. */
            $this->initialPrepwork($this->L10N->getString('link_aux'), $this->L10N->getString('tip_aux'));

            /** Populate methods and actions. */
            $this->populateMethodsActions();

            /** Update auxiliary rules. */
            if (isset($_POST, $_POST['rulePriority']) && is_array($_POST['rulePriority'])) {
                $NewAuxArr = [];
                foreach ($_POST['rulePriority'] as $Iterant => $Priority) {
                    if (
                        !isset($_POST['ruleName'][$Iterant]) ||
                        !strlen($_POST['ruleName'][$Iterant]) ||
                        $_POST['ruleName'][$Iterant] === ' '
                    ) {
                        continue;
                    }
                    $NewAuxArr[$_POST['ruleName'][$Iterant]] = ['Priority' => $Priority];
                    if (!empty($_POST['mtd'][$Iterant])) {
                        if ($_POST['mtd'][$Iterant] === 'mtdReg') {
                            $NewAuxArr[$_POST['ruleName'][$Iterant]]['Method'] = 'RegEx';
                        } elseif ($_POST['mtd'][$Iterant] === 'mtdWin') {
                            $NewAuxArr[$_POST['ruleName'][$Iterant]]['Method'] = 'WinEx';
                        }
                    }
                    if (!empty($_POST['Notes'][$Iterant])) {
                        $NewAuxArr[$_POST['ruleName'][$Iterant]]['Notes'] = $_POST['Notes'][$Iterant];
                    }
                    if (!empty($_POST['logic'][$Iterant])) {
                        $NewAuxArr[$_POST['ruleName'][$Iterant]]['Logic'] = $_POST['logic'][$Iterant];
                    }
                    if (!empty($_POST['ruleReason'][$Iterant])) {
                        $NewAuxArr[$_POST['ruleName'][$Iterant]]['Reason'] = $_POST['ruleReason'][$Iterant];
                    }
                    if (!empty($_POST['ruleTarget'][$Iterant])) {
                        $NewAuxArr[$_POST['ruleName'][$Iterant]]['Target'] = $_POST['ruleTarget'][$Iterant];
                    }
                    if (!empty($_POST['ruleRun'][$Iterant])) {
                        $NewAuxArr[$_POST['ruleName'][$Iterant]]['Run'] = ['File' => $_POST['ruleRun'][$Iterant]];
                    }
                    if (!empty($_POST['from'][$Iterant])) {
                        $NewAuxArr[$_POST['ruleName'][$Iterant]]['From'] = $_POST['from'][$Iterant];
                    }
                    if (!empty($_POST['expiry'][$Iterant])) {
                        $NewAuxArr[$_POST['ruleName'][$Iterant]]['Expiry'] = $_POST['expiry'][$Iterant];
                    }
                    if (!empty($_POST['statusCode'][$Iterant])) {
                        $NewAuxArr[$_POST['ruleName'][$Iterant]]['Status Code'] = $_POST['statusCode'][$Iterant];
                    }
                    $NewAuxArr[$_POST['ruleName'][$Iterant]]['Action'] = $_POST['act'][$Iterant] ?? '';
                    if ($NewAuxArr[$_POST['ruleName'][$Iterant]]['Action'] !== 'actRun') {
                        unset($NewAuxArr[$_POST['ruleName'][$Iterant]]['Run']);
                    }
                    $NewAuxArr[$_POST['ruleName'][$Iterant]]['SourceType'] = $_POST['conSourceType'][$Iterant] ?? '';
                    $NewAuxArr[$_POST['ruleName'][$Iterant]]['IfOrNot'] = $_POST['conIfOrNot'][$Iterant] ?? '';
                    $NewAuxArr[$_POST['ruleName'][$Iterant]]['SourceValue'] = $_POST['conSourceValue'][$Iterant] ?? '';
                    foreach ($this->CIDRAM['Provide']['Auxiliary Rules']['Flags'] as $this->CIDRAM['FlagSetName'] => $this->CIDRAM['FlagSet']) {
                        $this->CIDRAM['FlagSetKey'] = preg_replace('~[^A-Za-z]~', '', $this->CIDRAM['FlagSetName']);
                        if (!empty($_POST[$this->CIDRAM['FlagSetKey']][$Iterant])) {
                            foreach ($this->CIDRAM['FlagSet'] as $this->CIDRAM['FlagName'] => $this->CIDRAM['FlagData']) {
                                if ($_POST[$this->CIDRAM['FlagSetKey']][$Iterant] === $this->CIDRAM['FlagName']) {
                                    $NewAuxArr[$_POST['ruleName'][$Iterant]][$this->CIDRAM['FlagName']] = true;
                                }
                            }
                        }
                    }
                }
                unset($this->CIDRAM['FlagData'], $this->CIDRAM['FlagName'], $this->CIDRAM['FlagSetKey'], $this->CIDRAM['FlagSetName'], $this->CIDRAM['FlagSet']);
                uasort($NewAuxArr, function ($A, $B): int {
                    if ($A['Priority'] === $B['Priority']) {
                        return 0;
                    }
                    if (!strlen($A['Priority'])) {
                        return strlen($B['Priority']) ? -1 : 0;
                    }
                    if (!strlen($B['Priority'])) {
                        return strlen($A['Priority']) ? 1 : 0;
                    }
                    return $A['Priority'] < $B['Priority'] ? -1 : 1;
                });
                foreach ($NewAuxArr as $Iterant => &$ThisAuxData) {
                    if ($ThisAuxData['Action'] === 'actWhl') {
                        $ThisAuxData['Action'] = 'Whitelist';
                    } elseif ($ThisAuxData['Action'] === 'actGrl') {
                        $ThisAuxData['Action'] = 'Greylist';
                    } elseif ($ThisAuxData['Action'] === 'actBlk') {
                        $ThisAuxData['Action'] = 'Block';
                    } elseif ($ThisAuxData['Action'] === 'actByp') {
                        $ThisAuxData['Action'] = 'Bypass';
                    } elseif ($ThisAuxData['Action'] === 'actLog') {
                        $ThisAuxData['Action'] = 'Don\'t log';
                    } elseif ($ThisAuxData['Action'] === 'actRdr') {
                        $ThisAuxData['Action'] = 'Redirect';
                    } elseif ($ThisAuxData['Action'] === 'actRun') {
                        $ThisAuxData['Action'] = 'Run';
                    } elseif ($ThisAuxData['Action'] === 'actPro') {
                        $ThisAuxData['Action'] = 'Profile';
                    }
                    if (is_array($ThisAuxData['SourceType'])) {
                        foreach ($ThisAuxData['SourceType'] as $IterantInner => $DataInner) {
                            if (!isset(
                                $ThisAuxData['IfOrNot'][$IterantInner],
                                $ThisAuxData['SourceValue'][$IterantInner]
                            ) || $ThisAuxData['SourceValue'][$IterantInner] === '') {
                                continue;
                            }
                            if (!isset($ThisAuxData[$ThisAuxData['Action']])) {
                                $ThisAuxData[$ThisAuxData['Action']] = [];
                            }
                            if ($ThisAuxData['IfOrNot'][$IterantInner] === 'If') {
                                if (!isset($ThisAuxData[$ThisAuxData['Action']]['If matches'])) {
                                    $ThisAuxData[$ThisAuxData['Action']]['If matches'] = [];
                                }
                                if (!isset($ThisAuxData[$ThisAuxData['Action']]['If matches'][$DataInner])) {
                                    $ThisAuxData[$ThisAuxData['Action']]['If matches'][$DataInner] = [];
                                }
                                $ThisAuxData[$ThisAuxData['Action']]['If matches'][$DataInner][] = $ThisAuxData['SourceValue'][$IterantInner];
                            } elseif ($ThisAuxData['IfOrNot'][$IterantInner] === 'Not') {
                                if (!isset($ThisAuxData[$ThisAuxData['Action']]['But not if matches'])) {
                                    $ThisAuxData[$ThisAuxData['Action']]['But not if matches'] = [];
                                }
                                if (!isset($ThisAuxData[$ThisAuxData['Action']]['But not if matches'][$DataInner])) {
                                    $ThisAuxData[$ThisAuxData['Action']]['But not if matches'][$DataInner] = [];
                                }
                                $ThisAuxData[$ThisAuxData['Action']]['But not if matches'][$DataInner][] = $ThisAuxData['SourceValue'][$IterantInner];
                            }
                        }
                    }
                    unset($ThisAuxData['Priority'], $ThisAuxData['SourceType'], $ThisAuxData['IfOrNot'], $ThisAuxData['SourceValue'], $ThisAuxData['Action']);
                }

                /** Reconstruct and update auxiliary rules data. */
                if ($NewAuxArr = $this->YAML->reconstruct($NewAuxArr)) {
                    $Handle = fopen($this->Vault . 'auxiliary.yml', 'wb');
                    fwrite($Handle, $NewAuxArr);
                    fclose($Handle);
                    $this->FE['state_msg'] = $this->L10N->getString('response_aux_updated');
                }
                unset($ThisAuxData, $DataInner, $Iterant, $IterantInner, $NewAuxArr, $Priority);
            }

            /** Process auxiliary rules. */
            $this->FE['Data'] = '      ' . $this->generateRules(true);

            /** Parse output. */
            $this->FE['FE_Content'] = $this->parseVars(
                $this->L10N->Data + $this->FE,
                $this->readFile($this->getAssetPath('_aux_edit.html'))
            ) . $this->CIDRAM['MenuToggle'];

            /** Send output. */
            echo $this->sendOutput();
        }

        /** Logs. */
        elseif ($this->CIDRAM['QueryVars']['cidram-page'] === 'logs' && $this->FE['Permissions'] > 0) {
            /** Page initial prepwork. */
            $this->initialPrepwork($this->L10N->getString('link_logs'), $this->L10N->getString('tip_logs'), false);

            /** Parse output. */
            $this->FE['FE_Content'] = $this->parseVars(
                $this->L10N->Data + $this->FE,
                $this->readFile($this->getAssetPath('_logs.html'))
            );

            /** Initialise array for fetching logs data. */
            $this->FE['LogFiles'] = [
                'Files' => $this->logsRecursiveList($this->Vault),
                'Out' => ''
            ];

            $this->FE['SearchInfo'] = '';
            $this->FE['SearchQuery'] = '';

            /** Default field separator. */
            $this->FE['FieldSeparator'] = ': ';

            /** Add flags CSS. */
            if ($this->FE['Flags'] = file_exists($this->Vault . 'assets/frontend/flags.css')) {
                $this->FE['OtherHead'] .= "\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"?cidram-page=flags\" />";
            }

            /** How to display the log data? */
            if (!isset($this->CIDRAM['QueryVars']['textMode'])) {
                $this->FE['TextModeLinks'] = 'simple';
            } elseif ($this->CIDRAM['QueryVars']['textMode'] === 'fancy') {
                $this->FE['TextModeLinks'] = 'fancy';
            } elseif ($this->CIDRAM['QueryVars']['textMode'] === 'tally') {
                $this->FE['TextModeLinks'] = 'tally';
            } else {
                $this->FE['TextModeLinks'] = 'simple';
            }

            /** Sort order */
            if (empty($this->CIDRAM['QueryVars']['sortOrder']) || $this->CIDRAM['QueryVars']['sortOrder'] === 'ascending') {
                $this->FE['SortOrder'] = 'ascending';
            } else {
                $this->FE['SortOrder'] = 'descending';
            }

            /** Remember display preferences? */
            $this->FE['Remember'] = isset($this->CIDRAM['QueryVars']['remember']) && $this->CIDRAM['QueryVars']['remember'] === 'on';

            /** Paginate entries? */
            $this->FE['Paginate'] = isset($this->CIDRAM['QueryVars']['paginate']) && $this->CIDRAM['QueryVars']['paginate'] === 'on';

            /** Entries per page. */
            $this->FE['PerPage'] = ($this->FE['Paginate'] && isset($this->CIDRAM['QueryVars']['perpage'])) ? (int)$this->CIDRAM['QueryVars']['perpage'] : 20;

            /** Which entry to start from. */
            $this->FE['From'] = ($this->FE['Paginate'] && isset($this->CIDRAM['QueryVars']['from'])) ? $this->CIDRAM['QueryVars']['from'] : '';

            /** The first entry for the next pagination page. */
            $this->FE['Next'] = '';

            /** The first entry for the previous pagination page. */
            $this->FE['Previous'] = '';

            /** Define query for search filters. */
            $this->FE['BlockLink'] = sprintf(
                '?cidram-page=logs&textMode=%s&sortOrder=%s%s%s%s%s%s',
                $this->FE['TextModeLinks'],
                $this->FE['SortOrder'],
                $this->FE['Remember'] ? '&remember=on' : '',
                $this->FE['Paginate'] ? '&paginate=on' : '',
                $this->FE['PerPage'] > 0 && $this->FE['PerPage'] !== 20 ? '&perpage=' . $this->FE['PerPage'] : '',
                $this->FE['From'] ? '&from=' . $this->FE['From'] : '',
                empty($this->CIDRAM['QueryVars']['logfile']) ? '' : '&logfile=' . $this->CIDRAM['QueryVars']['logfile']
            );

            /** Remember search filters. */
            if ($this->FE['Remember'] && $this->FE['BlockLink'] !== $this->FE['CachedLogsLink']) {
                $this->Cache->setEntry('CachedLogsLink-' . $this->FE['User'], $this->FE['BlockLink'], 31536000);
                $this->FE['FE_Content'] = str_replace(
                    ' href="' . $this->FE['CachedLogsLink'] . '">',
                    ' href="' . $this->FE['BlockLink'] . '">',
                    $this->FE['FE_Content']
                );
            }

            /** Define log data. */
            if (empty($this->CIDRAM['QueryVars']['logfile'])) {
                $this->FE['logfileData'] = $this->L10N->getString('logs_no_logfile_selected');
            } elseif (empty($this->FE['LogFiles']['Files'][$this->CIDRAM['QueryVars']['logfile']])) {
                $this->FE['logfileData'] = $this->L10N->getString('logs_logfile_doesnt_exist');
            } else {
                if (strtolower(substr($this->CIDRAM['QueryVars']['logfile'], -3)) === '.gz') {
                    $this->CIDRAM['GZLogHandler'] = gzopen($this->Vault . $this->CIDRAM['QueryVars']['logfile'], 'rb');
                    $this->FE['logfileData'] = '';
                    if (is_resource($this->CIDRAM['GZLogHandler'])) {
                        while (!gzeof($this->CIDRAM['GZLogHandler'])) {
                            $this->FE['logfileData'] .= gzread($this->CIDRAM['GZLogHandler'], self::FILE_BLOCKSIZE);
                        }
                        gzclose($this->CIDRAM['GZLogHandler']);
                    }
                    unset($this->CIDRAM['GZLogHandler']);
                } else {
                    $this->FE['logfileData'] = $this->readFile($this->Vault . $this->CIDRAM['QueryVars']['logfile']);
                }
                if (strpos($this->FE['logfileData'], '：') !== false) {
                    $this->FE['FieldSeparator'] = '：';
                }

                $this->CIDRAM['BlockSeparator'] = (strpos($this->FE['logfileData'], "\n\n") !== false) ? "\n\n" : "\n";
                $BlockSepLen = strlen($this->CIDRAM['BlockSeparator']);

                /** Strip PHP header. */
                if (substr($this->FE['logfileData'], 0, 15) === "\x3C\x3Fphp die; \x3F\x3E\n\n") {
                    $this->FE['logfileData'] = substr($this->FE['logfileData'], 15);
                }

                /** Reverse entries order for viewing descending entries. */
                if ($this->FE['SortOrder'] === 'descending') {
                    $this->FE['logfileData'] = explode($this->CIDRAM['BlockSeparator'], $this->FE['logfileData']);
                    $this->FE['logfileData'] = implode($this->CIDRAM['BlockSeparator'], array_reverse($this->FE['logfileData']));
                    if (substr($this->FE['logfileData'], 0, $BlockSepLen) === $this->CIDRAM['BlockSeparator']) {
                        $this->FE['logfileData'] = substr($this->FE['logfileData'], $BlockSepLen) . $this->CIDRAM['BlockSeparator'];
                    }
                }

                /** Determine entries count before and search query. */
                if (empty($this->CIDRAM['QueryVars']['search'])) {
                    $this->FE['SearchQuery'] = '';
                    $this->FE['EntryCountBefore'] = !str_replace("\n", '', $this->FE['logfileData']) ? 0 : (
                        substr_count($this->FE['logfileData'], "\n\n") ?: substr_count($this->FE['logfileData'], "\n")
                    );
                } else {
                    $this->FE['SearchQuery'] = base64_decode(str_replace('_', '=', $this->CIDRAM['QueryVars']['search']));
                    $this->FE['EntryCountBefore'] = 0;
                }

                /** Handle pagination lower boundary. */
                if ($this->FE['Paginate']) {
                    $this->FE['logfileData'] = $this->splitBeforeLine($this->FE['logfileData'], $this->FE['From']);
                    $this->FE['EstAft'] = substr_count($this->FE['logfileData'][0], $this->CIDRAM['BlockSeparator']);
                    $this->FE['EstFore'] = substr_count($this->FE['logfileData'][1], $this->CIDRAM['BlockSeparator']);
                    $this->FE['Needle'] = strlen($this->FE['logfileData'][0]);
                    $this->CIDRAM['Iterations'] = 0;
                    while ($this->stepThroughBlocks($this->FE['logfileData'][0], $this->FE['Needle'], 0, $this->FE['SearchQuery'], '<')) {
                        if (strlen($this->FE['SearchQuery'])) {
                            $this->stepThroughBlocks($this->FE['logfileData'][0], $this->FE['Needle'], 0, '', '<');
                        }
                        $this->CIDRAM['Iterations']++;
                        if (!empty($this->CIDRAM['QueryVars']['search'])) {
                            $this->FE['EntryCountBefore']++;
                        }
                        if (($this->CIDRAM['Iterations'] > $this->FE['PerPage']) && !$this->FE['Previous']) {
                            $this->FE['Previous'] = $this->isolateFirstFieldEntry(
                                substr($this->FE['logfileData'][0], $this->FE['Needle'] + $BlockSepLen),
                                $this->FE['FieldSeparator']
                            );
                        }
                    }
                    if (!$this->FE['Previous']) {
                        $this->FE['Previous'] = $this->isolateFirstFieldEntry(
                            $this->FE['logfileData'][0],
                            $this->FE['FieldSeparator']
                        );
                    }
                    if (!$this->FE['From']) {
                        $this->FE['From'] = $this->isolateFirstFieldEntry(
                            $this->FE['logfileData'][1],
                            $this->FE['FieldSeparator']
                        );
                    }
                    if ($this->FE['Previous'] === $this->FE['From']) {
                        $this->FE['Previous'] = '';
                    }
                    $this->FE['logfileData'] = $this->FE['logfileData'][1];
                    unset($this->CIDRAM['Iterations']);
                }

                /** Pagination counter. */
                $this->FE['Paginated'] = 1;

                /** Handle block filtering. */
                if (!empty($this->FE['logfileData']) && !empty($this->CIDRAM['QueryVars']['search'])) {
                    $NewLogFileData = '';
                    $this->FE['Needle'] = 0;
                    $BlockEnd = 0;
                    $this->FE['EntryCountPaginated'] = 0;
                    while ($this->stepThroughBlocks(
                        $this->FE['logfileData'],
                        $this->FE['Needle'],
                        $BlockEnd,
                        $this->FE['SearchQuery']
                    )) {
                        $this->FE['EntryCountBefore']++;
                        $BlockStart = strrpos(substr($this->FE['logfileData'], 0, $this->FE['Needle']), $this->CIDRAM['BlockSeparator'], $BlockEnd);
                        $BlockEnd = strpos($this->FE['logfileData'], $this->CIDRAM['BlockSeparator'], $this->FE['Needle']);
                        if ($this->FE['Paginate']) {
                            if (!$this->FE['From']) {
                                $this->FE['From'] = $this->isolateFirstFieldEntry(
                                    substr($this->FE['logfileData'], $BlockStart, $BlockEnd - $BlockStart),
                                    $this->FE['FieldSeparator']
                                );
                            }
                            $this->FE['Paginated']++;
                            if ($this->FE['Paginated'] > ($this->FE['PerPage'] + 1)) {
                                if (!$this->FE['Next']) {
                                    $this->FE['Next'] = $this->isolateFirstFieldEntry(
                                        substr($this->FE['logfileData'], $BlockStart, $BlockEnd - $BlockStart),
                                        $this->FE['FieldSeparator']
                                    );
                                }
                                continue;
                            }
                            $this->FE['EntryCountPaginated']++;
                            $NewLogFileData .= substr($this->FE['logfileData'], $BlockStart, $BlockEnd - $BlockStart);
                        } else {
                            $NewLogFileData .= substr($this->FE['logfileData'], $BlockStart, $BlockEnd - $BlockStart);
                        }
                    }
                    $this->FE['logfileData'] = rtrim($NewLogFileData) . $this->CIDRAM['BlockSeparator'];
                    unset($this->FE['Needle'], $this->CIDRAM['BlockSeparator'], $BlockEnd, $BlockStart, $NewLogFileData);
                    $this->FE['SearchInfoRender'] = (
                        $this->FE['Flags'] && preg_match('~^[A-Z]{2}$~', $this->FE['SearchQuery'])
                    ) ? '<span class="flag ' . $this->FE['SearchQuery'] . '"><span></span></span>' : '<code>' . $this->FE['SearchQuery'] . '</code>';
                    if ($this->FE['Paginate']) {
                        $this->FE['SearchInfo'] = '<br />' . sprintf(
                            $this->L10N->getPlural($this->FE['EntryCountBefore'], 'label_displaying_that_cite'),
                            '<span class="txtRd">' . $this->NumberFormatter->format($this->FE['EntryCountPaginated']) . '</span>' .
                            '<span class="txtBl">/</span>' .
                            '<span class="txtRd">' . $this->NumberFormatter->format($this->FE['EntryCountBefore']) . '</span>',
                            $this->FE['SearchInfoRender']
                        );
                        if ($this->FE['From']) {
                            $this->FE['SearchInfo'] .= '<br />' . sprintf(
                                $this->L10N->getString('label_starting_from'),
                                '<span class="txtRd">' . $this->FE['From'] . '</span>'
                            );
                            if ($this->FE['Previous']) {
                                $this->paginationFromLink('label_previous', $this->FE['Previous']);
                            }
                            if ($this->FE['Next']) {
                                $this->paginationFromLink('label_next', $this->FE['Next']);
                            }
                            if (isset($this->FE['EstAft'])) {
                                $this->FE['EstAft'] = floor(($this->FE['EstAft'] / (($this->FE['EstAft'] + $this->FE['EstFore']) ?: 1)) * 100);
                                if ($this->FE['EstFore'] <= $this->FE['PerPage']) {
                                    $this->FE['EstWidth'] = 100 - $this->FE['EstAft'];
                                } else {
                                    $this->FE['EstWidth'] = floor(($this->FE['EntryCountPaginated'] / ($this->FE['EntryCountBefore'] ?: $this->FE['EntryCount'])) * 100);
                                }
                                $this->FE['SearchInfo'] .= sprintf(
                                    '<br /><div style="width:100%%;height:2px;overflow:visible;background-color:rgba(0,192,0,.4);margin:1px 0 1px 0">' .
                                    '<div style="position:relative;%s:%d%%;top:-1px;width:%d%%;height:4px;overflow:visible;background-color:rgba(192,0,0,.5);margin:0"></div></div>',
                                    $this->FE['FE_Align'],
                                    $this->FE['EstAft'],
                                    $this->FE['EstWidth']
                                );
                            }
                        }
                    } else {
                        $this->FE['SearchInfo'] = '<br />' . sprintf(
                            $this->L10N->getPlural($this->FE['EntryCountBefore'], 'label_displaying_that_cite'),
                            '<span class="txtRd">' . $this->NumberFormatter->format($this->FE['EntryCountBefore']) . '</span>',
                            $this->FE['SearchInfoRender']
                        );
                    }
                } else {
                    if ($this->FE['Paginate']) {
                        $NewLogFileData = '';
                        $OriginalLogDataLen = strlen($this->FE['logfileData']);
                        $BlockStart = 0;
                        $BlockEnd = 0;
                        if (!$this->FE['From']) {
                            $this->FE['From'] = $this->isolateFirstFieldEntry(
                                $this->FE['logfileData'],
                                $this->FE['FieldSeparator']
                            );
                        }
                        while (true) {
                            $BlockOffset = $BlockStart + $BlockSepLen;
                            if ($BlockOffset >= $OriginalLogDataLen) {
                                break;
                            }
                            $BlockEnd = strpos($this->FE['logfileData'], $this->CIDRAM['BlockSeparator'], $BlockStart);
                            if ($BlockEnd === false) {
                                break;
                            }
                            $NewLogFileData .= substr($this->FE['logfileData'], $BlockStart, ($BlockEnd - $BlockStart) + $BlockSepLen);
                            $this->FE['Paginated']++;
                            if ($this->FE['Paginated'] > $this->FE['PerPage']) {
                                if (!$this->FE['Next']) {
                                    $this->FE['Next'] = $this->isolateFirstFieldEntry(
                                        substr($this->FE['logfileData'], $BlockEnd + $BlockSepLen),
                                        $this->FE['FieldSeparator']
                                    );
                                }
                                break;
                            }
                            $BlockStart = $BlockEnd + $BlockSepLen;
                        }
                        $this->FE['logfileData'] = $NewLogFileData;
                        unset($BlockOffset, $BlockSepLen, $this->CIDRAM['BlockSeparator'], $BlockEnd, $BlockStart, $OriginalLogDataLen, $NewLogFileData);
                    }
                    $this->FE['EntryCount'] = !str_replace("\n", '', $this->FE['logfileData']) ? 0 : (
                        substr_count($this->FE['logfileData'], "\n\n") ?: substr_count($this->FE['logfileData'], "\n")
                    );
                    if ($this->FE['Paginate']) {
                        $this->FE['SearchInfo'] = '<br />' . sprintf(
                            $this->L10N->getPlural($this->FE['EntryCountBefore'], 'label_displaying'),
                            '<span class="txtRd">' . $this->NumberFormatter->format($this->FE['EntryCount']) . '</span>' .
                            '<span class="txtBl">/</span>' .
                            '<span class="txtRd">' . $this->NumberFormatter->format($this->FE['EntryCountBefore']) . '</span>'
                        );
                        if ($this->FE['From']) {
                            $this->FE['SearchInfo'] .= '<br />' . sprintf(
                                $this->L10N->getString('label_starting_from'),
                                '<span class="txtRd">' . $this->FE['From'] . '</span>'
                            );
                            if ($this->FE['Previous']) {
                                $this->paginationFromLink('label_previous', $this->FE['Previous']);
                            }
                            if ($this->FE['Next']) {
                                $this->paginationFromLink('label_next', $this->FE['Next']);
                            }
                            if (isset($this->FE['EstAft'])) {
                                $this->FE['EstAft'] = floor(($this->FE['EstAft'] / (($this->FE['EstAft'] + $this->FE['EstFore']) ?: 1)) * 100);
                                if ($this->FE['EstFore'] <= $this->FE['PerPage']) {
                                    $this->FE['EstWidth'] = 100 - $this->FE['EstAft'];
                                } else {
                                    $this->FE['EstWidth'] = floor(($this->FE['EntryCount'] / ($this->FE['EntryCountBefore'] ?: $this->FE['EntryCount'])) * 100);
                                }
                                $this->FE['SearchInfo'] .= sprintf(
                                    '<br /><div style="width:100%%;height:2px;overflow:visible;background-color:rgba(0,192,0,.4);margin:1px 0 1px 0">' .
                                    '<div style="position:relative;%s:%d%%;top:-1px;width:%d%%;height:4px;overflow:visible;background-color:rgba(192,0,0,.5);margin:0"></div></div>',
                                    $this->FE['FE_Align'],
                                    $this->FE['EstAft'],
                                    $this->FE['EstWidth']
                                );
                            }
                        }
                    } else {
                        $this->FE['SearchInfo'] = '<br />' . sprintf(
                            $this->L10N->getPlural($this->FE['EntryCount'], 'label_displaying'),
                            '<span class="txtRd">' . $this->NumberFormatter->format($this->FE['EntryCount']) . '</span>'
                        );
                    }
                }

                $this->FE['logfileData'] = $this->FE['TextModeLinks'] === 'fancy' ? str_replace(
                    ['<', '>', "\r", "\n"],
                    ['&lt;', '&gt;', '', "<br />\n"],
                    $this->FE['logfileData']
                ) : str_replace(
                    ['<', '>', "\r"],
                    ['&lt;', '&gt;', ''],
                    $this->FE['logfileData']
                );
                $this->FE['mod_class_nav'] = ' big';
                $this->FE['mod_class_right'] = ' extend';
            }
            if (empty($this->FE['mod_class_nav'])) {
                $this->FE['mod_class_nav'] = ' extend';
                $this->FE['mod_class_right'] = ' big';
            }

            /** Logs control form. */
            $this->FE['TextModeSwitchLink'] = sprintf(
                '<td class="h4"><span class="s">%1$s<br /><select name="textMode" class="auto">' .
                '<option value="simple"%2$s>%3$s</option>' .
                '<option value="fancy"%4$s>%5$s</option>' .
                '<option value="tally"%6$s>%7$s</option>' .
                '</select></span></td><td class="h4f"><span class="s">' .
                '<input type="radio" class="auto" name="sortOrder" value="ascending" id="sOa"%8$s /><label for="sOa">%9$s</label><br />' .
                '<input type="radio" class="auto" name="sortOrder" value="descending" id="sOd"%10$s /><label for="sOd">%11$s</label>' .
                '</span></td></tr><tr><td class="h4"><span class="s">' .
                '<input type="checkbox" name="paginate" class="auto" id="paginate"%16$s /><label for="paginate">%17$s</label><br />' .
                '<label for="perpage">%18$s</label><br /><input type="number" name="perpage" class="auto" id="perpage" value="%19$d" />' .
                '</span></td><td class="h4f"><span class="s">' .
                '<input type="checkbox" name="remember" class="auto" id="remember"%12$s /><label for="remember">%13$s</label><br />' .
                '<input type="hidden" name="logfile" value="%14$s" /><input type="submit" value="%15$s" />' .
                '</span></td>',
                $this->L10N->getString('label_textmode'),
                $this->FE['TextModeLinks'] === 'simple' ? ' selected' : '',
                $this->L10N->getString('label_textmode_simple'),
                $this->FE['TextModeLinks'] === 'fancy' ? ' selected' : '',
                $this->L10N->getString('label_textmode_fancy'),
                $this->FE['TextModeLinks'] === 'tally' ? ' selected' : '',
                $this->L10N->getString('label_textmode_tally'),
                $this->FE['SortOrder'] === 'ascending' ? ' checked' : '',
                $this->L10N->getString('switch-descending-order-set-false'),
                $this->FE['SortOrder'] === 'descending' ? ' checked' : '',
                $this->L10N->getString('switch-descending-order-set-true'),
                $this->FE['Remember'] ? ' checked' : '',
                $this->L10N->getString('label_remember'),
                $this->CIDRAM['QueryVars']['logfile'] ?? '',
                $this->L10N->getString('field_ok'),
                $this->FE['Paginate'] ? ' checked' : '',
                $this->L10N->getString('label_paginate'),
                $this->L10N->getString('label_entries_per_page'),
                $this->FE['PerPage']
            );

            /** Prepare log data formatting. */
            if ($this->FE['TextModeLinks'] === 'fancy') {
                $this->formatter($this->FE['logfileData'], $this->FE['BlockLink'], $this->FE['SearchQuery'], $this->FE['FieldSeparator'], $this->FE['Flags']);
            } elseif ($this->FE['TextModeLinks'] === 'tally') {
                $this->FE['logfileData'] = $this->tally(
                    $this->FE['logfileData'],
                    $this->FE['BlockLink'],
                    [$this->L10N->getString('field_id'), $this->L10N->getString('field_datetime')]
                );
            } else {
                $this->FE['logfileData'] = '<textarea readonly>' . trim($this->FE['logfileData']) . '</textarea>';
            }

            /** Generate a list of the logs. */
            foreach ($this->FE['LogFiles']['Files'] as $this->FE['LogFiles']['ThisLogFile']) {
                $this->FE['LogFiles']['Out'] .= sprintf(
                    '      <a href="?cidram-page=logs&textMode=%1$s&sortOrder=%2$s%3$s&logfile=%4$s">%4$s</a> – %5$s<br />',
                    $this->FE['TextModeLinks'],
                    $this->FE['SortOrder'],
                    $this->FE['Remember'] ? '&remember=on' : '',
                    $this->FE['LogFiles']['ThisLogFile']['Filename'],
                    $this->FE['LogFiles']['ThisLogFile']['Filesize']
                ) . "\n";
            }

            /** Calculate page load time (useful for debugging). */
            $this->FE['ProcessTime'] = microtime(true) - $_SERVER['REQUEST_TIME_FLOAT'];
            $this->FE['SearchInfo'] = '<td colspan="3" class="spanner">' . sprintf(
                $this->L10N->getPlural($this->FE['ProcessTime'], 'state_loadtime'),
                '<span class="txtRd">' . $this->NumberFormatter->format($this->FE['ProcessTime'], 3) . '</span>'
            ) . $this->FE['SearchInfo'] . '</td>';

            /** Set logfile list or no logfiles available message. */
            $this->FE['LogFiles'] = $this->FE['LogFiles']['Out'] ?: $this->L10N->getString('logs_no_logfiles_available');

            /** Send output. */
            echo $this->sendOutput();
        }

        /** Finalise IO operations all at once. */
        unset($this->CIDRAM['Updater-IO']);

        /** Print Cronable failure state messages here. */
        if ($this->FE['CronMode'] !== '' && $this->FE['state_msg'] !== '' && $this->FE['UserState'] !== 1) {
            if ($this->FE['CronType'] === 'localUpdate') {
                $Results = ['state_msg' => $this->FE['state_msg']];
            } else {
                echo json_encode(['state_msg' => $this->FE['state_msg']]);
            }
        }

        /** Exit front-end. */
        if (empty($this->Alternate) && $this->FE['CronType'] !== 'localUpdate') {
            die;
        }
    }
}
